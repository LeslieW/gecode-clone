/*
 *  Main authors:
 *     Christian Schulte <schulte@gecode.org>
 *
 *  Copyright:
 *     Christian Schulte, 2005
 *
 *  Last modified:
 *     $Date: 2005-08-03 17:17:11 +0200 (Wed, 03 Aug 2005) $ by $Author: schulte $
 *     $Revision: 2126 $
 *
 *  This file is part of Gecode, the generic constraint
 *  development environment:
 *     http://www.gecode.org
 *
 *  See the file "LICENSE" for information on usage and
 *  redistribution of this file, and for a
 *     DISCLAIMER OF ALL WARRANTIES.
 *
 */

namespace Gecode { 

  namespace MiniModel {

    /*
     * Operations for linear expressions
     *
     */
    forceinline
    LinRel::LinRel(void) {}
    
    forceinline
    LinRel::LinRel(const LinExpr& l, IntRelType irt0, const LinExpr& r) 
      : e(l,r,-1), irt(irt0) {}
    
    forceinline
    LinRel::LinRel(const LinExpr& l, IntRelType irt0, int r) 
      : e(l,-r,1), irt(irt0) {}
    
    forceinline
    LinRel::LinRel(int l, IntRelType irt0, const LinExpr& r) 
      : e(r,l,-1), irt(irt0) {}
    
    forceinline IntRelType
    LinRel::neg(IntRelType irt) {
      switch (irt) { 
      case IRT_EQ: return IRT_NQ;
      case IRT_NQ: return IRT_EQ;
      case IRT_LQ: return IRT_GR;
      case IRT_LE: return IRT_GQ;
      case IRT_GQ: return IRT_LE;
      case IRT_GR: 
      default:
	assert(irt == IRT_GR);
      }
      return IRT_LQ;
    }

    forceinline void
    LinRel::post(Space* home, bool t) const {
      if (t) {
	e.post(home,irt);
      } else {
	e.post(home,neg(irt));
      }
    }
    
    forceinline void
    LinRel::post(Space* home, const BoolVar& b) const {
      e.post(home,irt,b);
    }
    
  }

}

/*
 * Construction of linear relations
 *
 */
forceinline Gecode::MiniModel::LinRel
operator==(int l,
	   const Gecode::MiniModel::LinExpr& r) {
  return Gecode::MiniModel::LinRel(l,Gecode::IRT_EQ,r);
}
forceinline Gecode::MiniModel::LinRel
operator==(const Gecode::MiniModel::LinExpr& l,
	   int r) {
  return Gecode::MiniModel::LinRel(l,Gecode::IRT_EQ,r);
}
forceinline Gecode::MiniModel::LinRel
operator==(const Gecode::MiniModel::LinExpr& l,
	   const Gecode::MiniModel::LinExpr& r) {
  return Gecode::MiniModel::LinRel(l,Gecode::IRT_EQ,r);
}

forceinline Gecode::MiniModel::LinRel
operator!=(int l,
	   const Gecode::MiniModel::LinExpr& r) {
  return Gecode::MiniModel::LinRel(l,Gecode::IRT_NQ,r);
}
forceinline Gecode::MiniModel::LinRel
operator!=(const Gecode::MiniModel::LinExpr& l,
	   int r) {
  return Gecode::MiniModel::LinRel(l,Gecode::IRT_NQ,r);
}
forceinline Gecode::MiniModel::LinRel
operator!=(const Gecode::MiniModel::LinExpr& l,
	   const Gecode::MiniModel::LinExpr& r) {
  return Gecode::MiniModel::LinRel(l,Gecode::IRT_NQ,r);
}

forceinline Gecode::MiniModel::LinRel
operator<(int l,
	  const Gecode::MiniModel::LinExpr& r) {
  return Gecode::MiniModel::LinRel(l,Gecode::IRT_LE,r);
}
forceinline Gecode::MiniModel::LinRel
operator<(const Gecode::MiniModel::LinExpr& l,
	  int r) {
  return Gecode::MiniModel::LinRel(l,Gecode::IRT_LE,r);
}
forceinline Gecode::MiniModel::LinRel
operator<(const Gecode::MiniModel::LinExpr& l,
	  const Gecode::MiniModel::LinExpr& r) {
  return Gecode::MiniModel::LinRel(l,Gecode::IRT_LE,r);
}

forceinline Gecode::MiniModel::LinRel
operator<=(int l,
	   const Gecode::MiniModel::LinExpr& r) {
  return Gecode::MiniModel::LinRel(l,Gecode::IRT_LQ,r);
}
forceinline Gecode::MiniModel::LinRel
operator<=(const Gecode::MiniModel::LinExpr& l,
	   int r) {
  return Gecode::MiniModel::LinRel(l,Gecode::IRT_LQ,r);
}
forceinline Gecode::MiniModel::LinRel
operator<=(const Gecode::MiniModel::LinExpr& l,
	   const Gecode::MiniModel::LinExpr& r) {
  return Gecode::MiniModel::LinRel(l,Gecode::IRT_LQ,r);
}

forceinline Gecode::MiniModel::LinRel
operator>(int l,
	  const Gecode::MiniModel::LinExpr& r) {
  return Gecode::MiniModel::LinRel(l,Gecode::IRT_GR,r);
}
forceinline Gecode::MiniModel::LinRel
operator>(const Gecode::MiniModel::LinExpr& l,
	  int r) {
  return Gecode::MiniModel::LinRel(l,Gecode::IRT_GR,r);
}
forceinline Gecode::MiniModel::LinRel
operator>(const Gecode::MiniModel::LinExpr& l,
	  const Gecode::MiniModel::LinExpr& r) {
  return Gecode::MiniModel::LinRel(l,Gecode::IRT_GR,r);
}

forceinline Gecode::MiniModel::LinRel
operator>=(int l,
	   const Gecode::MiniModel::LinExpr& r) {
  return Gecode::MiniModel::LinRel(l,Gecode::IRT_GQ,r);
}
forceinline Gecode::MiniModel::LinRel
operator>=(const Gecode::MiniModel::LinExpr& l,
	   int r) {
  return Gecode::MiniModel::LinRel(l,Gecode::IRT_GQ,r);
}
forceinline Gecode::MiniModel::LinRel
operator>=(const Gecode::MiniModel::LinExpr& l,
	   const Gecode::MiniModel::LinExpr& r) {
  return Gecode::MiniModel::LinRel(l,Gecode::IRT_GQ,r);
}


namespace Gecode {

  /*
   * Posting
   *
   */

  forceinline void 
  post(Space* home, const MiniModel::LinRel& r) {
    if (home->failed()) return;
    r.post(home);
  }
  forceinline void 
  post(Space* home, bool r) {
    if (home->failed()) return;
    if (!r)
      home->fail();
  }

}

// STATISTICS: minimodel-any
