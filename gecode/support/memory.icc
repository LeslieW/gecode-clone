/* -*- mode: C++; c-basic-offset: 2; indent-tabs-mode: nil -*- */
/*
 *  Main authors:
 *     Christian Schulte <schulte@gecode.org>
 *
 *  Copyright:
 *     Christian Schulte, 2004
 *
 *  Last modified:
 *     $Date$ by $Author$
 *     $Revision$
 *
 *  This file is part of Gecode, the generic constraint
 *  development environment:
 *     http://www.gecode.org
 *
 *  Permission is hereby granted, free of charge, to any person obtaining
 *  a copy of this software and associated documentation files (the
 *  "Software"), to deal in the Software without restriction, including
 *  without limitation the rights to use, copy, modify, merge, publish,
 *  distribute, sublicense, and/or sell copies of the Software, and to
 *  permit persons to whom the Software is furnished to do so, subject to
 *  the following conditions:
 *
 *  The above copyright notice and this permission notice shall be
 *  included in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#include <cstring>
#include <cstdlib>

namespace Gecode {

  /// Heap and automatic memory management
  namespace Memory {

    /**
     * \defgroup FuncMemHeap Heap-memory management
     *
     * All routines throw an exception of MemoryExhausted, if a request
     * cannot be fulfilled.
     * \ingroup FuncMem
     */

    //@{
    /// Allocate \a s bytes from heap.
    void* malloc(size_t s);
    /// Free memory block starting at \a p
    void  free(void* p);
    /// Try to change memory block starting at \a p to size \a s
    void* realloc(void* p, size_t s);

    /**
     * \brief Allocate block of \a n objects of type \a T from heap
     *
     * Note that this function implements C++ semantics: the default
     * constructor of \a T is run for all \a n objects.
     */
    template <class T>
    T* talloc(unsigned int n=1);
    /** 
     * \brief Delete \a n objects starting at \a b
     *
     * Note that this function implements C++ semantics: the destructor
     * of \a T is run for all \a n objects.
     */
    template <class T>
    void tfree(T* b, unsigned int n=1);
    /**
     * \brief Reallocate block of \a n objects starting at \a b to \a m objects of type \a T from heap
     *
     * Note that this function implements C++ semantics: the copy constructor
     * of \a T is run for all \f$\min(n,m)$\f objects and the default
     * constructor of \a T is run for all remaining \f$\max(n,m)-\min(n,m)$\f
     * objects.
     *
     * Returns the address of the new block.
     */
    template <class T>
    T* trealloc(T* b, unsigned int n, unsigned int m);
    /** 
     * \brief Copy \a n objects starting at \a s to \a d
     *
     * Note that this function implements C++ semantics: the assignment
     * operator of \a T is run for all \a n objects.
     *
     * Returns \a d.
     */
    template <class T>
    T* tcopy(T* d, const T* s, unsigned int n);
    //@}


    /*
     * Wrappers for untyped allocation routines
     *
     */

    forceinline void*
    malloc(size_t s) {
      void* p = ::malloc(s);
      if (p != NULL)
        return p;
      throw MemoryExhausted();
    }

    forceinline void
    free(void* p) {
      ::free(p);
    }

    forceinline void*
    realloc(void* p, size_t s) {
      p = ::realloc(p,s);
      if (p != NULL || s == 0)
        return p;
      throw MemoryExhausted();
    }


    /*
     * Typed allocation routines
     *
     */

    template <class T>
    forceinline T*
    talloc(unsigned int n) {
      T* p = static_cast<T*>(Memory::malloc(sizeof(T)*n));
      for (unsigned int i=n; i--; )
        (void) new (p+i) T();
      return p;
    }

    template <class T>
    forceinline void
    tfree(T* b, unsigned int n) {
      for (unsigned int i=n; i--; )
        b[i].~T();
      Memory::free(b);
    }

    template <class T>
    forceinline T*
    trealloc(T* b, unsigned int n, unsigned int m) {
      T* p = static_cast<T*>(Memory::malloc(sizeof(T)*m));
      for (unsigned int i=std::min(n,m); i--; )
        (void) new (p+i) T(b[i]);
      for (unsigned int i=n+1; i<m; i++)
        (void) new (p+i) T();
      return p;
    }

#define GECODE_SUPPORT_TREALLOC(T)                              \
    template <>                                                 \
    forceinline T*                                              \
    trealloc<T>(T* b, unsigned int, unsigned int m) {           \
      return static_cast<T*>(Memory::realloc(b,m*sizeof(T)));   \
    }

    GECODE_SUPPORT_TREALLOC(bool)
    GECODE_SUPPORT_TREALLOC(signed char)
    GECODE_SUPPORT_TREALLOC(unsigned char)
    GECODE_SUPPORT_TREALLOC(signed short int)
    GECODE_SUPPORT_TREALLOC(unsigned short int)
    GECODE_SUPPORT_TREALLOC(signed int)
    GECODE_SUPPORT_TREALLOC(unsigned int)
    GECODE_SUPPORT_TREALLOC(signed long int)
    GECODE_SUPPORT_TREALLOC(unsigned long int)
    GECODE_SUPPORT_TREALLOC(float)
    GECODE_SUPPORT_TREALLOC(double)

    template <class T>
    forceinline T**
    trealloc(T** b, unsigned int, unsigned int m) {
      return static_cast<T**>(Memory::realloc(b,m*sizeof(T*)));
    }

#undef GECODE_SUPPORT_TREALLOC

    template <class T>
    forceinline T*
    tcopy(T* d, const T* s, unsigned int n) {
      for (unsigned int i=n; i--; )
        d[i]=s[i];
      return d;
    }


#define GECODE_SUPPORT_TCOPY(T)                         \
    template <>                                         \
    forceinline T*                                      \
    tcopy(T* d, const T* s, unsigned int n) {           \
      return static_cast<T*>(memcpy(d,s,n*sizeof(T)));  \
    }

    GECODE_SUPPORT_TCOPY(bool)
    GECODE_SUPPORT_TCOPY(signed char)
    GECODE_SUPPORT_TCOPY(unsigned char)
    GECODE_SUPPORT_TCOPY(signed short int)
    GECODE_SUPPORT_TCOPY(unsigned short int)
    GECODE_SUPPORT_TCOPY(signed int)
    GECODE_SUPPORT_TCOPY(unsigned int)
    GECODE_SUPPORT_TCOPY(signed long int)
    GECODE_SUPPORT_TCOPY(unsigned long int)
    GECODE_SUPPORT_TCOPY(float)
    GECODE_SUPPORT_TCOPY(double)

#undef GECODE_SUPPORT_TCOPY

    template <class T>
    forceinline T**
    tcopy(T** d, const T** s, unsigned int n) {
      return static_cast<T**>(memcpy(d,s,n*sizeof(T*)));
    }

  }

}

/**
 * \defgroup FuncMemAuto Automatic memory management
 * \ingroup FuncMem
 */

//@{

/**
 * \def GECODE_AUTOARRAY(T,X,N)
 * \brief Automatic (stack allocation) of memory
 *
 * Allocates automatic memory for \a N objects of type \a T and
 * declares and initializes the pointer \a X to \a T to that
 * block.
 *
 * As soon as the current scope is left, the memory is freed.
 *
 * Tries to allocate small blocks on the stack, bigger ones are
 * allocated from the heap (however, management is still automatic).
 */

//@}

/*
 * Automatic stack memory management
 *
 */

// The variable-sized arrays gcc extension is broken on
// i386/Apple gcc prior to 4.2
#if defined(__GNUC__) && (! defined(_WIN32) ) && \
    (! (defined(__APPLE__) && defined(__i386) && \
        __GNUC__ == 4 && __GNUC_MINOR__ < 2))

#define GECODE_AUTOARRAY(T,X,N)                    \
char GECODE_FRESH(X) [(N)*sizeof(T)];              \
T* X = ::Gecode::Support::ptr_cast<T*>(GECODE_FRESH(X));

#elif defined(_MSC_VER)

#include <cstdlib>
#include <malloc.h>

namespace Gecode { namespace Memory {

  /**
   *  \brief Helper class for large memory chunks obtained from heap
   */
  class ManageMemory {
  private:
    void* _x;
  public:
    ManageMemory(void* p) : _x(p) {}
    ~ManageMemory(void) { _freea(_x); }
  };

}}


#define GECODE_AUTOARRAY(T,X,N)                                 \
T* X;                                                           \
X = static_cast<T*>(_malloca(sizeof(T)*(N)));                   \
::Gecode::Memory::ManageMemory __GECODE__ ## X ## __LINE__(X);


#else

#include <cstdlib>

namespace Gecode { namespace Memory {

  /**
   *  \brief Helper class for large automatic memory chunks
   */
  template <class T>
  class AutoArray {
  private:
    T* _x;
  public:
    AutoArray(const int n) {
      _x = static_cast<T*>(::malloc(sizeof(T)*n));
    }
    ~AutoArray(void) {
      ::free(_x);
    }
    T &operator [](const int i){ return _x[i]; }
    T &operator [](const unsigned int i){ return _x[i]; }
    operator T*(void) { return _x; }
  };

}}

#define GECODE_AUTOARRAY(T,X,N) ::Gecode::Memory::AutoArray< T > X(N)

#endif

// STATISTICS: support-any
