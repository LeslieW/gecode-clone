/*
 *  Main authors:
 *     Christian Schulte <schulte@gecode.org>
 *
 *  Copyright:
 *     Christian Schulte, 2003
 *
 *  Last modified:
 *     $Date$ by $Author$
 *     $Revision$
 *
 *  This file is part of Gecode, the generic constraint
 *  development environment:
 *     http://www.gecode.org
 *
 *  See the file "LICENSE" for information on usage and
 *  redistribution of this file, and for a
 *     DISCLAIMER OF ALL WARRANTIES.
 *
 */

namespace Gecode { namespace Search {

  /*
   * Node for recomputation
   *
   */

  forceinline
  ReCoNode::ReCoNode(Space* s, Space* c)
    : _space(c), _alt(0), _desc(s->description()) {}

  forceinline Space*
  ReCoNode::space(void) const {
    return _space;
  }
  forceinline void
  ReCoNode::space(Space* s) {
    _space = s;
  }

  forceinline unsigned int
  ReCoNode::alt(void) const {
    return _alt;
  }
  forceinline bool
  ReCoNode::rightmost(void) const {
    return _alt+1 == _desc->alternatives();
  }
  forceinline void
  ReCoNode::next(void) {
    _alt++;
  }

  forceinline BranchingDesc*
  ReCoNode::desc(void) const {
    return _desc;
  }

  forceinline void
  ReCoNode::dispose(void) {
    delete _space;
    delete _desc;
  }



  /*
   * Depth-first stack with recomputation
   *
   */

  forceinline
  ReCoStack::ReCoStack(unsigned int a_d0) : a_d(a_d0) {}

  forceinline BranchingDesc*
  ReCoStack::push(Space* s, Space* c) {
    ReCoNode sn(s,c);
    Support::DynamicStack<ReCoNode>::push(sn);
    return sn.desc();
  }

  forceinline bool
  ReCoStack::next(EngineCtrl& stat) {
    // Generate path for next node and return whether node exists.
    while (!empty())
      if (top().rightmost()) {
	stat.pop(top().space(),top().desc());
	pop().dispose();
      } else {
	top().next();
	return true;
      }
    return false;
  }

  inline void
  ReCoStack::reset(void) {
    while (!empty())
      pop().dispose();
  }

}}

// STATISTICS: search-any
