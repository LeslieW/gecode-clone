/* -*- mode: C++; c-basic-offset: 2; indent-tabs-mode: nil -*- */
/*
 *  Main authors:
 *     Patrick Pekczynski <pekczynski@ps.uni-sb.de>
 *
 *  Copyright:
 *     Patrick Pekczynski, 2006
 *
 *  Last modified:
 *     $Date$ by $Author$
 *     $Revision$
 *
 *  This file is part of Gecode, the generic constraint
 *  development environment:
 *     http://www.gecode.org
 *
 *  Permission is hereby granted, free of charge, to any person obtaining
 *  a copy of this software and associated documentation files (the
 *  "Software"), to deal in the Software without restriction, including
 *  without limitation the rights to use, copy, modify, merge, publish,
 *  distribute, sublicense, and/or sell copies of the Software, and to
 *  permit persons to whom the Software is furnished to do so, subject to
 *  the following conditions:
 *
 *  The above copyright notice and this permission notice shall be
 *  included in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

namespace Gecode { namespace CpltSet { namespace Branch {

  template <bool exclude>
  forceinline IntSet
  ValMin<exclude>::val(const Space*, CpltSetView x) {
    DomValues<CpltSetView> dom(x);
    return dom.val();
  }

  template <bool exclude>
  forceinline ModEvent
  ValMin<exclude>::tell(Space* home, unsigned int a,
                        CpltSetView x, IntSet v) {
    ModEvent me = ME_CPLTSET_NONE;
    // try to exclude first
    if (a == (int) exclude) {
      if (v.size() == 1) {
        me = x.eq(home, v.min(), v.max());
      } else {
        IntSetRanges ir(v);
        me = x.eqI(home,ir);
      }
    } else {

      if (v.size() == 1) {
        me = x.nq(home, v.min(), v.max());
      } else {
        IntSetRanges ir(v);
        me = x.nqI(home, ir);
      }
    }
    return me;
  }

  template<bool exclude>
  forceinline Support::Symbol
  ValMin<exclude>::type(void) {
    return Support::Symbol("CpltSet::Branch::ValMin");
  }

  template <bool exclude>
  forceinline IntSet
  ValMax<exclude>::val(const Space*, CpltSetView x) const{
    IntSetRanges ir = IntSet::empty;
    DomValues<CpltSetView> dom(x);
    while (dom()) {
      IntSetRanges d(dom.val());
      ir = d;
      ++dom;
    }
    const IntSet is(ir);
    return is;
  }

  template <bool exclude>
  forceinline ModEvent
  ValMax<exclude>::tell(Space* home, unsigned int a,
                        CpltSetView x, IntSet v) {
    IntSetRanges ir(v);
    return (a == (int) exclude) ? x.eqI(home,ir) : x.nqI(home,ir);
  }

  template<bool exclude>
  forceinline Support::Symbol
  ValMax<exclude>::type(void) {
    return Support::Symbol("CpltSet::Branch::ValMax");
  }

  template <bool exclude>
  forceinline int
  ValMinUnknown<exclude>::val(const Space*, CpltSetView x) const {
    UnknownValues<CpltSetView> unknown(x);
    int v = unknown.val();
    return v;
  }

  template <bool exclude>
  forceinline ModEvent
  ValMinUnknown<exclude>::tell(Space* home, unsigned int a,
                               CpltSetView x, int v) {
    return (a == (int) exclude) ? x.include(home,v) : x.exclude(home,v);
  }

  template<bool exclude>
  forceinline Support::Symbol
  ValMinUnknown<exclude>::type(void) {
    return Support::Symbol("CpltSet::Branch::ValMinUnknown");
  }

  template <bool exclude>
  forceinline int
  ValMaxUnknown<exclude>::val(const Space*, CpltSetView x) const {
    int maxElem = 0;
    Set::UnknownRanges<CpltSetView> unknown(x);
    while (unknown()) {
      maxElem = unknown.max();
      ++unknown;
    }
    return maxElem;
  }

  template <bool exclude>
  forceinline ModEvent
  ValMaxUnknown<exclude>::tell(Space* home, unsigned int a,
                               CpltSetView x, int v) {
    return (a == (int) exclude) ? x.include(home,v) : x.exclude(home,v);
  }

  template<bool exclude>
  forceinline Support::Symbol
  ValMaxUnknown<exclude>::type(void) {
    return Support::Symbol("CpltSet::Branch::ValMaxUnknown");
  }

  template <class SelView>
  static void
  create(Space* home, ViewArray<CpltSetView>& x, CpltSetValBranch vals) {
    switch (vals) {
    case CPLTSET_VAL_MIN:
      (void) new (home) ViewValBranching<CpltSetView,const IntSet,SelView,ValMin<false> >(home,x);
      break;
    case CPLTSET_VAL_MIN_EX_FIRST:
      (void) new (home) ViewValBranching<CpltSetView,const IntSet,SelView,ValMin<true> >(home,x);
      break;
    case CPLTSET_VAL_MAX:
      (void) new (home) ViewValBranching<CpltSetView,const IntSet,SelView,ValMax<false> >(home,x);
      break;
    case CPLTSET_VAL_MAX_EX_FIRST:
      (void) new (home) ViewValBranching<CpltSetView,const IntSet,SelView,ValMax<true> >(home,x);
      break;
    case CPLTSET_VAL_MIN_UNKNOWN:
      (void) new (home) ViewValBranching<CpltSetView,int,SelView,ValMinUnknown<false> >(home,x);
      break;
    case CPLTSET_VAL_MIN_UNKNOWN_EX_FIRST:
      (void) new (home) ViewValBranching<CpltSetView,int,SelView,ValMinUnknown<true> >(home,x);
      break;
    case CPLTSET_VAL_MAX_UNKNOWN:
      (void) new (home) ViewValBranching<CpltSetView,int,SelView,ValMaxUnknown<false> >(home,x);
      break;
    case CPLTSET_VAL_MAX_UNKNOWN_EX_FIRST:
      (void) new (home) ViewValBranching<CpltSetView,int,SelView,ValMaxUnknown<true> >(home,x);
      break;
    default:
      throw UnknownBranching("CpltSet::branch");
    }
  }

}}}

// STATISTICS: cpltset-branch
