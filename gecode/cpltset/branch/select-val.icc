/*
 *  Main authors:
 *     Patrick Pekczynski <pekczynski@ps.uni-sb.de>
 *
 *  Copyright:
 *     Patrick Pekczynski, 2006
 *
 *  Last modified:
 *     $Date$ by $Author$
 *     $Revision$
 *
 *  This file is part of Gecode, the generic constraint
 *  development environment:
 *     http://www.gecode.org
 *
 *  See the file "LICENSE" for information on usage and
 *  redistribution of this file, and for a
 *     DISCLAIMER OF ALL WARRANTIES.
 *
 */

namespace Gecode { namespace CpltSet { namespace Branch {

  template <bool exclude>
  forceinline IntSet
  ValMin<exclude>::val(const Space*, CpltSetView x) {
//     std::cout << "************* val  *************\n";
//     DomValues<CpltSetView> domt(x);
//     while(domt()) {
//       std::cout << domt.val() << " ";
//       ++domt;
//     }
//     std::cout << "\n";
    DomValues<CpltSetView> dom(x);
//     std::cout << "returning: ";
//     std::cout << "dom.val() =" << dom.val() << "\n";
//     is = IntSetRanges(dom.val());
//     IntSetRanges t;
//     t = IntSetRanges(dom.val());
//     std::cout << "returning\n";
//     while(t()) {
//       std::cout << t.min() <<".." << t.max() << ",";
//       ++t;
//     }
//     std::cout << "\n";
    return dom.val();
  }

  template <bool exclude>
  forceinline ModEvent
  ValMin<exclude>::tell(Space* home, unsigned int a, CpltSetView x, IntSet v) {
//     std::cout << "telling on: " << x << "\n";
//     IntSetRanges ir(v);
//     while (ir()) {
//       std::cout << ir.min() << ".." << ir.max() << ", ";
//       ++ir;
//     }
    ModEvent me = ME_CPLTSET_NONE;
    // try to exclude first
    if (a == (int) exclude) {
      if (v.size() == 1) {
	// std::cout << "v = " << v << " " ;
	// std::cout << "tell eq..";
	me = x.eq(home, v.min(), v.max());
	// std::cout << "me = " << me << "DONE\n";
      } else {
	IntSetRanges ir(v);
	// std::cout << "v = " << v << " " ;
	// std::cout << "tell eq..";
	me = x.eqI(home,ir);
	// std::cout << "me = " << me << "DONE\n";
      }
    } else {

      if (v.size() == 1) {
	// std::cout << "v = " << v << " " ;
	// std::cout << "tell nq..";
	me = x.nq(home, v.min(), v.max());
	// std::cout << "me = " << me << "DONE\n";
      } else {
	IntSetRanges ir(v);
	// std::cout << "v = " << v << " " ;
	// std::cout << "tell nq..";
	me = x.nqI(home, ir);
	// std::cout << "me = " << me << "DONE\n";
      }
    }
    return me;
//     return (a == 0) ?  x.eq(home,ir) : x.nq(home,ir);
  }

  template<bool exclude>
  forceinline Reflection::Type*
  ValMin<exclude>::type(void) {
    return new Reflection::Type("bdd.ValMin");
  }

  template <bool exclude>
  forceinline IntSet
  ValMax<exclude>::val(const Space*, CpltSetView x) const{
    // std::cout << "max val \n";
    IntSetRanges ir = IntSet::empty;
    DomValues<CpltSetView> dom(x);
    while (dom()) {
      IntSetRanges d(dom.val());
      ir = d;
      ++dom;
    }
    const IntSet is(ir);
    return is;
  }

  template <bool exclude>
  forceinline ModEvent
  ValMax<exclude>::tell(Space* home, unsigned int a, CpltSetView x, IntSet v) {
    // std::cout << "telling max\n";
    IntSetRanges ir(v);
    return (a == (int) exclude) ? x.eqI(home,ir) : x.nqI(home,ir);
  }

  template<bool exclude>
  forceinline Reflection::Type*
  ValMax<exclude>::type(void) {
    return new Reflection::Type("bdd.ValMax");
  }

  template <bool exclude>
  forceinline int
  ValMinUnknown<exclude>::val(const Space*, CpltSetView x) const {
//     std::cout << "x range?" << x.manager()->leaf(x.bdd_domain()) << " assigned? " << x.assigned() << "\n";
    UnknownValues<CpltSetView> unknown(x);
    int v = unknown.val();
//     std::cout << "val min un select: " << v  << "\n";
    return v;
  }

  template <bool exclude>
  forceinline ModEvent
  ValMinUnknown<exclude>::tell(Space* home, unsigned int a, CpltSetView x, int v) {
    return (a == (int) exclude) ? x.include(home,v) : x.exclude(home,v);
  }

  template<bool exclude>
  forceinline Reflection::Type*
  ValMinUnknown<exclude>::type(void) {
    return new Reflection::Type("bdd.ValMinUnknown");
  }

  template <bool exclude>
  forceinline int
  ValMaxUnknown<exclude>::val(const Space*, CpltSetView x) const {
    int maxElem = 0;
    Set::UnknownRanges<CpltSetView> unknown(x);
    while (unknown()) {
      maxElem = unknown.max();
      ++unknown;
    }
    return maxElem;
  }

  template <bool exclude>
  forceinline ModEvent
  ValMaxUnknown<exclude>::tell(Space* home, unsigned int a, CpltSetView x, int v) {
    return (a == (int) exclude) ? x.include(home,v) : x.exclude(home,v);
  }

  template<bool exclude>
  forceinline Reflection::Type*
  ValMaxUnknown<exclude>::type(void) {
    return new Reflection::Type("bdd.ValMaxUnknown");
  }

//   template <class SelView>
//   static void
//   create(Space* home, ViewArray<CpltSetView>& x, CpltSetBvalSel vals) {
//     switch (vals) {
//     case SETBVAL_MAX:
//       (void) new (home) ViewValBranching<CpltSetView,int,SelView,ValMax>(home,x);
//       break;
//     default:
//       throw UnknownBranching("Int::branch");
//     }
//   }

  template <class SelView>
  static void
  create(Space* home, ViewArray<CpltSetView>& x, CpltSetBvalSel vals) {
    // std::cout << "create branch \n";
    switch (vals) {
    case CPLTSET_BVAL_MIN:
      (void) new (home) ViewValBranching<CpltSetView,const IntSet,SelView,ValMin<false> >(home,x);
      break;
    case CPLTSET_BVAL_MIN_EX_FIRST:
      (void) new (home) ViewValBranching<CpltSetView,const IntSet,SelView,ValMin<true> >(home,x);
      break;
    case CPLTSET_BVAL_MAX:
      (void) new (home) ViewValBranching<CpltSetView,const IntSet,SelView,ValMax<false> >(home,x);
      break;
    case CPLTSET_BVAL_MAX_EX_FIRST:
      (void) new (home) ViewValBranching<CpltSetView,const IntSet,SelView,ValMax<true> >(home,x);
      break;
    case CPLTSET_BVAL_MIN_UNKNOWN:
      (void) new (home) ViewValBranching<CpltSetView,int,SelView,ValMinUnknown<false> >(home,x);
      break;
    case CPLTSET_BVAL_MIN_UNKNOWN_EX_FIRST:
      (void) new (home) ViewValBranching<CpltSetView,int,SelView,ValMinUnknown<true> >(home,x);
      break;
    case CPLTSET_BVAL_MAX_UNKNOWN:
      (void) new (home) ViewValBranching<CpltSetView,int,SelView,ValMaxUnknown<false> >(home,x);
      break;
    case CPLTSET_BVAL_MAX_UNKNOWN_EX_FIRST:
      (void) new (home) ViewValBranching<CpltSetView,int,SelView,ValMaxUnknown<true> >(home,x);
      break;
//     default:
//       throw UnknownBranching("Int::branch");
    }
  }

}}}

// STATISTICS: bdd-branch
