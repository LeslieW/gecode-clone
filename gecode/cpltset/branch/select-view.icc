/*
 *  Main authors:
 *     Patrick Pekczynski <pekczynski@ps.uni-sb.de>
 *
 *  Copyright:
 *     Patrick Pekczynski, 2006
 *
 *  Last modified:
 *     $Date$ by $Author$
 *     $Revision$
 *
 *  This file is part of Gecode, the generic constraint
 *  development environment:
 *     http://www.gecode.org
 *
 *  See the file "LICENSE" for information on usage and
 *  redistribution of this file, and for a
 *     DISCLAIMER OF ALL WARRANTIES.
 *
 */

namespace Gecode { namespace CpltSet { namespace Branch {

  forceinline ViewSelStatus
  ByNone::init(const Space*, CpltSetView) {
    // std::cout << "init none\n";
    return VSS_COMMIT;
  }

  forceinline ViewSelStatus
  ByNone::select(const Space*, CpltSetView) {
    assert(false);
    // std::cout << "select none\n";
    return VSS_NONE;
  }

  forceinline Reflection::Type*
  ByNone::type(void) {
    return new Reflection::Type("bdd.ByNone");
  }

  forceinline ViewSelStatus
  ByMinCard::init(const Space*, CpltSetView x) { 
    minCard = x.unknownSize();
    return (minCard == 1) ? VSS_COMMIT : VSS_SELECT;
  }
  forceinline ViewSelStatus
  ByMinCard::select(const Space*, CpltSetView x) {
    unsigned int us = x.unknownSize();
    if (us < minCard) {
      minCard = us;
      return (minCard == 1) ? VSS_COMMIT : VSS_SELECT;
    }
    return VSS_NONE;
  }
  forceinline Reflection::Type*
  ByMinCard::type(void) {
    return new Reflection::Type("bdd.ByMinCard");
  }

  forceinline ViewSelStatus
  ByMaxCard::init(const Space*, CpltSetView x) { 
    maxCard = x.unknownSize();
    return VSS_SELECT;
  }
  forceinline ViewSelStatus
  ByMaxCard::select(const Space*, CpltSetView x) {
    unsigned int us = x.unknownSize();
    if (us > maxCard) {
      maxCard = us; return VSS_SELECT;
    }
    return VSS_NONE;
  }
  forceinline Reflection::Type*
  ByMaxCard::type(void) {
    return new Reflection::Type("bdd.ByMaxCard");
  }

  forceinline ViewSelStatus
  ByMinUnknown::init(const Space*, CpltSetView x) {
    Set::UnknownRanges<CpltSetView> unknown(x);
    minUnknown = unknown.min();
    return VSS_SELECT;
  }
  forceinline ViewSelStatus
  ByMinUnknown::select(const Space*, CpltSetView x) {
    Set::UnknownRanges<CpltSetView> unknown(x);
    int um = unknown.min();
    if (um < minUnknown) {
      minUnknown = um; return VSS_SELECT;
    }
    return VSS_NONE;
  }
  forceinline Reflection::Type*
  ByMinUnknown::type(void) {
    return new Reflection::Type("bdd.ByMinUnknown");
  }

  forceinline ViewSelStatus
  ByMaxUnknown::init (const Space*, CpltSetView x) {
    Set::UnknownRanges<CpltSetView> unknown(x);
    do {
      maxUnknown = unknown.max();
      ++unknown;
    } while(unknown());
    return VSS_SELECT;
  }
  forceinline ViewSelStatus
  ByMaxUnknown::select(const Space*, CpltSetView x) {
    Set::UnknownRanges<CpltSetView> unknown(x);
    int um = 0;
    assert(unknown());
    do {
      um = unknown.max();
      ++unknown;
    } while(unknown());
    if (um > maxUnknown) {
      maxUnknown = um; return VSS_SELECT;
    }
    return VSS_NONE;
  }
  forceinline Reflection::Type*
  ByMaxUnknown::type(void) {
    return new Reflection::Type("bdd.ByMaxUnknown");
  }

}}}

// STATISTICS: bdd-branch
