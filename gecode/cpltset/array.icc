/* -*- mode: C++; c-basic-offset: 2; indent-tabs-mode: nil -*- */
/*
 *  Main authors:
 *     Patrick Pekczynski <pekczynski@ps.uni-sb.de>
 *
 *  Copyright:
 *     Patrick Pekczynski, 2006
 *
 *  Last modified:
 *     $Date$ by $Author$
 *     $Revision$
 *
 *  This file is part of Gecode, the generic constraint
 *  development environment:
 *     http://www.gecode.org
 *
 *  Permission is hereby granted, free of charge, to any person obtaining
 *  a copy of this software and associated documentation files (the
 *  "Software"), to deal in the Software without restriction, including
 *  without limitation the rights to use, copy, modify, merge, publish,
 *  distribute, sublicense, and/or sell copies of the Software, and to
 *  permit persons to whom the Software is furnished to do so, subject to
 *  the following conditions:
 *
 *  The above copyright notice and this permission notice shall be
 *  included in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

namespace Gecode {

  /**
   * \defgroup TaskIntSetArgs Argument arrays
   * 
   * Argument arrays are just good enough for passing arguments
   * with automatic memory management.
   * \ingroup TaskIntSet
   */

  //@{
  /// Passing set variables
  typedef VarArgArray<CpltSetVar>  CpltSetVarArgs;
  //@}

  /**
   * \defgroup TaskIntSetVarArrays Variable arrays
   * 
   * Variable arrays can store variables. They are typically used
   * for storing the variables being part of a solution. However,
   * they can also be used for temporary purposes (even though
   * memory is not reclaimed until the space it is created for
   * is deleted).
   * \ingroup TaskIntSet
   */

  /**
   * \brief %Set variable array
   * \ingroup TaskIntSetVarArrays
   */
  class GECODE_CPLTSET_EXPORT CpltSetVarArray : public VarArray<CpltSetVar> {
  public:
    CpltSetVarArray(void);
    CpltSetVarArray(const CpltSetVarArray&);
    /// Create an uninitialized array of size \a n
    CpltSetVarArray(Space* home, BddMgr& m,int n);
    /// Create an uninitialized array of size \a n
    CpltSetVarArray(Space* home, BddMgr& m, int n, int a, int b);
    /**
     * \brief Create an array of size \a n.
     *
     * Each variable is initialized with the bounds and cardinality as
     * given by the arguments.
     */
    CpltSetVarArray(Space* home, BddMgr& m,
                    int n,int glbMin,int glbMax,int lubMin,int lubMax,
                    unsigned int minCard = 0,
                    unsigned int maxCard = Limits::Set::card_max);
    /**
     * \brief Create an array of size \a n.
     *
     * Each variable is initialized with the bounds and cardinality as
     * given by the arguments.
     */
    CpltSetVarArray(Space* home, BddMgr& m,
                    int n,const IntSet& glb, int lubMin, int lubMax,
                    unsigned int minCard = 0,
                    unsigned int maxCard = Limits::Set::card_max);
    /**
     * \brief Create an array of size \a n.
     *
     * Each variable is initialized with the bounds and cardinality as
     * given by the arguments.
     */
    CpltSetVarArray(Space* home, BddMgr& m,
                    int n,int glbMin,int glbMax,const IntSet& lub,
                    unsigned int minCard = 0,
                    unsigned int maxCard = Limits::Set::card_max);
    /**
     * \brief Create an array of size \a n.
     *
     * Each variable is initialized with the bounds and cardinality as
     * given by the arguments.
     */
    CpltSetVarArray(Space* home, BddMgr& m, int n,
                    const IntSet& glb,const IntSet& lub,
                    unsigned int minCard = 0,
                    unsigned int maxCard = Limits::Set::card_max);
  };
  
  /// Traits of CpltSetVarArray
  template <>
  class ArrayTraits<CpltSetVarArray> {
  public:
    typedef CpltSetVarArgs   storage_type;
    typedef CpltSetVar       value_type;
    typedef CpltSetVarArgs   args_type;
  };
  /// Traits of CpltSetVarArgs
  template <>
  class ArrayTraits<CpltSetVarArgs> {
  public:
    typedef CpltSetVarArgs storage_type;
    typedef CpltSetVar     value_type;
    typedef CpltSetVarArgs args_type;
  };

  /*
   * Implementation
   *
   */

  forceinline
  CpltSetVarArray::CpltSetVarArray(void) {}

  forceinline
  CpltSetVarArray::CpltSetVarArray(const CpltSetVarArray& a)
    : VarArray<CpltSetVar>(a) {}

}

// STATISTICS: cpltset-other
