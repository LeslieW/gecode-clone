/*
 *  CAUTION:
 *    This file has been automatically generated.
 *    Do not edit, edit the file "gecode/cpltset/var-imp.vis" instead.
 *
 *  This file contains generated code fragments which are 
 *  copyrighted as follows:
 *
 *  Main author:
 *     Christian Schulte <schulte@gecode.org>
 *
 *  Copyright:
 *     Christian Schulte, 2006
 *
 *  The generated code fragments are part of Gecode, the generic
 *  constraint development environment:
 *     http://www.gecode.org
 *
 *  See the file "LICENSE" for information on usage and
 *  redistribution of this file, and for a
 *     DISCLAIMER OF ALL WARRANTIES.
 *
 */


namespace Gecode { namespace Bdd {



  /*
   * The variable processor for CpltSetVarImpBase
   *
   */

  void
  CpltSetVarImpBase::Processor::process(Space* home, VarBase* _x) {
    // Process modified variables
    Gecode::Variable<VTI_CPLTSET,PC_CPLTSET_DOM,CpltSetMeDiff>* x = 
      static_cast<Gecode::Variable<VTI_CPLTSET,PC_CPLTSET_DOM,CpltSetMeDiff>*>(_x);
    do {
      switch (x->modevent()) {
      case ME_CPLTSET_VAL:
        x->process(home);
        break;
      case ME_CPLTSET_DOM:
        // Conditions: DOM 
        x->process(home,PC_CPLTSET_DOM,PC_CPLTSET_DOM,ME_CPLTSET_DOM);
        break;
      default: GECODE_NEVER;
      }
      x = x->next();
    } while (x != NULL);
  }

  void
  CpltSetVarImpBase::Processor::dispose(Space* home, VarBase* x) {
    CpltSetVarImp* _x = static_cast<CpltSetVarImp*>(x);
    while (_x != NULL) {
      _x->dispose(home);
      _x = static_cast<CpltSetVarImp*>(_x->nextDispose());
    }
  }
  
  CpltSetVarImpBase::Processor CpltSetVarImpBase::p;


}}

// STATISTICS: cpltset-var
