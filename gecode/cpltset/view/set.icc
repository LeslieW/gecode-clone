/* -*- mode: C++; c-basic-offset: 2; indent-tabs-mode: nil -*- */
/*
 *  Main authors:
 *     Guido Tack <tack@gecode.org>
 *
 *  Contributing authors:
 *     Christian Schulte <schulte@gecode.org>
 *
 *  Copyright:
 *     Guido Tack, 2004
 *     Christian Schulte, 2004
 *
 *  Last modified:
 *     $Date$ by $Author$
 *     $Revision$
 *
 *  This file is part of Gecode, the generic constraint
 *  development environment:
 *     http://www.gecode.org
 *
 *  Permission is hereby granted, free of charge, to any person obtaining
 *  a copy of this software and associated documentation files (the
 *  "Software"), to deal in the Software without restriction, including
 *  without limitation the rights to use, copy, modify, merge, publish,
 *  distribute, sublicense, and/or sell copies of the Software, and to
 *  permit persons to whom the Software is furnished to do so, subject to
 *  the following conditions:
 *
 *  The above copyright notice and this permission notice shall be
 *  included in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#ifdef GECODE_HAVE_SET_VARS

namespace Gecode { 

  namespace CpltSet {

    forceinline
    SetCpltSetView::SetCpltSetView(void) {}

    forceinline
    SetCpltSetView::SetCpltSetView(const CrdCpltSetView& x)
      : DerivedViewBase<CrdCpltSetView>(x) {}

    forceinline void
    SetCpltSetView::init(const CrdCpltSetView& x) { view = x; }

    forceinline PropCond
    SetCpltSetView::pc_settobdd(PropCond pc) { return PC_CPLTSET_DOM; }

    forceinline ModEvent
    SetCpltSetView::me_bddtoset(ModEvent me) {
      switch(me) {
      case ME_CPLTSET_FAILED: 
        return Gecode::Set::ME_SET_FAILED;
      case ME_CPLTSET_NONE: 
        return Gecode::Set::ME_SET_NONE;
      case ME_CPLTSET_VAL: 
        return Gecode::Set::ME_SET_VAL;
      case ME_CPLTSET_DOM: 
        return Gecode::Set::ME_SET_BB;
      default:
        return Gecode::Set::ME_SET_LUB;
      }
    }


    /*
     * Domain Tests
     *
     */

    forceinline bool
    SetCpltSetView::assigned(void) const { return view.assigned(); }

    forceinline bool
    SetCpltSetView::contains(int n) const { return view.contains(n); }

    forceinline bool
    SetCpltSetView::notContains(int n) const { return view.notContains(n); }

    /*
     * Set information
     *
     */

    forceinline unsigned int
    SetCpltSetView::glbSize(void) const { return view.glbSize(); }

    forceinline unsigned int
    SetCpltSetView::lubSize(void) const { return view.lubSize(); }

    forceinline unsigned int
    SetCpltSetView::unknownSize(void) const { return view.unknownSize(); }

    forceinline unsigned int
    SetCpltSetView::cardMin() const { return view.cardMin(); }

    forceinline unsigned int
    SetCpltSetView::cardMax() const { return view.cardMax(); }

    forceinline int
    SetCpltSetView::lubMin() const { return view.lubMin(); }

    forceinline int
    SetCpltSetView::lubMax() const { return view.lubMax(); }

    forceinline int
    SetCpltSetView::lubMinN(int n) const { return view.lubMinN(n); }

    forceinline int
    SetCpltSetView::lubMaxN(int n) const { return view.lubMaxN(n); }

    forceinline int
    SetCpltSetView::glbMin() const { return view.glbMin(); }

    forceinline int
    SetCpltSetView::glbMax() const { return view.glbMax(); }


    /*
     * Bdd information
     *
     */

    forceinline unsigned int
    SetCpltSetView::offset(void)  const { return view.offset(); }

    forceinline unsigned int
    SetCpltSetView::table_width(void)  const { return view.table_width(); }

    forceinline GecodeBdd
    SetCpltSetView::getbdd(int i)  const { return view.getbdd(i); }

    forceinline GecodeBdd
    SetCpltSetView::getnegbdd(int i)  const { return view.getnegbdd(i); }

    forceinline int
    SetCpltSetView::getlevel(int i) { return getlevel(i); }
    
    forceinline int
    SetCpltSetView::getvar(int i) { return getvar(i); }

    forceinline void
    SetCpltSetView::dom_and(GecodeBdd& d) { view.dom_and(d); }
    
    forceinline void
    SetCpltSetView::dom_or(GecodeBdd& d) { view.dom_or(d); }
    
    forceinline BMI*
    SetCpltSetView::manager(void) const { return view.manager(); }
    
    forceinline int
    SetCpltSetView::mgr_min(void)  const { return view.mgr_min(); }
    
    forceinline int
    SetCpltSetView::mgr_max(void)  const { return view.mgr_max(); }

    forceinline int
    SetCpltSetView::valididx(int v)  const { return view.valididx(v); }

    forceinline GecodeBdd 
    SetCpltSetView::bdd_domain(void) const { return view.bdd_domain(); }

    forceinline GecodeBdd 
    SetCpltSetView::bdd_remain(void) const { return view.bdd_remain(); }

    forceinline GecodeBdd 
    SetCpltSetView::bdd_bounds(void) const { return view.bdd_bounds(); }


    /*
     * Domain Tells
     *
     */

    forceinline ModEvent
    SetCpltSetView::cardinality(Space* home, int l, int u) {
      return me_bddtoset(view.cardinality(home, l, u));
    }
    
    forceinline ModEvent
    SetCpltSetView::cardMin(Space* home, int c) {
      return me_bddtoset(view.cardMin(home, c));
    }

    forceinline ModEvent
    SetCpltSetView::cardMax(Space* home, int c) {
      return me_bddtoset(view.cardMax(home, c));
    }

    forceinline ModEvent
    SetCpltSetView::include(Space* home, int c) { 
//       std::cout << "setbddview include: " << c << "\n";
      return me_bddtoset(view.include(home, c));
    }

    forceinline ModEvent
    SetCpltSetView::intersect(Space* home, int c) { 
      return me_bddtoset(view.intersect(home, c)); 
    }

    forceinline ModEvent
    SetCpltSetView::intersect(Space* home, int i, int j) { 
      return me_bddtoset(view.intersect(home, i, j)); 
    }

    forceinline ModEvent
    SetCpltSetView::exclude(Space* home, int c) { 
      return me_bddtoset(view.exclude(home, c));
    }

    forceinline ModEvent
    SetCpltSetView::include(Space* home, int j, int k) {
      return me_bddtoset(view.include(home, j, k));
    }

    forceinline ModEvent
    SetCpltSetView::exclude(Space* home, int j, int k) {
      return me_bddtoset(view.exclude(home, j, k));
    }

    template <class I> ModEvent
    SetCpltSetView::excludeI(Space* home, I& iter) {
      return me_bddtoset(view.excludeI(home, iter));
    }

    template <class I> ModEvent
    SetCpltSetView::includeI(Space* home, I& iter) {
      return me_bddtoset(view.includeI(home, iter));
    }

    template <class I> ModEvent
    SetCpltSetView::intersectI(Space* home, I& iter) {
      return me_bddtoset(view.intersectI(home, iter));
    }

    forceinline ModEvent
    SetCpltSetView::nq(Space* home, int a, int b) {
      return me_bddtoset(view.nq(home, a, b));
    }

    template <class I>
    forceinline ModEvent
    SetCpltSetView::nqI(Space* home, I& iter) {
      return me_bddtoset(view.nqI(home, iter));
    }
    
    forceinline ModEvent
    SetCpltSetView::eq(Space* home, int v) {
      return me_bddtoset(view.eq(home, v));
    }
    
    forceinline ModEvent
    SetCpltSetView::eq(Space* home, int a, int b) {
      return me_bddtoset(view.eq(home, a, b));
    }

    template <class I>
    forceinline ModEvent
    SetCpltSetView::eqI(Space* home, I& iter) {
      return me_bddtoset(view.eqI(home, iter));
    }

    forceinline ModEvent 
    SetCpltSetView::tell_formula(Space* home, GecodeBdd& d) {
      return me_bddtoset(view.tell_formula(home, d));
    }

    forceinline void
    SetCpltSetView::subscribe(Space* home, Propagator* p, PropCond pc,
                             bool process) {
      view.subscribe(home, p, pc_settobdd(pc), process);
    }
    forceinline void
    SetCpltSetView::cancel(Space* home, Propagator* p, PropCond pc) {
      view.cancel(home, p, pc_settobdd(pc));
    }

    forceinline ModEvent
    SetCpltSetView::pme(const Propagator* p) {     
      return me_bddtoset(CrdCpltSetView::pme(p));
    }

    forceinline PropModEvent
    SetCpltSetView::pme(ModEvent me) {
      return Gecode::Set::SetView::pme(me);
    }

    forceinline void
    SetCpltSetView::update(Space* home, bool share, SetCpltSetView& y) {
      view.update(home,share,y.view);
    }

    /*
            * Serialization
     *
     */
    forceinline Reflection::Arg*
    SetCpltSetView::spec(Space* home, Reflection::VarMap& m) {
      return view.spec(home, m);
    }
    forceinline Reflection::Type*
    SetCpltSetView::type(void) {
      return new Reflection::Type("bdd.SetCpltSetView");
    }

  }
  namespace Set {

    /*
     * Iterators
     *
     */

    /**
     * \brief %Range iterator for least upper bound of  set view
     * \ingroup TaskActorSetView
     */
    template <>
    class LubRanges<CpltSet::SetCpltSetView> : public LubRanges<CpltSet::CrdCpltSetView> {
    public:
      /// \name Constructors and initialization
      //@{
      /// Default constructor
      LubRanges(void);
      /// Initialize with ranges for view \a x
      LubRanges(const CpltSet::SetCpltSetView& x);
      /// Initialize with ranges for view \a x
      void init(const CpltSet::SetCpltSetView& x);
      //@}
    };

    forceinline
    LubRanges<CpltSet::SetCpltSetView>::LubRanges(void) {}

    forceinline
    LubRanges<CpltSet::SetCpltSetView>::LubRanges(const CpltSet::SetCpltSetView& s) :
      LubRanges<CpltSet::CrdCpltSetView>(s.base()) {}

    forceinline void
    LubRanges<CpltSet::SetCpltSetView>::init(const CpltSet::SetCpltSetView& s) {
      LubRanges<CpltSet::CrdCpltSetView>::init(s.base());
    }

  }
  namespace CpltSet {
    /**
     * \brief %Value iterator for least upper bound of  set view
     * \ingroup TaskActorSetView
     */
    template <>
    class LubValues<SetCpltSetView> : 
      public Iter::Ranges::ToValues<Set::LubRanges<SetCpltSetView> > {
    public:
      /// \name Constructors and initialization
      //@{
      /// Default constructor
      LubValues(void);
      /// Initialize with ranges for view \a x
      LubValues(const SetCpltSetView& x);
      /// Initialize with ranges for view \a x
      void init(const SetCpltSetView& x);
      //@}
    };

    forceinline
    LubValues<SetCpltSetView>::LubValues(void) {}

    forceinline
    LubValues<SetCpltSetView>::LubValues(const SetCpltSetView& s) {
      Set::LubRanges<SetCpltSetView> lub(s);
      Iter::Ranges::ToValues<Set::LubRanges<SetCpltSetView> >::init(lub);
    }

    forceinline void
    LubValues<SetCpltSetView>::init(const SetCpltSetView& s) {
      Set::LubRanges<SetCpltSetView> lub(s);
      Iter::Ranges::ToValues<Set::LubRanges<SetCpltSetView> >::init(lub);
    }
  }
  namespace Set {
    /**
     * \brief %Range iterator for greatest lower bound of  set view
     * \ingroup TaskActorSetView
     */
    template <>
    class GlbRanges<CpltSet::SetCpltSetView> : public GlbRanges<CpltSet::CrdCpltSetView> {
    public:
      /// \name Constructors and initialization
      //@{
      /// Default constructor
      GlbRanges(void);
      /// Initialize with ranges for view \a x
      GlbRanges(const CpltSet::SetCpltSetView& x);
      /// Initialize with ranges for view \a x
      void init(const CpltSet::SetCpltSetView& x);
      //@}
    };

    forceinline
    GlbRanges<CpltSet::SetCpltSetView>::GlbRanges(void) {}

    forceinline
    GlbRanges<CpltSet::SetCpltSetView>::GlbRanges(const CpltSet::SetCpltSetView& s) :
      GlbRanges<CpltSet::CrdCpltSetView>(s.base()) {}

    forceinline void
    GlbRanges<CpltSet::SetCpltSetView>::init(const CpltSet::SetCpltSetView& s) {
      GlbRanges<CpltSet::CrdCpltSetView>::init(s.base());
    }

    template <>
    class UnknownRanges<CpltSet::SetCpltSetView> : 
      public UnknownRanges<CpltSet::CrdCpltSetView> {
    public:
      /// \name Constructors and initialization
      //@{
      /// Default constructor
      UnknownRanges(void);
      /// Initialize with ranges for view \a x
      UnknownRanges(const CpltSet::SetCpltSetView& x);
      /// Initialize with ranges for view \a x
      void init(const CpltSet::SetCpltSetView& x);
      //@}
    };

    forceinline
    UnknownRanges<CpltSet::SetCpltSetView>::UnknownRanges(void) {}

    forceinline
    UnknownRanges<CpltSet::SetCpltSetView>::UnknownRanges(const CpltSet::SetCpltSetView& s) :
      UnknownRanges<CpltSet::CrdCpltSetView>(s.base()) {}

    forceinline void
    UnknownRanges<CpltSet::SetCpltSetView>::init(const CpltSet::SetCpltSetView& s) {
      UnknownRanges<CpltSet::CrdCpltSetView>::init(s.base());
    }

  }


  /*
   * Testing
   *
   */
  forceinline bool
  same(const CpltSet::SetCpltSetView& x, const CpltSet::SetCpltSetView& y) {
    return same(x.base(),y.base());
  }
  forceinline bool
  before(const CpltSet::SetCpltSetView& x, const CpltSet::SetCpltSetView& y) {
    return before(x.base(),y.base());
  }


}
#endif 

// STATISTICS: bdd-var
