/* -*- mode: C++; c-basic-offset: 2; indent-tabs-mode: nil -*- */
/*
 *  Main authors:
 *     Patrick Pekczynski <pekczynski@ps.uni-sb.de>
 *
 *  Copyright:
 *     Patrick Pekczynski, 2006
 *
 *  Last modified:
 *     $Date$ by $Author$
 *     $Revision$
 *
 *  This file is part of Gecode, the var->generic constraint
 *  development environment:
 *     http://www.gecode.org
 *
 *  Permission is hereby granted, free of charge, to any person obtaining
 *  a copy of this software and associated documentation files (the
 *  "Software"), to deal in the Software without restriction, including
 *  without limitation the rights to use, copy, modify, merge, publish,
 *  distribute, sublicense, and/or sell copies of the Software, and to
 *  permit persons to whom the Software is furnished to do so, subject to
 *  the following conditions:
 *
 *  The above copyright notice and this permission notice shall be
 *  included in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */


namespace Gecode { namespace CpltSet {

  /*
   * Constructors and access
   *
   */

  forceinline
  BndCpltSetView::BndCpltSetView(void) {}

  forceinline
  BndCpltSetView::BndCpltSetView(const CpltSetView& x) 
    : DerivedViewBase<CpltSetView>(x) {}

  forceinline void
  BndCpltSetView::init(const CpltSetView& x) { view = x; }

  /* 
   * Set information
   *
   */
  
  forceinline unsigned int
  BndCpltSetView::glbSize(void) const { return view.glbSize(); }

  forceinline unsigned int
  BndCpltSetView::lubSize(void) const { return view.lubSize(); }

  forceinline unsigned int
  BndCpltSetView::unknownSize(void) const { return view.unknownSize(); }

  forceinline unsigned int
  BndCpltSetView::cardMin(void) const { return view.cardMin(); }

  forceinline unsigned int
  BndCpltSetView::cardMax(void) const { return view.cardMax(); }

  forceinline int
  BndCpltSetView::lubMin(void) const { return view.lubMin(); }

  forceinline int
  BndCpltSetView::lubMax(void) const { return view.lubMax(); }

  forceinline int
  BndCpltSetView::lubMinN(int n) const { return view.lubMinN(n); }

  forceinline int
  BndCpltSetView::lubMaxN(int n) const { return view.lubMaxN(n); }

  forceinline int
  BndCpltSetView::glbMin(void) const { return view.glbMin(); }

  forceinline int 
  BndCpltSetView::glbMax(void) const { return view.glbMax(); }

  /*
   * Bdd information
   *
   */
  
  forceinline unsigned int 
  BndCpltSetView::offset(void) const { return view.offset(); }

  forceinline unsigned int 
  BndCpltSetView::table_width(void) const { return view.table_width(); }

  forceinline int 
  BndCpltSetView::size(void) const { return view.size(); }

  forceinline GecodeBdd
  BndCpltSetView::getbdd(int i) const { return view.getbdd(i); }

  forceinline GecodeBdd
  BndCpltSetView::getnegbdd(int i) const { return view.getnegbdd(i); }

  forceinline int 
  BndCpltSetView::getlevel(int i) { return view.getlevel(i); }

  forceinline int 
  BndCpltSetView::getvar(int i) { return view.getvar(i); }

  forceinline void
  BndCpltSetView::dom_and(GecodeBdd& d) { view.dom_and(d); }

  forceinline void
  BndCpltSetView::dom_or(GecodeBdd& d) { view.dom_or(d); }

  forceinline BMI*
  BndCpltSetView::manager(void) const { return view.manager(); }

  forceinline int
  BndCpltSetView::mgr_min(void) const { return view.mgr_min(); };

  forceinline int
  BndCpltSetView::valididx(int v)  const { return view.valididx(v); }



  forceinline int
  BndCpltSetView::mgr_max(void) const { return view.mgr_max(); };

  forceinline GecodeBdd 
  BndCpltSetView::bdd_domain(void) const { return view.bdd_domain(); }

  /*
   * Domain tests
   *
   */

  forceinline bool
  BndCpltSetView::assigned(void) const { return view.assigned(); }

  forceinline bool
  BndCpltSetView::contains(int i) const { return view.contains(i); }

  forceinline bool
  BndCpltSetView::notContains(int i) const { return view.notContains(i); }

  /*
   * Tells
   *
   */

  forceinline ModEvent 
  BndCpltSetView::cardinality(Space* home, unsigned int l, unsigned int u) {
    return view.cardinality(home, l, u);
  }

  forceinline ModEvent
  BndCpltSetView::cardMin(Space* home, unsigned int m) { 
    return view.cardMin(home, m); 
  }

  forceinline ModEvent
  BndCpltSetView::cardMax(Space* home, unsigned int m) { 
    return view.cardMax(home, m); 
  }

  forceinline ModEvent 
  BndCpltSetView::include(Space* home, int i, int j) { 
    return view.include(home, i, j); 
  }

  forceinline ModEvent 
  BndCpltSetView::include(Space* home, int i) { return include(home, i, i); }

  forceinline ModEvent 
  BndCpltSetView::exclude(Space* home, int i, int j) { 
    return view.exclude(home, i, j); 
  }

  forceinline ModEvent 
  BndCpltSetView::exclude(Space* home, int i) { return exclude(home, i, i); }

  forceinline ModEvent
  BndCpltSetView::nq(Space* home, int v) { return view.nq(home, v, v); }

  forceinline ModEvent
  BndCpltSetView::nq(Space* home, int a, int b) {
    if (b < view.mgr_min() || a > view.mgr_max()) {
      return ME_CPLTSET_NONE;
    }
    Iter::Ranges::Singleton m(a, b);
    GecodeBdd ass = !(view.variable()->gen_assignment(m));
    return tell_formula(home, ass);
  }

  forceinline ModEvent
  BndCpltSetView::eq(Space* home, int v) { return eq(home, v, v); }

  forceinline ModEvent
  BndCpltSetView::eq(Space* home, int a, int b) {
    if (b < view.mgr_min() || a > view.mgr_max()) {
      return ME_CPLTSET_FAILED;
    }
    Iter::Ranges::Singleton m(a, b);
    GecodeBdd ass = view.variable()->gen_assignment(m);
    return tell_formula(home, ass);
  }

  forceinline ModEvent 
  BndCpltSetView::tell_formula(Space* home, GecodeBdd& d) {
    BMI* mgr = manager();
    d &= bdd_domain();
    
    GecodeBdd beta  = BDDTOP;
    conv_hull(mgr, d, beta);
    return view.tell_formula(home, beta);
  }

  forceinline ModEvent
  BndCpltSetView::intersect(Space* home, int i, int j) {
    return view.intersect(home, i, j);
  }

  forceinline ModEvent
  BndCpltSetView::intersect(Space* home, int i) { return intersect(home, i, i); }

  template <class I>
  forceinline ModEvent
  BndCpltSetView::excludeI(Space* home, I& i) { return view.excludeI(home, i); }

  template <class I>
  forceinline ModEvent
  BndCpltSetView::includeI(Space* home, I& i) { return view.includeI(home, i); }

  template <class I>
  forceinline ModEvent
  BndCpltSetView::intersectI(Space* home, I& i) { return view.intersectI(home, i); }

  template <class I>
  forceinline ModEvent
  BndCpltSetView::eqI(Space* home, I& i) {
    int mi = view.mgr_min();
    int ma = view.mgr_max();
    if (i()) {
      if (i.min() < mi || i.min() > ma) {
        return ME_CPLTSET_FAILED;
      }
    }
    GecodeBdd ass = view.variable()->gen_assignment(i);
    return tell_formula(home, ass);
  }

  template <class I>
  forceinline ModEvent
  BndCpltSetView::nqI(Space* home, I& i) {
    GecodeBdd ass = !(view.variable()->gen_assignment(i));
    return tell_formula(home, ass);
  }

  /*
   * Dependencies
   *
   */

  forceinline void
  BndCpltSetView::subscribe(Space* home, Propagator* p, PropCond pc,
                            bool process) {
    view.subscribe(home, p, pc, process);
  }

  forceinline void
  BndCpltSetView::cancel(Space* home, Propagator* p, PropCond pc) {
    view.cancel(home, p, pc);
  }
  
  /*
   * Propagator Modification Events
   *
   */

  forceinline ModEvent
  BndCpltSetView::pme(const Propagator* p) { return CpltSetView::pme(p); }
  
  forceinline ModEvent
  BndCpltSetView::pme(ModEvent me) { return CpltSetView::pme(me); }

  /*
   * Cloning
   *
   */

  forceinline void
  BndCpltSetView::update(Space* home, bool share, BndCpltSetView& y) {
    view.update(home, share, y.view);
  }

  /*
   * Serialization
   *
   */
  forceinline Reflection::Arg*
  BndCpltSetView::spec(Space* home, Reflection::VarMap& m) {
    return view.spec(home, m);
  }
  forceinline Reflection::Type*
  BndCpltSetView::type(void) {
    return new Reflection::Type("bdd.BndCpltSetView");
  }

  forceinline void 
  BndCpltSetView::viewdot(void) const {
    return view.viewdot();
  }

  /// Iterator for the values of a BndCpltSetView
  template <>
  class DomValues<BndCpltSetView> : public DomValues<CpltSetVarImp*> {
  public:
    /// \name Constructors and initialization
    //@{
    /// Default constructor
    DomValues(void);
    /// Initialize with ranges for variable implementation \a x
    DomValues(const BndCpltSetView& x);
    /// Initialize with ranges for variable implementation \a x
    void init(const BndCpltSetView& x);
    //@}    
  };

  forceinline
  DomValues<BndCpltSetView>::DomValues(void) {}

  forceinline
  DomValues<BndCpltSetView>::DomValues(const BndCpltSetView& x) 
    : DomValues<CpltSetVarImp*>(x.base().variable()) {}

  forceinline void
  DomValues<BndCpltSetView>::init(const BndCpltSetView& x) {
    DomValues<CpltSetVarImp*>::init(x.base().variable());
  }

  /// Iterator for the values in the greatest lower bound of a BndCpltSetView
  template <>
  class GlbValues<BndCpltSetView> : public GlbValues<CpltSetVarImp*> {
  public:
    /// \name Constructors and initialization
    //@{
    /// Default constructor
    GlbValues(void);
    /// Initialize with ranges for variable implementation \a x
    GlbValues(const BndCpltSetView& x);
    /// Initialize with ranges for variable implementation \a x
    void init(const BndCpltSetView& x);
    //@}    
  };

  forceinline
  GlbValues<BndCpltSetView>::GlbValues(void) {}

  forceinline
  GlbValues<BndCpltSetView>::GlbValues(const BndCpltSetView& x) 
    : GlbValues<CpltSetVarImp*>(x.base().variable()) {}

  forceinline void
  GlbValues<BndCpltSetView>::init(const BndCpltSetView& x) {
    GlbValues<CpltSetVarImp*>::init(x.base().variable());
  }

}
  namespace Set {
  template <>
  class GlbRanges<CpltSet::BndCpltSetView> : public GlbRanges<CpltSet::CpltSetVarImp*> {
  public:
    /// \name Constructors and initialization
    //@{
    /// Default constructor
    GlbRanges(void);
    /// Initialize with ranges for variable implementation \a x
    GlbRanges(const CpltSet::BndCpltSetView& x);
    /// Initialize with ranges for variable implementation \a x
    void init(const CpltSet::BndCpltSetView& x);
    //@}    
  };

  forceinline
  GlbRanges<CpltSet::BndCpltSetView>::GlbRanges(void) {}

  forceinline
  GlbRanges<CpltSet::BndCpltSetView>::GlbRanges(const CpltSet::BndCpltSetView& x) 
    : GlbRanges<CpltSet::CpltSetVarImp*>(x.base().variable()) {}

  forceinline void
  GlbRanges<CpltSet::BndCpltSetView>::init(const CpltSet::BndCpltSetView& x) {
    GlbRanges<CpltSet::CpltSetVarImp*>::init(x.base().variable());
  }

  template <>
  class LubRanges<CpltSet::BndCpltSetView> : public LubRanges<CpltSet::CpltSetVarImp*> {
  public:
    /// \name Constructors and initialization
    //@{
    /// Default constructor
    LubRanges(void);
    /// Initialize with ranges for variable implementation \a x
    LubRanges(const CpltSet::BndCpltSetView& x);
    /// Initialize with ranges for variable implementation \a x
    void init(const CpltSet::BndCpltSetView& x);
    //@}    
  };

  forceinline
  LubRanges<CpltSet::BndCpltSetView>::LubRanges(void) {}

  forceinline
  LubRanges<CpltSet::BndCpltSetView>::LubRanges(const CpltSet::BndCpltSetView& x) 
    : LubRanges<CpltSet::CpltSetVarImp*>(x.base().variable()) {}

  forceinline void
  LubRanges<CpltSet::BndCpltSetView>::init(const CpltSet::BndCpltSetView& x) {
    LubRanges<CpltSet::CpltSetVarImp*>::init(x.base().variable());
  }

  }
  namespace CpltSet {

  /// Iterator for the unknown values of a BndCpltSetView
  template <>
  class UnknownValues<BndCpltSetView> : public UnknownValues<CpltSetVarImp*> {
  public:
    /// \name Constructors and initialization
    //@{
    /// Default constructor
    UnknownValues(void);
    /// Initialize with ranges for variable implementation \a x
    UnknownValues(const BndCpltSetView& x);
    /// Initialize with ranges for variable implementation \a x
    void init(const BndCpltSetView& x);
    //@}    
  };

  forceinline
  UnknownValues<BndCpltSetView>::UnknownValues(void) {}

  forceinline
  UnknownValues<BndCpltSetView>::UnknownValues(const BndCpltSetView& x) 
    : UnknownValues<CpltSetVarImp*>(x.base().variable()) {}

  forceinline void
  UnknownValues<BndCpltSetView>::init(const BndCpltSetView& x) {
    UnknownValues<CpltSetVarImp*>::init(x.base().variable());
  }
  }
  namespace Set {
  template <>
  class UnknownRanges<CpltSet::BndCpltSetView> : public UnknownRanges<CpltSet::CpltSetVarImp*> {
  public:
    /// \name Constructors and initialization
    //@{
    /// Default constructor
    UnknownRanges(void);
    /// Initialize with ranges for variable implementation \a x
    UnknownRanges(const CpltSet::BndCpltSetView& x);
    /// Initialize with ranges for variable implementation \a x
    void init(const CpltSet::BndCpltSetView& x);
    //@}    
  };

  forceinline
  UnknownRanges<CpltSet::BndCpltSetView>::UnknownRanges(void) {}

  forceinline
  UnknownRanges<CpltSet::BndCpltSetView>::UnknownRanges(const CpltSet::BndCpltSetView& x) 
    : UnknownRanges<CpltSet::CpltSetVarImp*>(x.base().variable()) {}

  forceinline void
  UnknownRanges<CpltSet::BndCpltSetView>::init(const CpltSet::BndCpltSetView& x) {
    UnknownRanges<CpltSet::CpltSetVarImp*>::init(x.base().variable());
  }

  }
  /*
   * Testing
   *
   */
  forceinline bool
  same(const CpltSet::BndCpltSetView& x, const CpltSet::BndCpltSetView& y) {
    return same(x.base(),y.base());
  }

  forceinline bool
  before(const CpltSet::BndCpltSetView& x, const CpltSet::BndCpltSetView& y) {
    return before(x.base(),y.base());
  }

}


// STATISTICS: bdd-var

