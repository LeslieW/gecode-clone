/* -*- mode: C++; c-basic-offset: 2; indent-tabs-mode: nil -*- */
/*
 *  Main authors:
 *     Patrick Pekczynski <pekczynski@ps.uni-sb.de>
 *
 *  Copyright:
 *     Patrick Pekczynski, 2006
 *
 *  Last modified:
 *     $Date$ by $Author$
 *     $Revision$
 *
 *  This file is part of Gecode, the generic constraint
 *  development environment:
 *     http://www.gecode.org
 *
 *  Permission is hereby granted, free of charge, to any person obtaining
 *  a copy of this software and associated documentation files (the
 *  "Software"), to deal in the Software without restriction, including
 *  without limitation the rights to use, copy, modify, merge, publish,
 *  distribute, sublicense, and/or sell copies of the Software, and to
 *  permit persons to whom the Software is furnished to do so, subject to
 *  the following conditions:
 *
 *  The above copyright notice and this permission notice shall be
 *  included in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

namespace Gecode { namespace CpltSet {

  template <class View0, class View1>
  forceinline
  Bin<View0, View1>::Bin(Space* home, View0& x, View1& y, GecodeBdd& d0)
    : MixBinaryPropagator<View0, PC_CPLTSET_DOM, View1, PC_CPLTSET_DOM>(home, x, y), 
      d(d0) {
    MixBinaryPropagator<View0, PC_CPLTSET_DOM, View1, PC_CPLTSET_DOM>::force(home);
  }

  template <class View0, class View1>
  forceinline
  Bin<View0, View1>::Bin(Space* home, bool share, Bin& p)
    : MixBinaryPropagator<View0, PC_CPLTSET_DOM, View1, PC_CPLTSET_DOM>(home, share, p), 
      d(p.d) {}

  template <class View0, class View1>
  forceinline ExecStatus
  Bin<View0, View1>::post(Space* home, View0& x, View1& y, GecodeBdd& d0) {
    (void) new (home) Bin(home, x, y, d0);
    return ES_OK;
  }

  template <class View0, class View1>
  const char*
  Bin<View0, View1>::name(void) const {
    return "bdd.bddprop.Bin";
  }

  template <class View0, class View1>
  forceinline Actor*
  Bin<View0, View1>::copy(Space* home, bool share) {
    return new (home) Bin(home, share, *this);
  }
  
  template <class View0, class View1>
  forceinline ExecStatus 
  Bin<View0, View1>::propagate(Space* home) {

    BMI* mgr   = x0.manager();
    bool assigned = true;
    
    std::cout << "bin inhom propagate\n";
    {
      std::cout << "tell x0\n";
      GecodeBdd dom = x1.bdd_domain();
      int s = x1.offset();
      int w = s + x1.table_width() - 1;
      mgr->existquant(dom, d, s, w);
      std::cout << "check x0 ...";
      GECODE_ME_CHECK(x0.tell_formula(home, dom));
      std::cout << "DONE\n";
    }
    {
      std::cout << "tell x1\n";
      GecodeBdd dom = x0.bdd_domain();
      int s = x0.offset();
      int w = s + x0.table_width() - 1;
      mgr->existquant(dom, d, s, w);
      std::cout << "check x1...";
      GECODE_ME_CHECK(x1.tell_formula(home, dom));
      std::cout << "DONE";
    }

    assigned = true;
    assigned &= (x0.assigned() && x1.assigned());

    if (assigned) {
      return ES_SUBSUMED(this, home);
    }

    return ES_FIX;
  }

  template <class View0, class View1>
  size_t
  Bin<View0, View1>::dispose(Space* home) {
    MixBinaryPropagator<View0, PC_CPLTSET_DOM, View1, PC_CPLTSET_DOM>::unforce(home);
    if (!home->failed()) {
      x0.cancel(home, this, PC_CPLTSET_DOM);
      x1.cancel(home, this, PC_CPLTSET_DOM);
    }
    BMI* mgr = x0.manager();
    mgr->dispose(d);
    MixBinaryPropagator<View0, PC_CPLTSET_DOM, View1, PC_CPLTSET_DOM>::dispose(home);
    return sizeof(*this);
  }

}}

// STATISTICS: bdd-prop
