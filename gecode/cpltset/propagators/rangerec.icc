/* -*- mode: C++; c-basic-offset: 2; indent-tabs-mode: nil -*- */
/*
 *  Main authors:
 *     Patrick Pekczynski <pekczynski@ps.uni-sb.de>
 *
 *  Copyright:
 *     Patrick Pekczynski, 2006
 *
 *  Last modified:
 *     $Date$ by $Author$
 *     $Revision$
 *
 *  This file is part of Gecode, the generic constraint
 *  development environment:
 *     http://www.gecode.org
 *
 *  Permission is hereby granted, free of charge, to any person obtaining
 *  a copy of this software and associated documentation files (the
 *  "Software"), to deal in the Software without restriction, including
 *  without limitation the rights to use, copy, modify, merge, publish,
 *  distribute, sublicense, and/or sell copies of the Software, and to
 *  permit persons to whom the Software is furnished to do so, subject to
 *  the following conditions:
 *
 *  The above copyright notice and this permission notice shall be
 *  included in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

namespace Gecode { namespace CpltSet {

  template <class View0, class View1>
  ExecStatus
  Range<View0, View1>::divide_conquer(Space* home, BMI* m, GecodeBdd& p, 
                                      int l, int r, int ypos, int zpos) {
    if (l == r) {
      ModEvent me = ME_CPLTSET_NONE;
      if (l == ypos) {
        me  = y.tell_formula(home, p);
      } else {
        if (l == zpos) {
          me = z.tell_formula(home, p);
        } else {
          me = x[l].tell_formula(home, p);
        }
      }
      if (me_failed(me)) {
        return ES_FAILED;
      }
      return ES_OK;
    }
    int h = (r + l) / 2;

    // computing psi without recursion
    GecodeBdd left = p;
    for (int i = r; i >= h + 1; i--) {
      if (i == zpos) {
        quantify(left, z);
      } else {
        if (i == ypos) {
          quantify(left, y);
        } else {
          quantify(left, x[i]);
        }
      }
    }
   
    ExecStatus es = ES_OK;
    GECODE_ES_CHECK(es = divide_conquer(home, m, left, l, h, ypos, zpos));

    GecodeBdd right = p;
    for (int i = h; i >= l; i-- ) {
      if (i == zpos) {
        quantify(right, z);
      } else {
        if (i == ypos) {
          quantify(right, y);
        } else {
          quantify(right, x[i]);
        }
      }
    }

    GECODE_ES_CHECK(es = divide_conquer(home, m, right, h + 1, r , ypos, zpos));
    return es;
  }

  template <class View0, class View1>
  ExecStatus
  RangeTwice<View0, View1>::divide_conquer(Space* home, BMI* m, GecodeBdd& p, 
                                           int l, int r, int ypos) {
    std::cout << "twice div conqu: " << l << " " << r << " " << ypos << "\n";
    if (l == r) {
      ModEvent me = ME_CPLTSET_NONE;
      if (l >= ypos) {
        me  = y[l - ypos].tell_formula(home, p);
      } else {
        me = x[l].tell_formula(home, p);
      }
      if (me_failed(me)) {
        return ES_FAILED;
      }
      return ES_OK;
    }
    int h = (r + l) / 2;

    // computing psi without recursion
    GecodeBdd left = p;
    for (int i = r; i >= h + 1; i--) {
      if (i >= ypos) {
        quantify(left, y[i - ypos]);
      } else {
        quantify(left, x[i]);
      }
    }
   
    ExecStatus es = ES_OK;
    GECODE_ES_CHECK(es = divide_conquer(home, m, left, l, h, ypos));

    GecodeBdd right = p;
    for (int i = h; i >= l; i-- ) {
      if (i >= ypos) {
        quantify(right, y[i - ypos]);
      } else {
        quantify(right, x[i]);
      }
    }

    GECODE_ES_CHECK(es = divide_conquer(home, m, right, h + 1, r , ypos));
    return es;
  }
}}

// STATISTICS: bdd-prop
