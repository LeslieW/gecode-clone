/* -*- mode: C++; c-basic-offset: 2; indent-tabs-mode: nil -*- */
/*
 *  Main authors:
 *     Patrick Pekczynski <pekczynski@ps.uni-sb.de>
 *
 *  Copyright:
 *     Patrick Pekczynski, 2006
 *
 *  Last modified:
 *     $Date$ by $Author$
 *     $Revision$
 *
 *  This file is part of Gecode, the generic constraint
 *  development environment:
 *     http://www.gecode.org
 *
 *  Permission is hereby granted, free of charge, to any person obtaining
 *  a copy of this software and associated documentation files (the
 *  "Software"), to deal in the Software without restriction, including
 *  without limitation the rights to use, copy, modify, merge, publish,
 *  distribute, sublicense, and/or sell copies of the Software, and to
 *  permit persons to whom the Software is furnished to do so, subject to
 *  the following conditions:
 *
 *  The above copyright notice and this permission notice shall be
 *  included in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

namespace Gecode { namespace CpltSet {

  template <class View>
  ExecStatus
  NaryBddProp<View>::divide_conquer(Space* home, BMI* m, 
                                    bdd& p, int l, int r) {
    if (l == r) {
      GECODE_ME_CHECK(x[l].tell_formula(home, p));
      return ES_OK;
    }

    int h = (r + l) / 2;

    // computing psi without recursion
    bdd left = p;
    for (int i = r; i >= h + 1; i--) {
      quantify(left, x[i]);
    }
   
    ExecStatus es = ES_OK;
    GECODE_ES_CHECK(es = divide_conquer(home, m, left, l, h));

    bdd right = p;
    for (int i = h; i >= l; i-- ) {
      quantify(right, x[i]);
    }

    GECODE_ES_CHECK(es = divide_conquer(home, m, right, h + 1, r));
    return es;
  }

//   template <class View>
//   ExecStatus
//   NaryBddProp<View>::divide_conquer_conv(Space* home, BMI* m, 
//                                          bdd& p, int l, int r) {
//     // std::cout << "divide_conquer_conv LR[" << l<< "," << r << "]\n";
//     // m->bdd2dot(p);
//     if (l == r) {
//       bdd dom_p = x[l].bdd_domain() & p;
//       bdd conv_p = conv_hull(m, dom_p);
// //       std::cout << "conjunct\n";
// //       m->bdd2dot(dom_p);
// //       std::cout << "conv hull\n";
// //       if (x[l].offset() == 0) {
// //         // display cardinality error in convex hull
// //         std::cout << "conjunct\n";
// //         m->bdd2dot(dom_p);
// //         std::cout << "conv hull\n";
// //         m->bdd2dot(conv_p);
// //         std::cout << "telling on ["<<x[l].offset() << "," << x[l].table_width() <<"] ";
      
// //       }

//       ModEvent me = x[l].tell_formula(home, conv_p);
//       if (me_failed(me)) {
//         return ES_FAILED;
//       }
//       return ES_OK;
//     }
//     int h = (r + l) / 2;

//     bdd left = p;
//     // std::cout << "quant left: ";
//     for (int i = r; i >= h + 1; i--) {
//       // std::cout << i << ",";
//       bdd dom = x[i].bdd_domain();
//       int s = x[i].offset();
//       int w = s + x[i].table_width() - 1;
//       m->existquant(dom, left, s, w);
//       left = dom;
//     }
//     // std::cout << "\n";

//     ExecStatus es = ES_OK;
//     es = divide_conquer_conv(home, m, left, l, h);
//     if (es == ES_FAILED) {
//       return es;
//     }

//     // std::cout << "quant right: ";
//     bdd right = p;
//     for (int i = h; i >= l; i-- ) {
//       // std::cout << i << ",";
//       bdd dom = x[i].bdd_domain();
//       int s = x[i].offset();
//       int w = s + x[i].table_width() - 1;
//       m->existquant(dom, right, s, w);
//       right = dom;
//     }
//     // std::cout <<  "\n";
//     es = divide_conquer_conv(home, m, right, h + 1, r);
//     return es;
//   }

  // template <class View>
//   ExecStatus
//   NaryBddProp<View>::divide_conquer_split(Space* home, BMI* m, bdd& p, int l, int r) {
//     // std::cout << "dc: " << l <<" " << r << "\n";
//     if (l == r) {
//       // std::cout << "telling on " << "x["<<l<<"]"<< x[l].variable() << "\n";
//       // std::cout << "assigned ? " << x[l].assigned() << "\n";
//       bdd delta = p & x[l].bdd_remain();
//       bdd beta  = conv_hull(m, delta) & x[l].bdd_bounds();
//       bdd boundvars  = conv_project(m, beta);
//       delta = m->eliminate(delta, boundvars);
//       ModEvent me;
//       me = x[l].tell_formula(home, beta, delta);
//       // std::cout << "me = " << me << "\n";
//       if (me_failed(me)) {
//         return ES_FAILED;
//       }
//       return ES_OK;
//     }
//     int h = (r + l) / 2;

//     // computing psi without recursion
//     bdd left = p;
//     for (int i = r; i >= h + 1; i--) {
//       bdd dom = x[i].bdd_domain();
//       int s = x[i].offset();
//       int w = s + x[i].table_width() - 1;
//       m->existquant(dom, left, s, w);
//       left = dom;
//     }
   
//     // std::cout << "done LR \n";
//     ExecStatus es = ES_OK;
//     // std::cout << "rec call 1 "<< "\n";
//     es = divide_conquer_split(home, m, left, l, h);
//     if (es == ES_FAILED) {
//       // std::cout << "ES FAILED CALL 1\n";
//       return es;
//     }

//     bdd right = p;
//     for (int i = h; i >= l; i-- ) {
//       bdd dom = x[i].bdd_domain();
//       int s = x[i].offset();
//       int w = s + x[i].table_width() - 1;
//       m->existquant(dom, right, s, w);
//       right = dom;
//     }

//     // std::cout << "rec call 2 "<< "\n";
//     es = divide_conquer_split(home, m, right, h + 1, r);
//     if (es == ES_FAILED) {
//       // std::cout << "ES FAILED CALL 2\n";
//     }
//     // std::cout << "FINISHED DC ***********\n";
//     return es;
//   }

//   template <class View>
//   ExecStatus
//   NaryBddProp<View>::divide_conquer_split_card(Space* home, BMI* m, bdd& p, int l, int r) {
//     if (l == r) {
//       ModEvent me = x[l].tell_formula(home, p);
//       if (me_failed(me)) {
//         return ES_FAILED;
//       }
//       return ES_OK;
//     }
//     int h = (r + l) / 2;

//     // computing psi without recursion
//     bdd left = p;
//     for (int i = r; i >= h + 1; i--) {
//       bdd rem = x[i].bdd_remain();
//       int s = x[i].offset();
//       int w = s + x[i].table_width() - 1;
//       m->existquant(rem, left, s, w);
//       left = rem;
//     }
   
//     ExecStatus es = ES_OK;
//     es = divide_conquer_split_card(home, m, left, l, h);
//     if (es == ES_FAILED) {
//       return es;
//     }

//     bdd right = p;
//     for (int i = h; i >= l; i-- ) {
//       bdd rem = x[i].bdd_remain();
//       int s = x[i].offset();
//       int w = s + x[i].table_width() - 1;
//       m->existquant(rem, right, s, w);
//       right = rem;
//     }

//     es = divide_conquer_split_card(home, m, right, h + 1, r);
//     return es;
//   }

//   template <class View>
//   ExecStatus
//   NaryBddProp<View>::divide_conquer_split_lex(Space* home, BMI* m, bdd& p, int l, int r) {
//     if (l == r) {
//       ModEvent me = x[l].tell_formula_lex(home, p);
//       if (me_failed(me)) {
//         return ES_FAILED;
//       }
//       return ES_OK;
//     }
//     int h = (r + l) / 2;

//     // computing psi without recursion
//     bdd left = p;
//     for (int i = r; i >= h + 1; i--) {
//       bdd dom = x[i].bdd_domain();
//       int s = x[i].offset();
//       int w = s + x[i].table_width() - 1;
//       m->existquant(dom, left, s, w);
//       left = dom;
//     }
   
//     // std::cout << "done LR \n";
//     ExecStatus es = ES_OK;
//     // std::cout << "rec call 1 "<< "\n";
//     es = divide_conquer_split_lex(home, m, left, l, h);
//     if (es == ES_FAILED) {
//       // std::cout << "ES FAILED CALL 1\n";
//       return es;
//     }

//     bdd right = p;
//     for (int i = h; i >= l; i-- ) {
//       bdd dom = x[i].bdd_domain();
//       int s = x[i].offset();
//       int w = s + x[i].table_width() - 1;
//       m->existquant(dom, right, s, w);
//       right = dom;
//     }

//     // std::cout << "rec call 2 "<< "\n";
//     es = divide_conquer_split_lex(home, m, right, h + 1, r);
//     if (es == ES_FAILED) {
//       // std::cout << "ES FAILED CALL 2\n";
//     }
//     // std::cout << "FINISHED DC ***********\n";
//     return es;
//   }

    template <class View0, class View1>
    ExecStatus
    NaryOneBdd<View0, View1>::divide_conquer(Space* home, BMI* m, bdd& p,
                                             int l, int r, int ypos) {
      if (l == r) {
        ModEvent me = ME_CPLTSET_NONE;
        if (l == ypos) {
          GECODE_ME_CHECK(me = y.tell_formula(home, p));
        } else {
          GECODE_ME_CHECK(me = x[l].tell_formula(home, p));
        }
        return ES_OK;
      }

      int h = (r + l) / 2;

      // computing psi without recursion
      bdd left = p;
      for (int i = r; i >= h + 1; i--) {
        if (i == ypos) {
          quantify(left, y);
        } else {
          quantify(left, x[i]);
        }
      }
   
      ExecStatus es = ES_OK;
      GECODE_ES_CHECK(es = divide_conquer(home, m, left, l, h, ypos));

      bdd right = p;
      for (int i = h; i >= l; i-- ) {
        if (i == ypos) {
          quantify(right, y);
        } else {
          quantify(right, x[i]);
        }
      }

      GECODE_ES_CHECK(es = divide_conquer(home, m, right, h + 1, r, ypos));
      return es;
    }

  }
}

// STATISTICS: cpltset-prop
