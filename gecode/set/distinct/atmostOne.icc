/* -*- mode: C++; c-basic-offset: 2; indent-tabs-mode: nil -*- */
/*
 *  Main authors:
 *     Guido Tack <tack@gecode.org>
 *
 *  Copyright:
 *     Guido Tack, 2004
 *
 *  Last modified:
 *     $Date$ by $Author$
 *     $Revision$
 *
 *  This file is part of Gecode, the generic constraint
 *  development environment:
 *     http://www.gecode.org
 *
 *  See the file "LICENSE" for information on usage and
 *  redistribution of this file, and for a
 *     DISCLAIMER OF ALL WARRANTIES.
 *
 */

namespace Gecode { namespace Set { namespace Distinct {

  /*
   * "AtMostOneIntersection" propagator
   *
   */

  forceinline
  AtmostOne::AtmostOne(Space* home, ViewArray<SetView>& x, unsigned int _c)
    : NaryPropagator<SetView, PC_SET_ANY>(home,x), c(_c) {}

  forceinline
  AtmostOne::AtmostOne(Space* home, bool share, AtmostOne& p)
    : NaryPropagator<SetView, PC_SET_ANY>(home,share,p), c(p.c) {}

  forceinline ExecStatus
  AtmostOne::post(Space* home, ViewArray<SetView> x, unsigned int c) {
    for (int i=x.size(); i--;) {
      GECODE_ME_CHECK(x[i].cardMin(home, c));
      GECODE_ME_CHECK(x[i].cardMax(home, c));
    }

    (void) new (home) AtmostOne(home,x,c);
    return ES_OK;
  }

}}}

// STATISTICS: set-prop
