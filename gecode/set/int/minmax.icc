/* -*- mode: C++; c-basic-offset: 2; indent-tabs-mode: nil -*- */
/*
 *  Main authors:
 *     Guido Tack <tack@gecode.org>
 *     Christian Schulte <schulte@gecode.org>
 *     Gabor Szokoli <szokoli@gecode.org>
 *
 *  Copyright:
 *     Guido Tack, 2004
 *     Christian Schulte, 2004
 *     Gabor Szokoli, 2004
 *
 *  Last modified:
 *     $Date$ by $Author$
 *     $Revision$
 *
 *  This file is part of Gecode, the generic constraint
 *  development environment:
 *     http://www.gecode.org
 *
 *  Permission is hereby granted, free of charge, to any person obtaining
 *  a copy of this software and associated documentation files (the
 *  "Software"), to deal in the Software without restriction, including
 *  without limitation the rights to use, copy, modify, merge, publish,
 *  distribute, sublicense, and/or sell copies of the Software, and to
 *  permit persons to whom the Software is furnished to do so, subject to
 *  the following conditions:
 *
 *  The above copyright notice and this permission notice shall be
 *  included in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */



#include "gecode/set.hh"
#include "gecode/int.hh"

namespace Gecode { namespace Set { namespace Int {

  forceinline
  MinElement::MinElement(Space* home, SetView y0, Gecode::Int::IntView y1)
    : IntSetPropagator<SetView,PC_SET_ANY,
                       Gecode::Int::PC_INT_BND> (home, y0, y1) {}

  forceinline ExecStatus
  MinElement::post(Space* home, SetView x0,
                   Gecode::Int::IntView x1) {
    GECODE_ME_CHECK(x0.cardMin(home,1));
    (void) new (home) MinElement(home,x0,x1);
    return ES_OK;
  }

  forceinline
  MinElement::MinElement(Space* home, bool share, MinElement& p)
    : IntSetPropagator<SetView,PC_SET_ANY,
                       Gecode::Int::PC_INT_BND> (home, share, p) {}

  forceinline
  MaxElement::MaxElement(Space* home, SetView y0, Gecode::Int::IntView y1)
    : IntSetPropagator<SetView,PC_SET_ANY,
                       Gecode::Int::PC_INT_BND> (home, y0, y1) {}

  forceinline
  MaxElement::MaxElement(Space* home, bool share, MaxElement& p)
    : IntSetPropagator<SetView,PC_SET_ANY,
                       Gecode::Int::PC_INT_BND> (home, share, p) {}

}}}

// STATISTICS: set-prop
