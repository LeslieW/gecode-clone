/* -*- mode: C++; c-basic-offset: 2; indent-tabs-mode: nil -*- */
/*
 *  Main authors:
 *     Guido Tack <tack@gecode.org>
 *
 *  Copyright:
 *     Guido Tack, 2006
 *
 *  Last modified:
 *     $Date$ by $Author$
 *     $Revision$
 *
 *  This file is part of Gecode, the generic constraint
 *  development environment:
 *     http://www.gecode.org
 *
 *  See the file "LICENSE" for information on usage and
 *  redistribution of this file, and for a
 *     DISCLAIMER OF ALL WARRANTIES.
 *
 */

namespace Gecode { namespace Set { namespace Projection {

  template <bool negated>
  forceinline
  NaryProjection<negated>::NaryProjection
  (Space* home, ViewArray<SetView>& x0, ProjectorSet& ps0)
    : Propagator(home), x(x0), pc(x.size()), ps(ps0) {
    force(home);
    Support::DynamicArray<int> scope;
    ps.scope(scope, x.size());
    for (int i=x.size(); i--;) {
      pc[i] = scope[i];
      if (pc[i] != PC_SET_ANY + 1) {
        if (negated)
          pc[i] = ComplementView<SetView>::pc_negateset(pc[i]);
        x[i].subscribe(home, this, pc[i]);
      }
    }
  }

  template <bool negated>
  forceinline
  NaryProjection<negated>::NaryProjection
  (Space* home, bool share, NaryProjection& p)
    : Propagator(home,share,p), ps(p.ps) {
    x.update(home,share,p.x);
    pc.update(home, share, p.pc);
  }

  template <bool negated>
  PropCost
  NaryProjection<negated>::cost(void) const {
    switch (x.size()) {
    case 1: return PC_UNARY_HI;
    case 2: return PC_BINARY_HI;
    case 3: return PC_TERNARY_HI;
    default: return PC_LINEAR_HI;
    }
  }

  template <bool negated>
  size_t
  NaryProjection<negated>::dispose(Space* home) {
    unforce(home);
    if (!home->failed()) {
      for (int i=x.size(); i--;)
        if (pc[i] != PC_SET_ANY + 1)
          x[i].cancel(home, this, pc[i]);
    }
    ps.~ProjectorSet();
    pc.~SharedArray();
    (void) Propagator::dispose(home);
    return sizeof(*this);
  }

  template <bool negated>
  ExecStatus
  NaryProjection<negated>::post(Space* home,
                                ViewArray<SetView>& x, ProjectorSet& ps) {
    if (ps.arity() != x.size()-1) {
      throw Set::InvalidProjector("");
    }
    (void) new (home) NaryProjection<negated>(home,x,ps);
    return ES_OK;
  }

  template <bool negated>
  Actor*
  NaryProjection<negated>::copy(Space* home, bool share) {
    return new (home) NaryProjection<negated>(home,share,*this);
  }

  template <bool negated>
  ExecStatus
  NaryProjection<negated>::propagate(Space* home) {
    bool done = true;
    for (int i=x.size(); i--;)
      if (!x[i].assigned()) {
        done = false; break;
      }
    ExecStatus es = ps.propagate<negated>(home, x);
    if (es == ES_FAILED)
      return ES_FAILED;
    if (es == __ES_SUBSUMED)
      return ES_SUBSUMED(this,home);
    return done ? ES_SUBSUMED(this,home) : es;
  }

}}}

// STATISTICS: set-prop
