/*
 *  Main authors:
 *     Christian Schulte <schulte@gecode.org>
 *
 *  Contributing authors:
 *     Guido Tack <tack@gecode.org>
 *
 *  Copyright:
 *     Christian Schulte, 2003
 *     Guido Tack, 2004
 *
 *  Last modified:
 *     $Date$ by $Author$
 *     $Revision$
 *
 *  This file is part of Gecode, the generic constraint
 *  development environment:
 *     http://www.gecode.org
 *
 *  See the file "LICENSE" for information on usage and
 *  redistribution of this file, and for a
 *     DISCLAIMER OF ALL WARRANTIES.
 *
 */

namespace Gecode { namespace Int {

  template <class View>
  forceinline
  ViewValues<View>::ViewValues(void) {}

  template <class View>
  forceinline
  ViewValues<View>::ViewValues(const View& x) {
    ViewRanges<View> r(x);
    Iter::Ranges::ToValues<ViewRanges<View> >::init(r);
  }

  template <class View>
  forceinline void
  ViewValues<View>::init(const View& x) {
    ViewRanges<View> r(x);
    Iter::Ranges::ToValues<ViewRanges<View> >::init(r);
  }

}}

// STATISTICS: int-var

