/* -*- mode: C++; c-basic-offset: 2; indent-tabs-mode: nil -*- */
/*
 *  Main authors:
 *     Christian Schulte <schulte@gecode.org>
 *
 *  Copyright:
 *     Christian Schulte, 2002
 *
 *  Last modified:
 *     $Date$ by $Author$
 *     $Revision$
 *
 *  This file is part of Gecode, the generic constraint
 *  development environment:
 *     http://www.gecode.org
 *
 *  See the file "LICENSE" for information on usage and
 *  redistribution of this file, and for a
 *     DISCLAIMER OF ALL WARRANTIES.
 *
 */

namespace Gecode {

  namespace Int {

    /*
     * Constructors and initialization
     *
     */
    forceinline
    BoolView::BoolView(void) {}
    forceinline
    BoolView::BoolView(const BoolVar& x)
      : VariableViewBase<BoolVarImp>(x.variable()) {}
    forceinline
    BoolView::BoolView(BoolVarImp* x)
      : VariableViewBase<BoolVarImp>(x) {}
    

    /*
     * Value access
     *
     */
    forceinline BoolStatus
    BoolView::status(void) const {
      return var->status();
    }
    forceinline int
    BoolView::min(void) const {
      return var->min();
    }
    forceinline int
    BoolView::max(void) const {
      return var->max();
    }
    forceinline int
    BoolView::med(void) const {
      return var->med();
    }
    forceinline int
    BoolView::val(void) const {
      return var->val();
    }
    
    forceinline unsigned int
    BoolView::size(void) const {
      return var->size();
    }
    forceinline unsigned int
    BoolView::width(void) const {
      return var->width();
    }
    forceinline unsigned int
    BoolView::regret_min(void) const {
      return var->regret_min();
    }
    forceinline unsigned int
    BoolView::regret_max(void) const {
      return var->regret_max();
    }
    
    
    /*
     * Domain tests
     *
     */
    forceinline bool
    BoolView::range(void) const {
      return var->range();
    }
    forceinline bool
    BoolView::assigned(void) const {
      return var->assigned();
    }
    
    forceinline bool
    BoolView::in(int n) const {
      return var->in(n);
    }
    forceinline bool
    BoolView::in(double n) const {
      return var->in(n);
    }
    

    /*
     * Domain update by value
     *
     */
    forceinline ModEvent
    BoolView::lq(Space* home, int n) {
      return var->lq(home,n);
    }
    forceinline ModEvent
    BoolView::lq(Space* home, double n) {
      return var->lq(home,n);
    }
    
    forceinline ModEvent
    BoolView::le(Space* home, int n) {
      return var->lq(home,n-1);
    }
    forceinline ModEvent
    BoolView::le(Space* home, double n) {
      return lq(home,n-1.0);
    }
    
    forceinline ModEvent
    BoolView::gq(Space* home, int n) {
    return var->gq(home,n);
    }
    forceinline ModEvent
    BoolView::gq(Space* home, double n) {
      return var->gq(home,n);
    }
    
    forceinline ModEvent
    BoolView::gr(Space* home, int n) {
      return var->gq(home,n+1);
    }
    forceinline ModEvent
    BoolView::gr(Space* home, double n) {
      return gq(home,n+1.0);
    }
    
    forceinline ModEvent
    BoolView::nq(Space* home, int n) {
      return var->nq(home,n);
    }
    forceinline ModEvent
    BoolView::nq(Space* home, double n) {
      return var->nq(home,n);
    }
    
    forceinline ModEvent
    BoolView::eq(Space* home, int n) {
      return var->eq(home,n);
    }
    forceinline ModEvent
    BoolView::eq(Space* home, double n) {
      return var->eq(home,n);
    }
    
    
    /*
     * Iterator-based domain update
     *
     */
    template <class I>
    forceinline ModEvent
    BoolView::narrow_r(Space* home, I& i, bool depend) {
      return var->narrow_r(home,i,depend);
    }
    template <class I>
    forceinline ModEvent
    BoolView::inter_r(Space* home, I& i, bool depend) {
      return var->inter_r(home,i,depend);
    }
    template <class I>
    forceinline ModEvent
    BoolView::minus_r(Space* home, I& i, bool depend) {
      return var->minus_r(home,i,depend);
    }
    template <class I>
    forceinline ModEvent
    BoolView::narrow_v(Space* home, I& i, bool depend) {
      return var->narrow_v(home,i,depend);
    }
    template <class I>
    forceinline ModEvent
    BoolView::inter_v(Space* home, I& i, bool depend) {
      return var->inter_v(home,i,depend);
    }
    template <class I>
    forceinline ModEvent
    BoolView::minus_v(Space* home, I& i, bool depend) {
      return var->minus_v(home,i,depend);
    }


    /*
     * Boolean domain tests
     *
     */
    forceinline bool
    BoolView::zero(void) const {
      return var->zero();
    }
    forceinline bool
    BoolView::one(void) const {
      return var->one();
    }
    forceinline bool
    BoolView::none(void) const {
      return var->none();
    }


    /*
     * Boolean assignment operations
     *
     */
    forceinline ModEvent
    BoolView::zero_none(Space* home) {
      return var->zero_none(home);
    }
    forceinline ModEvent
    BoolView::one_none(Space* home) {
      return var->one_none(home);
    }

    forceinline ModEvent
    BoolView::zero(Space* home) {
      return var->zero(home);
    }
    forceinline ModEvent
    BoolView::one(Space* home) {
      return var->one(home);
    }


    /*
     * Delta information for advisors
     *
     */
    forceinline ModEvent
    BoolView::modevent(const Delta* d) {
      return BoolVarImp::modevent(d);
    }
    forceinline int
    BoolView::min(const Delta* d) const {
      return var->min(d);
    }
    forceinline int
    BoolView::max(const Delta* d) const {
      return var->max(d);
    }
    forceinline bool
    BoolView::any(const Delta* d) const {
      return var->any(d);
    }



    /*
     * Cloning
     *
     */
    forceinline void
    BoolView::update(Space* home, bool share, BoolView& x) {
      var = x.var->copy(home,share);
    }

    /*
     * Serialization
     *
     */
    forceinline Reflection::Arg*
    BoolView::spec(Space* home, Reflection::VarMap& m) {
      return var->spec(home, m);
    }
    forceinline Reflection::Type*
    BoolView::type(void) {
      return new Reflection::Type("int.BoolView");
    }

    /*
     * Negated Boolean views
     *
     */

    /*
     * Constructors and initialization
     *
     */
    forceinline
    NegBoolView::NegBoolView(void) {}
    forceinline
    NegBoolView::NegBoolView(const BoolView& b)
      : DerivedViewBase<BoolView>(b) {}
    forceinline void
    NegBoolView::init(const BoolView& b) {
      view = b;
    }


    /*
     * Boolean domain tests
     *
     */
    forceinline BoolStatus
    NegBoolView::status(void) const {
      return view.status();
    }
    forceinline bool
    NegBoolView::zero(void) const {
      return view.one();
    }
    forceinline bool
    NegBoolView::one(void) const {
      return view.zero();
    }
    forceinline bool
    NegBoolView::none(void) const {
      return view.none();
    }


    /*
     * Boolean assignment operations
     *
     */
    forceinline ModEvent
    NegBoolView::zero_none(Space* home) {
      return view.one_none(home);
    }
    forceinline ModEvent
    NegBoolView::one_none(Space* home) {
      return view.zero_none(home);
    }

    forceinline ModEvent
    NegBoolView::zero(Space* home) {
      return view.one(home);
    }
    forceinline ModEvent
    NegBoolView::one(Space* home) {
      return view.zero(home);
    }


    /*
     * Value access
     *
     */
    forceinline int
    NegBoolView::min(void) const {
      return view.max();
    }
    forceinline int
    NegBoolView::max(void) const {
      return view.min();
    }
    forceinline int
    NegBoolView::val(void) const {
      return 1-view.val();
    }


    /*
     * Domain tests
     *
     */
    forceinline bool
    NegBoolView::assigned(void) const {
      return view.assigned();
    }

    /*
     * Propagator modification events
     *
     */
    forceinline void
    NegBoolView::schedule(Space* home, Propagator* p, ModEvent me) {
      return BoolView::schedule(home,p,me);
    }
    forceinline ModEvent
    NegBoolView::pme(const Propagator* p) {
      return BoolView::pme(p);
    }
    forceinline PropModEvent
    NegBoolView::pme(ModEvent me) {
      return BoolView::pme(me);
    }


    /*
     * Dependencies
     *
     */
    forceinline void
    NegBoolView::subscribe(Space* home, Propagator* p, PropCond pc,
                           bool process) {
      view.subscribe(home,p,pc,process);
    }
    forceinline void
    NegBoolView::cancel(Space* home, Propagator* p, PropCond pc) {
      view.cancel(home,p,pc);
    }
    forceinline void
    NegBoolView::subscribe(Space* home, Advisor* a) {
      view.subscribe(home,a);
    }
    forceinline void
    NegBoolView::cancel(Space* home, Advisor* a) {
      view.cancel(home,a);
    }


    /*
     * Delta information for advisors
     *
     */
    forceinline ModEvent
    NegBoolView::modevent(const Delta* d) {
      return BoolView::modevent(d);
    }
    forceinline int
    NegBoolView::min(const Delta* d) const {
      return view.max(d);
    }
    forceinline int
    NegBoolView::max(const Delta* d) const {
      return view.min(d);
    }
    forceinline bool
    NegBoolView::any(const Delta* d) const {
      return view.any(d);
    }



    /*
     * Cloning
     *
     */
    forceinline void
    NegBoolView::update(Space* home, bool share, NegBoolView& b) {
      view.update(home,share,b.view);
    }

    /*
     * Serialization
     *
     */
    forceinline Reflection::Arg*
    NegBoolView::spec(Space* home, Reflection::VarMap& m) {
      return view.spec(home, m);
    }
    forceinline Reflection::Type*
    NegBoolView::type(void) {
      return new Reflection::Type("int.NegBoolView");
    }

    /**
     * \brief %Range iterator for Boolean variable views
     * \ingroup TaskActorIntView
     */
    template <>
    class ViewRanges<BoolView> : public Iter::Ranges::Singleton {
    public:
      /// \name Constructors and initialization
      //@{
      /// Default constructor
      ViewRanges(void);
      /// Initialize with ranges for view \a x
      ViewRanges(const BoolView& x);
      /// Initialize with ranges for view \a x
      void init(const BoolView& x);
      //@}
    };

    forceinline
    ViewRanges<BoolView>::ViewRanges(void) {}

    forceinline
    ViewRanges<BoolView>::ViewRanges(const BoolView& x)
      : Iter::Ranges::Singleton(x.min(),x.max()) {}

    forceinline void
    ViewRanges<BoolView>::init(const BoolView& x) {
      Iter::Ranges::Singleton::init(x.min(),x.max());
    }

    /**
     * \brief %Range iterator for negated Boolean variable views
     * \ingroup TaskActorIntView
     */
    template <>
    class ViewRanges<NegBoolView> : public Iter::Ranges::Singleton {
    public:
      /// \name Constructors and initialization
      //@{
      /// Default constructor
      ViewRanges(void);
      /// Initialize with ranges for view \a x
      ViewRanges(const NegBoolView& x);
      /// Initialize with ranges for view \a x
      void init(const NegBoolView& x);
      //@}
    };

    forceinline
    ViewRanges<NegBoolView>::ViewRanges(void) {}

    forceinline
    ViewRanges<NegBoolView>::ViewRanges(const NegBoolView& x)
      : Iter::Ranges::Singleton(x.min(),x.max()) {}

    forceinline void
    ViewRanges<NegBoolView>::init(const NegBoolView& x) {
      Iter::Ranges::Singleton::init(x.min(),x.max());
    }

  }


  /*
   * View comparison
   *
   */
  forceinline bool
  same(const Int::NegBoolView& x, const Int::NegBoolView& y) {
    return same(x.base(),y.base());
  }
  forceinline bool
  before(const Int::NegBoolView& x, const Int::NegBoolView& y) {
    return before(x.base(),y.base());
  }

  namespace Int {

    /*
     * Test sharing between Boolean and negated Boolean views
     *
     */
    forceinline BoolTest
    bool_test(const BoolView& b0, const BoolView& b1) {
      return same(b0,b1) ? BT_SAME : BT_NONE;
    }
    forceinline BoolTest
    bool_test(const BoolView& b0, const NegBoolView& b1) {
      return same(b0,b1.base()) ? BT_COMP : BT_NONE;
    }
    forceinline BoolTest
    bool_test(const NegBoolView& b0, const BoolView& b1) {
      return same(b0.base(),b1) ? BT_COMP : BT_NONE;
    }
    /// Test whether views \a b0 and \a b1 are the same
    forceinline BoolTest
    bool_test(const NegBoolView& b0, const NegBoolView& b1) {
      return same(b0,b1) ? BT_SAME : BT_NONE;
    }

  }

}

// STATISTICS: int-var
