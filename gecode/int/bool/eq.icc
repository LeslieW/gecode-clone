/* -*- mode: C++; c-basic-offset: 2; indent-tabs-mode: nil -*- */
/*
 *  Main authors:
 *     Christian Schulte <schulte@gecode.org>
 *
 *  Copyright:
 *     Christian Schulte, 2004
 *
 *  Last modified:
 *     $Date$ by $Author$
 *     $Revision$
 *
 *  This file is part of Gecode, the generic constraint
 *  development environment:
 *     http://www.gecode.org
 *
 *  See the file "LICENSE" for information on usage and
 *  redistribution of this file, and for a
 *     DISCLAIMER OF ALL WARRANTIES.
 *
 */

namespace Gecode { namespace Int { namespace Bool {

  template<class BVA, class BVB>
  forceinline
  Eq<BVA,BVB>::Eq(Space* home, BVA b0, BVB b1)
    : BoolBinary<BVA,BVB>(home,b0,b1) {}

  template<class BVA, class BVB>
  forceinline
  Eq<BVA,BVB>::Eq(Space* home, bool share, Eq<BVA,BVB>& p)
    : BoolBinary<BVA,BVB>(home,share,p) {}

  template<class BVA, class BVB>
  forceinline
  Eq<BVA,BVB>::Eq(Space* home, bool share, Propagator& p,
                  BVA b0, BVB b1)
    : BoolBinary<BVA,BVB>(home,share,p,b0,b1) {}

  template<class BVA, class BVB>
  Actor*
  Eq<BVA,BVB>::copy(Space* home, bool share) {
    return new (home) Eq<BVA,BVB>(home,share,*this);
  }

  template<class BVA, class BVB>
  forceinline ExecStatus
  Eq<BVA,BVB>::post(Space* home, BVA b0, BVB b1) {
    switch (bool_test(b0,b1)) {
    case BT_SAME: return ES_OK;
    case BT_COMP: return ES_FAILED;
    case BT_NONE:
      if (b0.zero()) {
        GECODE_ME_CHECK(b1.zero(home));
      } else if (b0.one()) {
        GECODE_ME_CHECK(b1.one(home));
      } else if (b1.zero()) {
        GECODE_ME_CHECK(b0.zero(home));
      } else if (b1.one()) {
        GECODE_ME_CHECK(b0.one(home));
      } else {
        (void) new (home) Eq<BVA,BVB>(home,b0,b1);
      }
      break;
    default: GECODE_NEVER;
    }
    return ES_OK;
  }

  template<class BVA, class BVB>
  ExecStatus
  Eq<BVA,BVB>::propagate(Space* home) {
#define GECODE_INT_STATUS(S0,S1) \
  ((BVA::S0<<(1*BVA::BITS))|(BVB::S1<<(0*BVB::BITS)))
    switch ((x0.status() << (1*BVA::BITS)) | (x1.status() << (0*BVB::BITS))) {
    case GECODE_INT_STATUS(NONE,NONE):
      GECODE_NEVER;
    case GECODE_INT_STATUS(NONE,ZERO):
      x0.zero_none(home); break;
    case GECODE_INT_STATUS(NONE,ONE):
      x0.one_none(home); break;
    case GECODE_INT_STATUS(ZERO,NONE):
      x1.zero_none(home); break;
    case GECODE_INT_STATUS(ZERO,ZERO):
      break;
    case GECODE_INT_STATUS(ZERO,ONE):
      return ES_FAILED;
    case GECODE_INT_STATUS(ONE,NONE):
      x1.one_none(home); break;
    case GECODE_INT_STATUS(ONE,ZERO):
      return ES_FAILED;
    case GECODE_INT_STATUS(ONE,ONE):
      break;
    default:
      GECODE_NEVER;
    }
    return this->ES_DISPOSED(sizeof(*this));
#undef GECODE_INT_STATUS
  }

}}}

// STATISTICS: int-prop

