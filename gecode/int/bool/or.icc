/* -*- mode: C++; c-basic-offset: 2; indent-tabs-mode: nil -*- */
/*
 *  Main authors:
 *     Christian Schulte <schulte@gecode.org>
 *
 *  Copyright:
 *     Christian Schulte, 2004
 *
 *  Last modified:
 *     $Date$ by $Author$
 *     $Revision$
 *
 *  This file is part of Gecode, the generic constraint
 *  development environment:
 *     http://www.gecode.org
 *
 *  See the file "LICENSE" for information on usage and
 *  redistribution of this file, and for a
 *     DISCLAIMER OF ALL WARRANTIES.
 *
 */

namespace Gecode { namespace Int { namespace Bool {

  /*
   * Binary Boolean disjunction propagator (true)
   *
   */

  template <class BVA, class BVB>
  forceinline
  BinOrTrue<BVA,BVB>::BinOrTrue(Space* home, BVA b0, BVB b1)
    : BoolBinary<BVA,BVB>(home,b0,b1) {}

  template <class BVA, class BVB>
  forceinline
  BinOrTrue<BVA,BVB>::BinOrTrue(Space* home, bool share, BinOrTrue<BVA,BVB>& p)
    : BoolBinary<BVA,BVB>(home,share,p) {}

  template <class BVA, class BVB>
  forceinline
  BinOrTrue<BVA,BVB>::BinOrTrue(Space* home, bool share, Propagator& p,
                              BVA b0, BVB b1)
    : BoolBinary<BVA,BVB>(home,share,p,b0,b1) {}

  template <class BVA, class BVB>
  inline ExecStatus
  BinOrTrue<BVA,BVB>::post(Space* home, BVA b0, BVB b1) {
    switch (bool_test(b0,b1)) {
    case BT_SAME:
      GECODE_ME_CHECK(b0.one(home));
      break;
    case BT_COMP:
      break;
    case BT_NONE:
      if (b0.zero()) {
        GECODE_ME_CHECK(b1.one(home));
      } else if (b1.zero()) {
        GECODE_ME_CHECK(b0.one(home));
      } else if (!b0.one() && !b1.one()) {
        (void) new (home) BinOrTrue<BVA,BVB>(home,b0,b1);
      }
      break;
    default: GECODE_NEVER;
    }
    return ES_OK;
  }

  template <class BVA, class BVB>
  Actor*
  BinOrTrue<BVA,BVB>::copy(Space* home, bool share) {
    return new (home) BinOrTrue<BVA,BVB>(home,share,*this);
  }

  template <class BVA, class BVB>
  ExecStatus
  BinOrTrue<BVA,BVB>::propagate(Space* home) {
    if (x0.zero()) {
      GECODE_ME_CHECK(x1.one(home));
    } else if (x1.zero()) {
      GECODE_ME_CHECK(x0.one(home));
    } else {
      assert(x0.one() || x1.one());
    }
    return ES_SUBSUMED;
  }


  /*
   * Boolean disjunction propagator (true)
   *
   */

  template <class BV>
  forceinline
  QuadOrTrue<BV>::QuadOrTrue(Space* home, BV b0, BV b1, BV b2, BV b3)
    : BoolBinary<BV,BV>(home,b0,b1), x2(b2), x3(b3) {}

  template <class BV>
  forceinline
  QuadOrTrue<BV>::QuadOrTrue(Space* home, bool share, QuadOrTrue<BV>& p)
    : BoolBinary<BV,BV>(home,share,p) {
    x2.update(home,share,p.x2);
    x3.update(home,share,p.x3);
  }

  template <class BV>
  forceinline
  QuadOrTrue<BV>::QuadOrTrue(Space* home, bool share, Propagator& p,
                             BV b0, BV b1, BV b2, BV b3)
    : BoolBinary<BV,BV>(home,share,p,b0,b1) {
    x2.update(home,share,b2);
    x3.update(home,share,b3);
  }

  template <class BV>
  inline ExecStatus
  QuadOrTrue<BV>::post(Space* home, BV b0, BV b1, BV b2, BV b3) {
    (void) new (home) QuadOrTrue<BV>(home,b0,b1,b2,b3);
    return ES_OK;
  }

  template <class BV>
  Actor*
  QuadOrTrue<BV>::copy(Space* home, bool share) {
    return new (home) QuadOrTrue<BV>(home,share,*this);
  }

  template <class BV>
  ExecStatus
  QuadOrTrue<BV>::propagate(Space* home) {
#define GECODE_INT_STATUS(S0,S1,S2,S3)                        \
    ((BV::S0 << (3*BV::BITS)) | (BV::S1 << (2*BV::BITS)) |    \
     (BV::S2 << (1*BV::BITS)) | (BV::S3 << (0*BV::BITS)))
    switch ((x0.status() << (3*BV::BITS)) | (x1.status() << (2*BV::BITS)) |
            (x2.status() << (1*BV::BITS)) | (x3.status() << (0*BV::BITS))) {
    case GECODE_INT_STATUS(NONE,NONE,NONE,NONE):
    case GECODE_INT_STATUS(NONE,NONE,NONE,ZERO):
    case GECODE_INT_STATUS(NONE,NONE,NONE,ONE):
    case GECODE_INT_STATUS(NONE,NONE,ZERO,NONE):
    case GECODE_INT_STATUS(NONE,NONE,ZERO,ZERO):
    case GECODE_INT_STATUS(NONE,NONE,ZERO,ONE):
    case GECODE_INT_STATUS(NONE,NONE,ONE,NONE):
    case GECODE_INT_STATUS(NONE,NONE,ONE,ZERO):
    case GECODE_INT_STATUS(NONE,NONE,ONE,ONE):
      GECODE_NEVER;
    case GECODE_INT_STATUS(NONE,ZERO,NONE,NONE):
    case GECODE_INT_STATUS(NONE,ZERO,NONE,ZERO):
      std::swap(x1,x2); x1.subscribe(home,this,PC_BOOL_VAL,false);
      return ES_FIX;
    case GECODE_INT_STATUS(NONE,ZERO,NONE,ONE):
      x0.cancel(home,this,PC_BOOL_VAL); break;
    case GECODE_INT_STATUS(NONE,ZERO,ZERO,NONE):
      std::swap(x1,x3); x1.subscribe(home,this,PC_BOOL_VAL,false);
      return ES_FIX;
    case GECODE_INT_STATUS(NONE,ZERO,ZERO,ZERO):
      x0.one_none(home); break;
    case GECODE_INT_STATUS(NONE,ZERO,ZERO,ONE):
    case GECODE_INT_STATUS(NONE,ZERO,ONE,NONE):
    case GECODE_INT_STATUS(NONE,ZERO,ONE,ZERO):
    case GECODE_INT_STATUS(NONE,ZERO,ONE,ONE):
    case GECODE_INT_STATUS(NONE,ONE,NONE,NONE):
    case GECODE_INT_STATUS(NONE,ONE,NONE,ZERO):
    case GECODE_INT_STATUS(NONE,ONE,NONE,ONE):
    case GECODE_INT_STATUS(NONE,ONE,ZERO,NONE):
    case GECODE_INT_STATUS(NONE,ONE,ZERO,ZERO):
    case GECODE_INT_STATUS(NONE,ONE,ZERO,ONE):
    case GECODE_INT_STATUS(NONE,ONE,ONE,NONE):
    case GECODE_INT_STATUS(NONE,ONE,ONE,ZERO):
    case GECODE_INT_STATUS(NONE,ONE,ONE,ONE):
      x0.cancel(home,this,PC_BOOL_VAL); break;
    case GECODE_INT_STATUS(ZERO,NONE,NONE,NONE):
    case GECODE_INT_STATUS(ZERO,NONE,NONE,ZERO):
      std::swap(x0,x2); x0.subscribe(home,this,PC_BOOL_VAL,false);
      return ES_FIX;
    case GECODE_INT_STATUS(ZERO,NONE,NONE,ONE):
      x1.cancel(home,this,PC_BOOL_VAL); break;
    case GECODE_INT_STATUS(ZERO,NONE,ZERO,NONE):
      std::swap(x0,x3); x0.subscribe(home,this,PC_BOOL_VAL,false);
      return ES_FIX;
    case GECODE_INT_STATUS(ZERO,NONE,ZERO,ZERO):
      x1.one_none(home); break;
    case GECODE_INT_STATUS(ZERO,NONE,ZERO,ONE):
      x1.cancel(home,this,PC_BOOL_VAL); break;
    case GECODE_INT_STATUS(ZERO,NONE,ONE,NONE):
    case GECODE_INT_STATUS(ZERO,NONE,ONE,ZERO):
    case GECODE_INT_STATUS(ZERO,NONE,ONE,ONE):
      x1.cancel(home,this,PC_BOOL_VAL); break;
    case GECODE_INT_STATUS(ZERO,ZERO,NONE,NONE):
      std::swap(x0,x2); x0.subscribe(home,this,PC_BOOL_VAL,false);
      std::swap(x1,x3); x1.subscribe(home,this,PC_BOOL_VAL,false);
      return ES_FIX;
    case GECODE_INT_STATUS(ZERO,ZERO,NONE,ZERO):
      x2.one_none(home); break;
    case GECODE_INT_STATUS(ZERO,ZERO,NONE,ONE):
      break;
    case GECODE_INT_STATUS(ZERO,ZERO,ZERO,NONE):
      x3.one_none(home); break;
    case GECODE_INT_STATUS(ZERO,ZERO,ZERO,ZERO):
      return ES_FAILED;
    case GECODE_INT_STATUS(ZERO,ZERO,ZERO,ONE):
    case GECODE_INT_STATUS(ZERO,ZERO,ONE,NONE):
    case GECODE_INT_STATUS(ZERO,ZERO,ONE,ZERO):
    case GECODE_INT_STATUS(ZERO,ZERO,ONE,ONE):
    case GECODE_INT_STATUS(ZERO,ONE,NONE,NONE):
    case GECODE_INT_STATUS(ZERO,ONE,NONE,ZERO):
    case GECODE_INT_STATUS(ZERO,ONE,NONE,ONE):
    case GECODE_INT_STATUS(ZERO,ONE,ZERO,NONE):
    case GECODE_INT_STATUS(ZERO,ONE,ZERO,ZERO):
    case GECODE_INT_STATUS(ZERO,ONE,ZERO,ONE):
    case GECODE_INT_STATUS(ZERO,ONE,ONE,NONE):
    case GECODE_INT_STATUS(ZERO,ONE,ONE,ZERO):
    case GECODE_INT_STATUS(ZERO,ONE,ONE,ONE):
      break;
    case GECODE_INT_STATUS(ONE,NONE,NONE,NONE):
    case GECODE_INT_STATUS(ONE,NONE,NONE,ZERO):
    case GECODE_INT_STATUS(ONE,NONE,NONE,ONE):
    case GECODE_INT_STATUS(ONE,NONE,ZERO,NONE):
    case GECODE_INT_STATUS(ONE,NONE,ZERO,ZERO):
    case GECODE_INT_STATUS(ONE,NONE,ZERO,ONE):
    case GECODE_INT_STATUS(ONE,NONE,ONE,NONE):
    case GECODE_INT_STATUS(ONE,NONE,ONE,ZERO):
    case GECODE_INT_STATUS(ONE,NONE,ONE,ONE):
      x1.cancel(home,this,PC_BOOL_VAL); break;
    case GECODE_INT_STATUS(ONE,ZERO,NONE,NONE):
    case GECODE_INT_STATUS(ONE,ZERO,NONE,ZERO):
    case GECODE_INT_STATUS(ONE,ZERO,NONE,ONE):
    case GECODE_INT_STATUS(ONE,ZERO,ZERO,NONE):
    case GECODE_INT_STATUS(ONE,ZERO,ZERO,ZERO):
    case GECODE_INT_STATUS(ONE,ZERO,ZERO,ONE):
    case GECODE_INT_STATUS(ONE,ZERO,ONE,NONE):
    case GECODE_INT_STATUS(ONE,ZERO,ONE,ZERO):
    case GECODE_INT_STATUS(ONE,ZERO,ONE,ONE):
    case GECODE_INT_STATUS(ONE,ONE,NONE,NONE):
    case GECODE_INT_STATUS(ONE,ONE,NONE,ZERO):
    case GECODE_INT_STATUS(ONE,ONE,NONE,ONE):
    case GECODE_INT_STATUS(ONE,ONE,ZERO,NONE):
    case GECODE_INT_STATUS(ONE,ONE,ZERO,ZERO):
    case GECODE_INT_STATUS(ONE,ONE,ZERO,ONE):
    case GECODE_INT_STATUS(ONE,ONE,ONE,NONE):
    case GECODE_INT_STATUS(ONE,ONE,ONE,ZERO):
    case GECODE_INT_STATUS(ONE,ONE,ONE,ONE):
      break;
    default:
      GECODE_NEVER;
    }
    return this->ES_DISPOSED(sizeof(*this));
#undef GECODE_INT_STATUS
  }

  template<class BV>
  size_t
  QuadOrTrue<BV>::dispose(Space* home) {
    (void) BoolBinary<BV,BV>::dispose(home);
    return sizeof(*this);
  }


  /*
   * Boolean disjunction propagator
   *
   */

  template <class BVA, class BVB, class BVC>
  forceinline
  Or<BVA,BVB,BVC>::Or(Space* home, BVA b0, BVB b1, BVC b2)
    : BoolTernary<BVA,BVB,BVC>(home,b0,b1,b2) {}

  template <class BVA, class BVB, class BVC>
  forceinline
  Or<BVA,BVB,BVC>::Or(Space* home, bool share, Or<BVA,BVB,BVC>& p)
    : BoolTernary<BVA,BVB,BVC>(home,share,p) {}

  template <class BVA, class BVB, class BVC>
  forceinline
  Or<BVA,BVB,BVC>::Or(Space* home, bool share, Propagator& p,
                        BVA b0, BVB b1, BVC b2)
    : BoolTernary<BVA,BVB,BVC>(home,share,p,b0,b1,b2) {}

  template <class BVA, class BVB, class BVC>
  inline ExecStatus
  Or<BVA,BVB,BVC>::post(Space* home, BVA b0, BVB b1, BVC b2) {
    if (b2.zero()) {
      GECODE_ME_CHECK(b0.zero(home));
      GECODE_ME_CHECK(b1.zero(home));
    } else if (b2.one()) {
      return BinOrTrue<BVA,BVB>::post(home,b0,b1);
    } else {
      switch (bool_test(b0,b1)) {
      case BT_SAME:
        return Eq<BVA,BVC>::post(home,b0,b2);
      case BT_COMP:
        GECODE_ME_CHECK(b2.one(home));
        break;
      case BT_NONE:
        if (b0.one() || b1.one()) {
          GECODE_ME_CHECK(b2.one(home));
        } else if (b0.zero()) {
          return Eq<BVB,BVC>::post(home,b1,b2);
        } else if (b1.zero()) {
          return Eq<BVA,BVC>::post(home,b0,b2);
        } else {
          (void) new (home) Or<BVA,BVB,BVC>(home,b0,b1,b2);
        }
        break;
      default: GECODE_NEVER;
      }
    }
    return ES_OK;
  }

  template <class BVA, class BVB, class BVC>
  Actor*
  Or<BVA,BVB,BVC>::copy(Space* home, bool share) {
    return new (home) Or<BVA,BVB,BVC>(home,share,*this);
  }

  template <class BVA, class BVB, class BVC>
  ExecStatus
  Or<BVA,BVB,BVC>::propagate(Space* home) {
#define GECODE_INT_STATUS(S0,S1,S2) \
    ((((BVA::S0 << BVA::BITS) | BVB::S1) << BVB::BITS) | BVC::S2)
    switch ((((x0.status() << BVA::BITS) | x1.status()) << BVB::BITS) | x2.status()) {
    case GECODE_INT_STATUS(NONE,NONE,NONE):
      GECODE_NEVER;
    case GECODE_INT_STATUS(NONE,NONE,ZERO):
      x0.zero_none(home); x1.zero_none(home); break;
    case GECODE_INT_STATUS(NONE,NONE,ONE):
      return ES_FIX;
    case GECODE_INT_STATUS(NONE,ZERO,NONE):
      return ES_FIX;
    case GECODE_INT_STATUS(NONE,ZERO,ZERO):
      x0.zero_none(home); break;
    case GECODE_INT_STATUS(NONE,ZERO,ONE):
      x0.one_none(home); break;
    case GECODE_INT_STATUS(NONE,ONE,NONE):
      x0.cancel(home,this,PC_BOOL_VAL); x2.one_none(home); break;
    case GECODE_INT_STATUS(NONE,ONE,ZERO):
      return ES_FAILED;      
    case GECODE_INT_STATUS(NONE,ONE,ONE):
      x0.cancel(home,this,PC_BOOL_VAL); break;
    case GECODE_INT_STATUS(ZERO,NONE,NONE):
      return ES_FIX;
    case GECODE_INT_STATUS(ZERO,NONE,ZERO):
      x1.zero_none(home); break;
    case GECODE_INT_STATUS(ZERO,NONE,ONE):
      x1.one_none(home); break;
    case GECODE_INT_STATUS(ZERO,ZERO,NONE):
      x2.zero_none(home); break;
    case GECODE_INT_STATUS(ZERO,ZERO,ZERO):
      break;
    case GECODE_INT_STATUS(ZERO,ZERO,ONE):
      return ES_FAILED;
    case GECODE_INT_STATUS(ZERO,ONE,NONE):
      x2.one_none(home); break;
    case GECODE_INT_STATUS(ZERO,ONE,ZERO):
      return ES_FAILED;
    case GECODE_INT_STATUS(ZERO,ONE,ONE):
      break;
    case GECODE_INT_STATUS(ONE,NONE,NONE):
      x1.cancel(home,this,PC_BOOL_VAL); x2.one_none(home); break;
    case GECODE_INT_STATUS(ONE,NONE,ZERO):
      return ES_FAILED;
    case GECODE_INT_STATUS(ONE,NONE,ONE):
      x1.cancel(home,this,PC_BOOL_VAL); break;
    case GECODE_INT_STATUS(ONE,ZERO,NONE):
      x2.one_none(home); break;
    case GECODE_INT_STATUS(ONE,ZERO,ZERO):
      return ES_FAILED;
    case GECODE_INT_STATUS(ONE,ZERO,ONE):
      break;
    case GECODE_INT_STATUS(ONE,ONE,NONE):
      x2.one_none(home); break;
    case GECODE_INT_STATUS(ONE,ONE,ZERO):
      return ES_FAILED;
    case GECODE_INT_STATUS(ONE,ONE,ONE):
      break;
    default:
      GECODE_NEVER;
    }
    return this->ES_DISPOSED(sizeof(*this));
#undef GECODE_INT_STATUS
  }



  /*
   * N-ary Boolean disjunction propagator (true)
   *
   */

  template<class View>
  forceinline
  NaryOrTrue<View>::NaryOrTrue(Space* home, ViewArray<View>& b)
    : BinaryPropagator<View,PC_INT_VAL>(home,
                                        b[b.size()-2],
                                        b[b.size()-1]), x(b) {
    assert(x.size() > 2);
    x.size(x.size()-2);
  }

  template<class View>
  PropCost
  NaryOrTrue<View>::cost(void) const {
    return cost_lo(x.size(),PC_LINEAR_LO);
  }

  template<class View>
  forceinline
  NaryOrTrue<View>::NaryOrTrue(Space* home, bool share, NaryOrTrue<View>& p)
    : BinaryPropagator<View,PC_INT_VAL>(home,share,p), x(home,p.x.size()) {
    // Eliminate all zeros and all but one ones in original and update
    int n = p.x.size();
    for (int i=n; i--; )
      if (p.x[i].zero()) {
        n--; p.x[i]=p.x[n]; x[i]=x[n];
      } else if (p.x[i].one()) {
        x[i].update(home,share,p.x[i]);
        // Now eliminate all remaining zeros and ones
        while (i--)
          if (p.x[i].zero() || p.x[i].one()) {
            n--; p.x[i]=p.x[n]; x[i]=x[n];
          } else {
            x[i].update(home,share,p.x[i]);
          }
        goto done;
      } else {
        x[i].update(home,share,p.x[i]);
      }
    done:
    x.size(n); p.x.size(n);
  }

  template<class View>
  inline ExecStatus
  NaryOrTrue<View>::post(Space* home, ViewArray<View>& b) {
    for (int i=b.size(); i--; )
      if (b[i].one())
        return ES_OK;
      else if (b[i].zero())
        b.move_lst(i);
    if (b.size() == 0)
      return ES_FAILED;
    b.unique();
     if (b.size() == 1) {
      GECODE_ME_CHECK(b[0].one(home));
    } else if (b.size() == 2) {
       return BinOrTrue<View,View>::post(home,b[0],b[1]);
    } else if (b.size() == 4) {
       return QuadOrTrue<View>::post(home,b[0],b[1],b[2],b[3]);
    } else {
      (void) new (home) NaryOrTrue(home,b);
    }
    return ES_OK;
  }

  template<class View>
  Actor*
  NaryOrTrue<View>::copy(Space* home, bool share) {
    return new (home) NaryOrTrue<View>(home,share,*this);
  }

  template<class View>
  forceinline ExecStatus
  NaryOrTrue<View>::resubscribe(Space* home, View& x0, View x1) {
    if (x0.zero()) {
      int n = x.size();
      for (int i=n; i--; )
        if (x[i].one()) {
          x.size(n);
          return ES_SUBSUMED;
        } else if (x[i].zero()) {
          x[i] = x[--n];
        } else {
          // New unassigned view found
          assert(!x[i].zero() && !x[i].one());
          // Rewrite if there is just one view left
          if (i == 0) {
            View y = x[0];
            x.size(0);
            GECODE_REWRITE((BinOrTrue<View,View>::post(home,x1,y)));
          }
          // Move to x0 and subscribe
          x0=x[i]; x[i]=x[--n]; 
          x.size(n);
          x0.subscribe(home,this,PC_INT_VAL,false);
          return ES_FIX;
        }
      // All views have been assigned!
      x.size(0);
      GECODE_ME_CHECK(x1.one(home));
      return ES_SUBSUMED;
    }
    return ES_FIX;
  }

  template<class View>
  ExecStatus
  NaryOrTrue<View>::propagate(Space* home) {
    if (x0.one() || x1.one())
      return ES_SUBSUMED;
    ExecStatus e = resubscribe(home,x0,x1);
    if (e != ES_FIX)
      return e;
    return resubscribe(home,x1,x0);
  }


  /*
   * N-ary Boolean disjunction propagator
   *
   */

  template<class View>
  forceinline
  NaryOr<View>::NaryOr(Space* home, ViewArray<View>& b, View c)
    : NaryOnePropagator<View,PC_INT_VAL>(home,b,c) {}

  template<class View>
  forceinline
  NaryOr<View>::NaryOr(Space* home, bool share, NaryOr<View>& p)
    : NaryOnePropagator<View,PC_INT_VAL>(home,share,p) {}

  template<class View>
  inline ExecStatus
  NaryOr<View>::post(Space* home, ViewArray<View>& b, View c) {
    if (c.one())
      return NaryOrTrue<View>::post(home,b);
    if (c.zero()) {
      for (int i=b.size(); i--; )
        GECODE_ME_CHECK(b[i].zero(home));
      return ES_OK;
    }
    for (int i=b.size(); i--; )
      if (b[i].one()) {
        GECODE_ME_CHECK(c.one(home));
        return ES_OK;
      } else if (b[i].zero()) {
        b.move_lst(i);
      }
    if (b.size() == 0)
      return ES_FAILED;
    b.unique();
    if (b.size() == 1)
      return Eq<View,View>::post(home,b[0],c);
    if (b.size() == 2)
      return Or<View,View,View>::post(home,b[0],b[1],c);
    (void) new (home) NaryOr(home,b,c);
    return ES_OK;
  }

  template<class View>
  Actor*
  NaryOr<View>::copy(Space* home, bool share) {
    if (x.size() == 1)
      return new (home) Eq<View,View>(home,share,*this,
                                      x[0],y);
    if (x.size() == 2)
      return new (home) Or<View,View,View>(home,share,*this,
                                           x[0],x[1],y);
    return new (home) NaryOr<View>(home,share,*this);
  }

  template<class View>
  ExecStatus
  NaryOr<View>::propagate(Space* home) {
    if (y.zero()) {
      for (int i = x.size(); i--; )
        GECODE_ME_CHECK(x[i].zero(home));
      return ES_SUBSUMED;
    }
    if (y.one())
      GECODE_REWRITE(NaryOrTrue<View>::post(home,x));
    for (int i = x.size(); i--; ) {
      if (x[i].one()) {
        y.one_none(home);
        return ES_SUBSUMED;
      }
      if (x[i].zero())
        x.move_lst(i);
    }
    if (x.size() == 0) {
      y.zero_none(home);
      return ES_SUBSUMED;
    }
    return ES_FIX;
  }


}}}

// STATISTICS: int-prop

