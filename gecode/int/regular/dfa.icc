/* -*- mode: C++; c-basic-offset: 2; indent-tabs-mode: nil -*- */
/*
 *  Main authors:
 *     Christian Schulte <schulte@gecode.org>
 *
 *  Copyright:
 *     Christian Schulte, 2004
 *
 *  Last modified:
 *     $Date$ by $Author$
 *     $Revision$
 *
 *  This file is part of Gecode, the generic constraint
 *  development environment:
 *     http://www.gecode.org
 *
 *  See the file "LICENSE" for information on usage and
 *  redistribution of this file, and for a
 *     DISCLAIMER OF ALL WARRANTIES.
 *
 */

namespace Gecode {

  /**
   * \brief Iterator for transitions (sorted by symbols/values)
   *
   */
  class DFA::Transitions {
  private:
    /// Current transition
    const Transition* c_trans;
    /// End of transitions
    const Transition* e_trans;
  public:
    /// Initialize to transitions of DFA \a d
    Transitions(const DFA& d);
    /// Test whether iterator still at a transition
    bool operator()(void) const;
    /// Move iterator to next transition
    void operator++(void);
    /// Return pointer to transition
    const Transition* transition(void) const;
  };

  namespace Int { namespace Regular {

    /**
     * \brief Data stored for a DFA
     *
     */
    class DFAI : public SharedObject {
    public:
      /// Number of states
      unsigned int n_states;
      /// Number of transitions
      unsigned int n_trans;
      /// First final state
      int          final_fst;
      /// Last final state
      int          final_lst;
      /// The transitions
      DFA::Transition*  trans;
      /// Initialize automation implementation with \nt transitions
      DFAI(unsigned int nt);
      /// Delete automation implemenentation
      ~DFAI(void);
      /// Create a copy
      GECODE_INT_EXPORT DFAI* copy(void);
    };

    forceinline
    DFAI::DFAI(unsigned int nt)
      : trans(reinterpret_cast<DFA::Transition*>
              (Memory::malloc(sizeof(DFA::Transition)*nt))) {}
    
    forceinline
    DFAI::~DFAI(void) {
      Memory::free(trans);
    }
    
  }}

  forceinline
  DFA::DFA(void) {}

  forceinline
  DFA::DFA(int start, Transition t_spec[], int f_spec[], bool minimize) {
    init(start,t_spec,f_spec,minimize);
  }


  forceinline
  DFA::DFA(const DFA& d)
    : SharedHandle(d) {}

  forceinline unsigned int
  DFA::n_states(void) const {
    return object()->n_states;
  }

  forceinline unsigned int
  DFA::n_transitions(void) const {
    return object()->n_trans;
  }

  forceinline int
  DFA::final_fst(void) const {
    return object()->final_fst;
  }

  forceinline int
  DFA::final_lst(void) const {
    return object()->final_lst;
  }

  forceinline int
  DFA::symbol_min(void) const {
    int n = object()->n_trans;
    return (n > 0) ? object()->trans[0].symbol : Limits::Int::int_min;
  }

  forceinline int
  DFA::symbol_max(void) const {
    int n = object()->n_trans;
    return (n > 0) ? object()->trans[n-1].symbol : Limits::Int::int_max;
  }



  /*
   * Iterating over all transitions
   *
   */

  forceinline
  DFA::Transitions::Transitions(const DFA& d)
    : c_trans(&d.object()->trans[0]), 
      e_trans(c_trans+d.object()->n_trans) {}

  forceinline bool
  DFA::Transitions::operator()(void) const {
    return c_trans < e_trans;
  }

  forceinline void
  DFA::Transitions::operator++(void) {
    c_trans++;
  }

  forceinline const DFA::Transition*
  DFA::Transitions::transition(void) const {
    return c_trans;
  }

}


// STATISTICS: int-prop

