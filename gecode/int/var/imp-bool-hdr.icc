/*
 *  CAUTION:
 *    This file has been automatically generated.
 *    Do not edit, edit the file "gecode/int/var-imp-bool.vis" instead.
 *
 *  This file contains generated code fragments which are 
 *  copyrighted as follows:
 *
 *  Main author:
 *     Christian Schulte <schulte@gecode.org>
 *
 *  Copyright:
 *     Christian Schulte, 2006
 *
 *  The generated code fragments are part of Gecode, the generic
 *  constraint development environment:
 *     http://www.gecode.org
 *
 *  See the file "LICENSE" for information on usage and
 *  redistribution of this file, and for a
 *     DISCLAIMER OF ALL WARRANTIES.
 *
 */


namespace Gecode { namespace Int {

  /**
   * \defgroup TaskActorIntMEPC Integer modification events and propagation conditions
   * \ingroup TaskActorInt
   */
  
  //@{
  /// Domain operation has resulted in failure
  const Gecode::ModEvent ME_BOOL_FAILED = Gecode::ME_GEN_FAILED;

  /// Domain operation has not changed domain
  const Gecode::ModEvent ME_BOOL_NONE = Gecode::ME_GEN_NONE;

  /// Domain operation has resulted in a value (assigned variable)


  const Gecode::ModEvent ME_BOOL_VAL = Gecode::ME_GEN_ASSIGNED;

  /**
   * \brief Propagate when a view becomes assigned (single value)
   *
   * If a propagator \a p depends on a view \a x with propagation
   * condition PC_BOOL_VAL, then \a p is propagated when a domain
   * update operation on \a x returns the modification event ME_BOOL_VAL.
   */
  const Gecode::PropCond PC_BOOL_VAL = Gecode::PC_GEN_ASSIGNED;

  /**
   * \brief Propagation condition for advisors.
   *
   * The subscriber must be a advisor, and will be run on all domain changes.
   */
  const Gecode::PropCond PC_BOOL_ADVISOR = Gecode::PC_GEN_ASSIGNED + 1;

  //@}

  /// Modification event difference for Bool-variable implementations
  class BoolMeDiff {
  public:
    /// Return difference when changing modification event \a me2 to \a me1
    ModEvent operator()(ModEvent me1, ModEvent me2) const;
  };

  /// Base-class for Bool-variable implementations
  class BoolVarImpBase : public Gecode::Variable<VTI_BOOL,PC_BOOL_ADVISOR,BoolMeDiff> {
  protected:
    /// Variable procesor for variables of this type
    class Processor : public Gecode::VarTypeProcessor<VTI_BOOL,PC_BOOL_ADVISOR,BoolMeDiff> {
    public:
      /// Process modified variables linked from \a x
      GECODE_INT_EXPORT virtual void process(Space* home, VarBase* x);
    };
    /// The processor used
    GECODE_INT_EXPORT static Processor p;
    /// Constructor for cloning \a x
    BoolVarImpBase(Space* home, bool share, BoolVarImpBase& x);
  public:
    /// Constructor for creating static instance of variable
    BoolVarImpBase(void);
    /// Constructor for creating variable
    BoolVarImpBase(Space* home);
    /// \name Dependencies
    //@{
    /** \brief Subscribe propagator \a p with propagation condition \a pc to variable
     *
     * In case \a process is false, the propagator is just subscribed but
     * not processed for execution (this must be used when creating
     * subscriptions during propagation).
     *
     * In case the variable is assigned (that is, \a assigned is 
     * true), the subscribing propagator is processed for execution.
     * Otherwise, the propagator subscribes and is processed for execution
     * with modification event \a me provided that \a pc is different
     * from \a PC_GEN_ASSIGNED.
     */
    void subscribe(Space* home, SubscriberType p, PropCond pc, bool assigned, bool process);
    /// Notify that variable implementation has been modified with modification event \a me
    void notify(Space* home, ModEvent me);
    //@}
    /// Return the current modification event
    ModEvent modevent(void) const;

  };


  forceinline ModEvent
  BoolMeDiff::operator()(ModEvent me1, ModEvent me2) const {
    return me2^me1;
  }

  forceinline ModEvent
  BoolVarImpBase::modevent(void) const {
    return modified() ? ME_GEN_ASSIGNED : ME_GEN_NONE;
  }


  forceinline
  BoolVarImpBase::BoolVarImpBase(void) {}

  forceinline
  BoolVarImpBase::BoolVarImpBase(Space* home)
    : Gecode::Variable<VTI_BOOL,PC_BOOL_ADVISOR,BoolMeDiff>(home) {}

  forceinline
  BoolVarImpBase::BoolVarImpBase(Space* home, bool share, BoolVarImpBase& x)
    : Gecode::Variable<VTI_BOOL,PC_BOOL_ADVISOR,BoolMeDiff>(home,share,x) {}

  forceinline void
  BoolVarImpBase::subscribe(Space* home, SubscriberType p, PropCond pc, bool assigned, bool process) {
    Gecode::Variable<VTI_BOOL,PC_BOOL_ADVISOR,BoolMeDiff>::subscribe(home,p,pc,assigned,ME_BOOL_VAL,process);
  }

  forceinline void
  BoolVarImpBase::notify(Space* home, ModEvent) {
    Gecode::Variable<VTI_BOOL,PC_BOOL_ADVISOR,BoolMeDiff>::notify(home);
  }

}}

// STATISTICS: int-var
