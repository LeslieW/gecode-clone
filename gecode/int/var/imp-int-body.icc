/*
 *  CAUTION:
 *    This file has been automatically generated.
 *    Do not edit, edit the file "gecode/int/var-imp-int.vis" instead.
 *
 *  This file contains generated code fragments which are 
 *  copyrighted as follows:
 *
 *  Main author:
 *     Christian Schulte <schulte@gecode.org>
 *
 *  Copyright:
 *     Christian Schulte, 2006
 *
 *  The generated code fragments are part of Gecode, the generic
 *  constraint development environment:
 *     http://www.gecode.org
 *
 *  Permission is hereby granted, free of charge, to any person obtaining
 *  a copy of this software and associated documentation files (the
 *  "Software"), to deal in the Software without restriction, including
 *  without limitation the rights to use, copy, modify, merge, publish,
 *  distribute, sublicense, and/or sell copies of the Software, and to
 *  permit persons to whom the Software is furnished to do so, subject to
 *  the following conditions:
 *
 *  The above copyright notice and this permission notice shall be
 *  included in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */


namespace Gecode { namespace Int {



  /*
   * The variable processor for IntVarImpBase
   *
   */

  void
  IntVarImpBase::Processor::process(Space* home, VarBase* _x) {
    // Process modified variables
    Gecode::Variable<VTI_INT,PC_INT_DOM,IntMeDiff>* x = 
      static_cast<Gecode::Variable<VTI_INT,PC_INT_DOM,IntMeDiff>*>(_x);
    do {
      switch (x->modevent()) {
      case ME_INT_VAL:
        x->process(home);
        break;
      case ME_INT_BND:
        // Conditions: BND DOM 
        x->process(home,PC_INT_BND,PC_INT_DOM,ME_INT_BND);
        break;
      case ME_INT_DOM:
        // Conditions: DOM 
        x->process(home,PC_INT_DOM,PC_INT_DOM,ME_INT_DOM);
        break;
      default: GECODE_NEVER;
      }
      x = x->next();
    } while (x != NULL);
  }


  IntVarImpBase::Processor IntVarImpBase::p;


}}

// STATISTICS: int-var
