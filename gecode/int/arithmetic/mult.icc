/* -*- mode: C++; c-basic-offset: 2; indent-tabs-mode: nil -*- */
/*
 *  Main authors:
 *     Christian Schulte <schulte@gecode.org>
 *
 *  Copyright:
 *     Christian Schulte, 2004
 *
 *  Last modified:
 *     $Date$ by $Author$
 *     $Revision$
 *
 *  This file is part of Gecode, the generic constraint
 *  development environment:
 *     http://www.gecode.org
 *
 *  See the file "LICENSE" for information on usage and
 *  redistribution of this file, and for a
 *     DISCLAIMER OF ALL WARRANTIES.
 *
 */

#include <cmath>
#include <climits>

namespace Gecode { namespace Int { namespace Arithmetic {

  /*
   * Arithmetic help functions
   *
   */

  /// Multiply \a x and \a y as type \a Val
  template<class Val>
  Val m(int x, int y);

  template<>
  forceinline double
  m(int x, int y) {
    return static_cast<double>(x)*static_cast<double>(y);
  }

  template<>
  forceinline int
  m(int x, int y) {
    return x*y;
  }

  /// Compute \f$\lceil x/y\rceil\f$ where \a x and \a y are non-negative
  template<class Val>
  int c_d_p(int x, int y);
  /// Compute \f$\lfloor x/y\rfloor\f$ where \a x and \a y are non-negative
  template<class Val>
  int f_d_p(int x, int y);

  template <>
  forceinline int
  c_d_p<int>(int x, int y) {
    assert((x >= 0) && (y >= 0));
    return (x+y-1)/y;
  }
  template <>
  forceinline int
  c_d_p<double>(int x, int y) {
    assert((x >= 0) && (y >= 0));
    return static_cast<int>(ceil(static_cast<double>(x) /
                                 static_cast<double>(y)));
  }
  template <>
  forceinline int
  f_d_p<int>(int x, int y) {
    assert((x >= 0) && (y >= 0));
    return x/y;
  }
  template <>
  forceinline int
  f_d_p<double>(int x, int y) {
    assert((x >= 0) && (y >= 0));
    return static_cast<int>(floor(static_cast<double>(x) /
                                  static_cast<double>(y)));
  }


  /// Compute \f$\lfloor x/y\rfloor\f$
  forceinline int
  f_d(int x, int y) {
    return static_cast<int>(floor(static_cast<double>(x) /
                                  static_cast<double>(y)));
  }

  /// Compute \f$\lceil x/y\rceil\f$
  forceinline int
  c_d(int x, int y) {
    return static_cast<int>(ceil(static_cast<double>(x) /
                                 static_cast<double>(y)));
  }

  /// Test whether \a x is postive
  template <class View>
  forceinline bool
  p(const View& x) {
    return x.min() > 0;
  }
  /// Test whether \a x is negative
  template <class View>
  forceinline bool
  n(const View& x) {
    return x.max() < 0;
  }
  /// Test whether \a x is neither positive nor negative
  template <class View>
  forceinline bool
  x(const View& x) {
    return (x.min() <= 0) && (x.max() >= 0);
  }



  /*
   * Positive bounds-consistent squaring
   *
   */
  template <class VA, class VB>
  forceinline
  SquarePlus<VA,VB>::SquarePlus(Space* home, VA x0, VB x1)
    : MixBinaryPropagator<VA,PC_INT_BND,VB,PC_INT_BND>(home,x0,x1) {}

  template <class VA, class VB>
  forceinline ExecStatus
  SquarePlus<VA,VB>::post(Space* home, VA x0, VB x1) {
    (void) new (home) SquarePlus<VA,VB>(home,x0,x1);
    return ES_OK;
  }

  template <class VA, class VB>
  forceinline
  SquarePlus<VA,VB>::SquarePlus(Space* home, bool share, SquarePlus<VA,VB>& p)
    : MixBinaryPropagator<VA,PC_INT_BND,VB,PC_INT_BND>(home,share,p) {}

  template <class VA, class VB>
  Actor*
  SquarePlus<VA,VB>::copy(Space* home, bool share) {
    return new (home) SquarePlus<VA,VB>(home,share,*this);
  }

  template <class VA, class VB>
  ExecStatus
  SquarePlus<VA,VB>::propagate(Space* home) {
    bool mod;
    do {
      mod = false;
      {
        ModEvent me = x0.lq(home,floor(sqrt(static_cast<double>(x1.max()))));
        if (me_failed(me)) return ES_FAILED;
        mod |= me_modified(me);
      }
      {
        ModEvent me = x0.gq(home,ceil(sqrt(static_cast<double>(x1.min()))));
        if (me_failed(me)) return ES_FAILED;
        mod |= me_modified(me);
      }
      {
        ModEvent me = x1.lq(home,x0.max()*x0.max());
        if (me_failed(me)) return ES_FAILED;
        mod |= me_modified(me);
      }
      {
        ModEvent me = x1.gq(home,x0.min()*x0.min());
        if (me_failed(me)) return ES_FAILED;
        mod |= me_modified(me);
      }
    } while (mod);
    return x0.assigned() ? ES_SUBSUMED(this,sizeof(*this)) : ES_FIX;
  }



  /*
   * Bounds-consistent Square
   *
   */

  template <class View>
  forceinline
  Square<View>::Square(Space* home, View x0, View x1)
    : BinaryPropagator<View,PC_INT_BND>(home,x0,x1) {}

  template <class View>
  forceinline ExecStatus
  Square<View>::post(Space* home, View x0, View x1) {
    GECODE_ME_CHECK(x1.gq(home,0));
    GECODE_ME_CHECK(x0.lq(home,floor(sqrt(static_cast<double>
                                          (Limits::Int::int_max)))));
    GECODE_ME_CHECK(x0.gq(home,-floor(sqrt(static_cast<double>
                                           (-Limits::Int::int_min)))));
    if (x0.min() >= 0)
      return SquarePlus<IntView,IntView>::post(home,x0,x1);
    if (x0.max() <= 0)
      return SquarePlus<MinusView,IntView>::post(home,x0,x1);
    (void) new (home) Square<View>(home,x0,x1);
    return ES_OK;
  }

  template <class View>
  forceinline
  Square<View>::Square(Space* home, bool share, Square<View>& p)
    : BinaryPropagator<View,PC_INT_BND>(home,share,p) {}

  template <class View>
  Actor*
  Square<View>::copy(Space* home, bool share) {
    return new (home) Square<View>(home,share,*this);
  }

  template <class View>
  PropCost
  Square<View>::cost(void) const {
    return PC_BINARY_HI;
  }

  template <class View>
  ExecStatus
  Square<View>::propagate(Space* home) {
    // x0 * x0 = x1
    assert(x1.min() >= 0);
    if (x0.min() >= 0)
      GECODE_REWRITE(this,(SquarePlus<IntView,IntView>::post(home,x0,x1)));
    if (x0.max() <= 0)
      GECODE_REWRITE(this,(SquarePlus<MinusView,IntView>::post(home,x0,x1)));

    GECODE_ME_CHECK(x1.lq(home,std::max(x0.min()*x0.min(),
                                        x0.max()*x0.max())));

    int s = static_cast<int>(floor(sqrt(static_cast<double>(x1.max()))));

    GECODE_ME_CHECK(x0.gq(home,-s));
    GECODE_ME_CHECK(x0.lq(home,s));

    if (x0.assigned() && x1.assigned())
      return (x0.val()*x0.val() == x1.val()) ? 
        ES_SUBSUMED(this,sizeof(*this)) : ES_FAILED;

    return ES_NOFIX;
  }


  /*
   * Positive bounds-consistent multiplication
   *
   */
  template <class Val, class VA, class VB, class VC>
  forceinline
  MultPlus<Val,VA,VB,VC>::MultPlus(Space* home, VA x0, VB x1, VC x2)
    : MixTernaryPropagator<VA,PC_INT_BND,VB,PC_INT_BND,VC,PC_INT_BND>
  (home,x0,x1,x2) {}

  template <class Val, class VA, class VB, class VC>
  forceinline
  MultPlus<Val,VA,VB,VC>::MultPlus(Space* home, bool share, 
                                   MultPlus<Val,VA,VB,VC>& p)
    : MixTernaryPropagator<VA,PC_INT_BND,VB,PC_INT_BND,VC,PC_INT_BND>
  (home,share,p) {}

  template <class Val, class VA, class VB, class VC>
  Actor*
  MultPlus<Val,VA,VB,VC>::copy(Space* home, bool share) {
    return new (home) MultPlus<Val,VA,VB,VC>(home,share,*this);
  }

  template <class Val, class VA, class VB, class VC>
  ExecStatus
  MultPlus<Val,VA,VB,VC>::propagate(Space* home) {
    assert(p(x0) && p(x1) && p(x2));
    bool mod;
    do {
      mod = false;
      {
        ModEvent me = x2.lq(home,m<Val>(x0.max(),x1.max()));
        if (me_failed(me)) return ES_FAILED;
        mod |= me_modified(me);
      }
      {
        ModEvent me = x2.gq(home,m<Val>(x0.min(),x1.min()));
        if (me_failed(me)) return ES_FAILED;
        mod |= me_modified(me);
      }
      {
        ModEvent me = x0.lq(home,f_d_p<Val>(x2.max(),x1.min()));
        if (me_failed(me)) return ES_FAILED;
        mod |= me_modified(me);
      }
      {
        ModEvent me = x0.gq(home,c_d_p<Val>(x2.min(),x1.max()));
        if (me_failed(me)) return ES_FAILED;
        mod |= me_modified(me);
      }
      {
        ModEvent me = x1.lq(home,f_d_p<Val>(x2.max(),x0.min()));
        if (me_failed(me)) return ES_FAILED;
        mod |= me_modified(me);
      }
      {
        ModEvent me = x1.gq(home,c_d_p<Val>(x2.min(),x0.max()));
        if (me_failed(me)) return ES_FAILED;
        mod |= me_modified(me);
      }
    } while (mod);
    return x0.assigned() && x1.assigned() ? 
      ES_SUBSUMED(this,sizeof(*this)) : ES_FIX;
  }

  template <class Val, class VA, class VB, class VC>
  forceinline ExecStatus
  MultPlus<Val,VA,VB,VC>::post(Space* home, VA x0, VB x1, VC x2) {
    GECODE_ME_CHECK(x0.gr(home,0));
    GECODE_ME_CHECK(x1.gr(home,0));
    GECODE_ME_CHECK(x2.gr(home,0));
    double l = static_cast<double>(x0.max()) * static_cast<double>(x1.max());
    if (l > INT_MAX) {
      (void) new (home) MultPlus<double,VA,VB,VC>(home,x0,x1,x2);
    } else {
      (void) new (home) MultPlus<int,VA,VB,VC>(home,x0,x1,x2);
    }
    return ES_OK;
  }



  /*
   * Bounds-consistent multiplication
   *
   */

  template <class View>
  forceinline
  Mult<View>::Mult(Space* home, View x0, View x1, View x2)
    : TernaryPropagator<View,PC_INT_BND>(home,x0,x1,x2) {}

  template <class View>
  forceinline
  Mult<View>::Mult(Space* home, bool share, Mult<View>& p)
    : TernaryPropagator<View,PC_INT_BND>(home,share,p) {}

  template <class View>
  Actor*
  Mult<View>::copy(Space* home, bool share) {
    return new (home) Mult<View>(home,share,*this);
  }

  template <class View>
  PropCost
  Mult<View>::cost(void) const {
    return PC_TERNARY_HI;
  }

  template <class View>
  ExecStatus
  Mult<View>::propagate(Space* home) {
    if (p(x0)) {
      if (p(x1) || p(x2)) goto rewrite_ppp;
      if (n(x1) || n(x2)) goto rewrite_pnn;
      goto prop_pxx;
    }
    if (n(x0)) {
      if (n(x1) || p(x2)) goto rewrite_nnp;
      if (p(x1) || n(x2)) goto rewrite_npn;
      goto prop_nxx;
    }
    if (p(x1)) {
      if (p(x2)) goto rewrite_ppp;
      if (n(x2)) goto rewrite_npn;
      goto prop_xpx;
    }
    if (n(x1)) {
      if (p(x2)) goto rewrite_nnp;
      if (n(x2)) goto rewrite_pnn;
      goto prop_xnx;
    }

    assert(x(x0) && x(x1));
    GECODE_ME_CHECK(x2.lq(home,std::max(m<double>(x0.max(),x1.max()),
                                        m<double>(x0.min(),x1.min()))));
    GECODE_ME_CHECK(x2.gq(home,std::min(m<double>(x0.min(),x1.max()),
                                        m<double>(x0.max(),x1.min()))));

    if (x0.assigned()) {
      assert((x0.val() == 0) && (x2.val() == 0));
      return ES_SUBSUMED(this,home);
    }

    if (x1.assigned()) {
      assert((x1.val() == 0) && (x2.val() == 0));
      return ES_SUBSUMED(this,home);
    }

    return ES_NOFIX;

  prop_xpx:
    std::swap(x0,x1);
  prop_pxx:
    assert(p(x0) && x(x1) && x(x2));

    GECODE_ME_CHECK(x2.lq(home,m<double>(x0.max(),x1.max())));
    GECODE_ME_CHECK(x2.gq(home,m<double>(x0.max(),x1.min())));

    if (p(x2)) goto rewrite_ppp;
    if (n(x2)) goto rewrite_pnn;

    GECODE_ME_CHECK(x1.lq(home,f_d(x2.max(),x0.min())));
    GECODE_ME_CHECK(x1.gq(home,c_d(x2.min(),x0.min())));

    if (x0.assigned() && x1.assigned()) {
      GECODE_ME_CHECK(x2.eq(home,m<double>(x0.val(),x1.val())));
      return ES_SUBSUMED(this,sizeof(*this));
    }

    return ES_NOFIX;

  prop_xnx:
    std::swap(x0,x1);
  prop_nxx:
    assert(n(x0) && x(x1) && x(x2));

    GECODE_ME_CHECK(x2.lq(home,m<double>(x0.min(),x1.min())));
    GECODE_ME_CHECK(x2.gq(home,m<double>(x0.min(),x1.max())));

    if (p(x2)) goto rewrite_nnp;
    if (n(x2)) goto rewrite_npn;

    GECODE_ME_CHECK(x1.lq(home,f_d(x2.min(),x0.max())));
    GECODE_ME_CHECK(x1.gq(home,c_d(x2.max(),x0.max())));

    if (x0.assigned() && x1.assigned()) {
      GECODE_ME_CHECK(x2.eq(home,m<double>(x0.val(),x1.val())));
      return ES_SUBSUMED(this,sizeof(*this));
    }

    return ES_NOFIX;

  rewrite_ppp:
    GECODE_REWRITE(this,(MultPlus<double,IntView,IntView,IntView>
                         ::post(home,x0,x1,x2)));

  rewrite_nnp:
    GECODE_REWRITE(this,(MultPlus<double,MinusView,MinusView,IntView>
                         ::post(home,x0,x1,x2)));

  rewrite_pnn:
    std::swap(x0,x1);
  rewrite_npn:
    GECODE_REWRITE(this,(MultPlus<double,MinusView,IntView,MinusView>
                         ::post(home,x0,x1,x2)));
  }

  template <class View>
  ExecStatus
  Mult<View>::post(Space* home, View x0, View x1, View x2) {
    if (same(x0,x1))
      return Square<View>::post(home,x0,x2);
    if (p(x0)) {
      if (p(x1) || p(x2)) goto post_ppp;
      if (n(x1) || n(x2)) goto post_pnn;
    } else if (n(x0)) {
      if (n(x1) || p(x2)) goto post_nnp;
      if (p(x1) || n(x2)) goto post_npn;
    } else if (p(x1)) {
      if (p(x2)) goto post_ppp;
      if (n(x2)) goto post_npn;
    } else if (n(x1)) {
      if (p(x2)) goto post_nnp;
      if (n(x2)) goto post_pnn;
    }
    (void) new (home) Mult<View>(home,x0,x1,x2);
    return ES_OK;

  post_ppp:
    return MultPlus<double,IntView,IntView,IntView>::post(home,x0,x1,x2);
  post_nnp:
    return MultPlus<double,MinusView,MinusView,IntView>::post(home,x0,x1,x2);
  post_pnn:
    std::swap(x0,x1);
  post_npn:
    return MultPlus<double,MinusView,IntView,MinusView>::post(home,x0,x1,x2);
  }

}}}

// STATISTICS: int-prop

