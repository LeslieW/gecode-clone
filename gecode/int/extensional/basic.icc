/* -*- mode: C++; c-basic-offset: 2; indent-tabs-mode: nil -*- */
/*
 *  Main authors:
 *     Mikael Lagerkvist <lagerkvist@gecode.org>
 *
 *  Copyright:
 *     Mikael Lagerkvist, 2007
 *
 *  Last modified:
 *     $Date$ by $Author$
 *     $Revision$
 *
 *  This file is part of Gecode, the generic constraint
 *  development environment:
 *     http://www.gecode.org
 *
 *  See the file "LICENSE" for information on usage and
 *  redistribution of this file, and for a
 *     DISCLAIMER OF ALL WARRANTIES.
 *
 */

namespace Gecode { namespace Int { namespace Extensional {
  /*
   * The propagator proper
   *
   */

  template <class View>
  forceinline
  Basic<View>::Basic(Space* home, ViewArray<View>& x, const Table& t)
    : Base<View>(home,x,t) {
  }

  template <class View>
  ExecStatus
  Basic<View>::post(Space* home, ViewArray<View>& x, const Table& t) {
    (void) new (home) Basic<View>(home,x,t);
    return ES_OK;
  }

  template <class View>
  forceinline
  Basic<View>::Basic(Space* home, bool share, Basic<View>& p)
    : Base<View>(home,share,p) {
  }

  template <class View>
  PropCost
  Basic<View>::cost(void) const {
    return (View::pme(this) == ME_INT_VAL)
      ? PC_QUADRATIC_HI : PC_CUBIC_HI;
  }

  template <class View>
  Actor*
  Basic<View>::copy(Space* home, bool share) {
    return new (home) Basic<View>(home,share,*this);
  }


  template <class View>
  ExecStatus
  Basic<View>::propagate(Space* home) {
    /// Staging...
#if 0
    if (View::pme(this) == ME_INT_VAL) {
      ExecStatus es = prop_val<View>(home,x);
      GECODE_ES_CHECK(es);
      if (es == ES_FIX)
        return ES_FIX_PARTIAL(this,View::pme(ME_INT_DOM));
      return ES_NOFIX_PARTIAL(this,View::pme(ME_INT_DOM));
    }
#endif
    ///// Domain consistent propagation
    //// Set up datastructures
    /// Bit-sets for amortized O(1) access to domains
    GECODE_AUTOARRAY(Support::BitSet<unsigned long>, dom, x.size());
    init_dom(home, dom);

    /// Bit-sets for processed values.
    GECODE_AUTOARRAY(Support::BitSet<unsigned long>, has_support, x.size());
    for (int i = x.size(); i--; ) has_support[i].init(home, table.tablei->domsize);
 

    /// Values to prune
    GECODE_AUTOARRAY(int,nq, table.tablei->domsize*x.size());
    int n_nq = 0;

    
    ExecStatus es = ES_FIX;

    //// Run algorithm
    /// Check consistency for each variable-value pair
    for (int var = 0; var < x.size(); ++var) {
      ViewRanges<View> vr(x[var]);
      Iter::Ranges::ToValues<ViewRanges<View> > vv(vr);
      while (vv()) {
        // Value offset for indexing
        int val = vv.val() - table.tablei->min;
        if (!has_support[var].get(val)) {
          // Find support for value vv.val() in variable var
          tuple l = find_support(dom, var, val);
          if (l == NULL) {
            // No possible supports left
            nq[n_nq] = vv.val();
            n_nq++;
          } else {
            // Mark values as supported 
            // Only forward direction marking is needed since all
            // previous values have been checked
            for (int i = x.size(); i-- >var; ) {
              has_support[i].set(l[i]- table.tablei->min);
              assert(has_support[i].get(l[i]- table.tablei->min));
            }
#ifndef NDEBUG
            for (int i = var; i-->1; )
              assert(has_support[i].get(l[i]- table.tablei->min));
#endif
          }
        }
        ++vv;
      }

      // Prune values for var which do not have support anymore
      while (n_nq-- > 0) {
        ModEvent me = x[var].nq(home,nq[n_nq]);
        if (me_failed(me))
          return ES_FAILED;
        if (me_modified(me))
          es = ES_NOFIX;
      }
      n_nq = 0;
    }

    for (int i = x.size(); i--; )
      if (!x[i].assigned())
        return es;
    return ES_SUBSUMED(this, home);
  }
}}}
// STATISTICS: int-prop

