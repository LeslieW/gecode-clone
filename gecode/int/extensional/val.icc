/* -*- mode: C++; c-basic-offset: 2; indent-tabs-mode: nil -*- */
/*
 *  Main authors:
 *     Mikael Lagerkvist <lagerkvist@gecode.org>
 *
 *  Copyright:
 *     Mikael Lagerkvist, 2007
 *
 *  Last modified:
 *     $Date$ by $Author$
 *     $Revision$
 *
 *  This file is part of Gecode, the generic constraint
 *  development environment:
 *     http://www.gecode.org
 *
 *  Permission is hereby granted, free of charge, to any person obtaining
 *  a copy of this software and associated documentation files (the
 *  "Software"), to deal in the Software without restriction, including
 *  without limitation the rights to use, copy, modify, merge, publish,
 *  distribute, sublicense, and/or sell copies of the Software, and to
 *  permit persons to whom the Software is furnished to do so, subject to
 *  the following conditions:
 *
 *  The above copyright notice and this permission notice shall be
 *  included in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

namespace Gecode { namespace Int { namespace Extensional {

  /*
   * Eliminating singleton variables
   *
   */
  template <class View>
  ExecStatus
  prop_val(Space* home, ViewArray<View>& x, const Table& t) {
    assert(x.size() > 1);
    int n = x.size();

    GECODE_AUTOARRAY(int, stack, n);
    // c_n is the current number of values on stack
    int c_n = 0;

    // Collect all assigned variables on stack
    for (int i = n; i--; )
      if (x[i].assigned()) {
        stack[c_n++]= i;
      }
    
    return ES_NOFIX;
  }


  /*
   * The propagator proper
   *
   */
  template <class View>
  forceinline
  Val<View>::Val(Space* home, ViewArray<View>& x, const Table& t)
    : NaryPropagator<View,PC_INT_VAL>(home,x), table(t) {}

  template <class View>
  forceinline
  Val<View>::Val(Space* home, bool share, Val<View>& p)
    : NaryPropagator<View,PC_INT_VAL>(home,share,p) {
    table.update(home, share, p.table);
  }
  
  template <class View>
  Actor*
  Val<View>::copy(Space* home, bool share) {
    return new (home) Val<View>(home,share,*this);
  }

  template <class View>
  const char*
  Val<View>::name(void) const {
    return "Int::Extensional::Val";
  }

  template <class View>
  ExecStatus
  Val<View>::propagate(Space* home) {
    GECODE_ES_CHECK((prop_val<View>(home,x,table)));
    for (int i = x.size(); i--; )
      if (!x.assigned())
        return ES_NOFIX;
    return ES_SUBSUMED(this,home);
  }

  template <class View>
  ExecStatus
  Val<View>::post(Space* home, ViewArray<View>& x, const Table& t) {
    (void) new (home) Val<View>(home, x, t);
    return ES_OK;
  }

}}}

// STATISTICS: int-prop

