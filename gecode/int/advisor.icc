/* -*- mode: C++; c-basic-offset: 2; indent-tabs-mode: nil -*- */
/*
 *  Main authors:
 *     Mikael Lagerkvist <lagerkvist@gecode.org>
 *
 *  Copyright:
 *     Mikael Lagerkvist, 2006
 *
 *  Last modified:
 *     $Date$ by $Author$
 *     $Revision$
 *
 *  This file is part of Gecode, the generic constraint
 *  development environment:
 *     http://www.gecode.org
 *
 *  See the file "LICENSE" for information on usage and
 *  redistribution of this file, and for a
 *     DISCLAIMER OF ALL WARRANTIES.
 *
 */

namespace Gecode {

  /**
   * \defgroup TaskAdvisorInt Integer advisors
   *
   * \ingroup TaskAdvisor
   */

  //@{
  /** \brief Advisor for integer variables.
   *
   * Derived classes can override the private \a _propagate method to
   * adapt the behaviour of the Advisor.
   */
  class IntAdvisor : public Advisor {
  public:    
    ExecStatus propagate(Space* home, ModEvent me, int lo, int hi) {
      if (disposed())
        return ES_OK;
      else
        return _propagate(home, me, _mod(lo), _mod(hi));
    }

    IntAdvisor(Space* home, Propagator* p) : Advisor(home,p) {}
    IntAdvisor(Space* home, Propagator* p, bool share, IntAdvisor& d) 
      : Advisor(home, p, share, d) {}
    
    virtual size_t dispose(Space *home) {
      (void) Advisor::dispose(home);
      return sizeof(*this);
    }
  private:
    virtual int _mod(int val);
    virtual ExecStatus _propagate(Space* home, ModEvent me, int lo, int hi) {
      return ES_OK;
    }
  };
  //@}

}

// STATISTICS: int-prop

