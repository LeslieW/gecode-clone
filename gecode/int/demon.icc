/* -*- mode: C++; c-basic-offset: 2; indent-tabs-mode: nil -*- */
/*
 *  Main authors:
 *     Mikael Lagerkvist <lagerkvist@gecode.org>
 *
 *  Copyright:
 *     Mikael Lagerkvist, 2006
 *
 *  Last modified:
 *     $Date: 2006-11-25 19:48:19 +0100 (l√∂r, 25 nov 2006) $ by $Author: schulte $
 *     $Revision: 3996 $
 *
 *  This file is part of Gecode, the generic constraint
 *  development environment:
 *     http://www.gecode.org
 *
 *  See the file "LICENSE" for information on usage and
 *  redistribution of this file, and for a
 *     DISCLAIMER OF ALL WARRANTIES.
 *
 */

namespace Gecode {

  /**
   * \defgroup TaskDemonInt Integer demons
   *
   * \ingroup TaskDemon
   */

  //@{
  /** \brief Demon for integer variables.
   *
   * Derived classes can override the private \a _propagate method to
   * adapt the behaviour of the Demon.
   */
  class IntDemon : public Demon {
  public:    
    ExecStatus propagate(Space* home, ModEvent me, int lo, int hi) {
      if (disposed())
        return ES_OK;
      else
        return _propagate(home, me, _mod(lo), _mod(hi));
    }

    IntDemon(Space* home, Propagator* p) : Demon(home,p) {}
    IntDemon(Space* home, Propagator* p, bool share, IntDemon& d) 
      : Demon(home, p, share, d) {}
    
    virtual size_t dispose(Space *home) {
      (void) Demon::dispose(home);
      return sizeof(*this);
    }
  private:
    virtual int _mod(int val);
    virtual ExecStatus _propagate(Space* home, ModEvent me, int lo, int hi) {
      return ES_OK;
    }
  };
  //@}

}

// STATISTICS: int-prop

