/* -*- mode: C++; c-basic-offset: 2; indent-tabs-mode: nil -*- */
/*
 *  Main authors:
 *     Christian Schulte <schulte@gecode.org>
 *
 *  Copyright:
 *     Christian Schulte, 2002
 *
 *  Last modified:
 *     $Date$ by $Author$
 *     $Revision$
 *
 *  This file is part of Gecode, the generic constraint
 *  development environment:
 *     http://www.gecode.org
 *
 *  Permission is hereby granted, free of charge, to any person obtaining
 *  a copy of this software and associated documentation files (the
 *  "Software"), to deal in the Software without restriction, including
 *  without limitation the rights to use, copy, modify, merge, publish,
 *  distribute, sublicense, and/or sell copies of the Software, and to
 *  permit persons to whom the Software is furnished to do so, subject to
 *  the following conditions:
 *
 *  The above copyright notice and this permission notice shall be
 *  included in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

namespace Gecode { namespace Int { namespace Branch {

  // Select variable with smallest min
  template<class View>
  forceinline
  ByMinMin<View>::ByMinMin(void) {}
  template<class View>
  forceinline
  ByMinMin<View>::ByMinMin(Space* home, const VarBranchOptions& vbo)
    : ViewSelBase<View>(home,vbo) {}
  template<class View>
  forceinline ViewSelStatus
  ByMinMin<View>::init(const Space*, View x) {
    min = x.min();
    return VSS_BETTER;
  }
  template<class View>
  forceinline ViewSelStatus
  ByMinMin<View>::select(const Space*, View x) {
    if (x.min() < min) {
      min = x.min(); return VSS_BETTER;
    } else if (x.min() > min) {
      return VSS_WORSE;
    } else {
      return VSS_TIE;
    }
  }
  template<class View>
  inline Support::Symbol
  ByMinMin<View>::type(void) {
    return Support::Symbol("Gecode::Int::Branch::ByMinMin");
  }

  // Select variable with smallest max
  template<class View>
  forceinline
  ByMaxMin<View>::ByMaxMin(void) {}
  template<class View>
  forceinline
  ByMaxMin<View>::ByMaxMin(Space* home, const VarBranchOptions& vbo)
    : ViewSelBase<View>(home,vbo) {}
  template<class View>
  forceinline ViewSelStatus
  ByMaxMin<View>::init(const Space*, View x) {
    max = x.max();
    return VSS_BETTER;
  }
  template<class View>
  forceinline ViewSelStatus
  ByMaxMin<View>::select(const Space*, View x) {
    if (x.max() < max) {
      max = x.max(); return VSS_BETTER;
    } else if (x.max() > max) {
      return VSS_WORSE;
    } else {
      return VSS_TIE;
    }
  }
  template<class View>
  inline Support::Symbol
  ByMaxMin<View>::type(void) {
    return Support::Symbol("Gecode::Int::Branch::ByMaxMin");
  }

  // Select variable with smallest size
  template<class View>
  forceinline
  BySizeMin<View>::BySizeMin(void) {}
  template<class View>
  forceinline
  BySizeMin<View>::BySizeMin(Space* home, const VarBranchOptions& vbo)
    : ViewSelBase<View>(home,vbo) {}
  template<class View>
  forceinline ViewSelStatus
  BySizeMin<View>::init(const Space*, View x) {
    size = x.size();
    return (size == 2) ? VSS_BEST : VSS_BETTER;
  }
  template<class View>
  forceinline ViewSelStatus
  BySizeMin<View>::select(const Space*, View x) {
    if (x.size() < size) {
      size = x.size();
      return (size == 2) ? VSS_BEST : VSS_BETTER;
    } else if (x.size() > size) {
      return VSS_WORSE;
    } else {
      return VSS_TIE;
    }
  }
  template<class View>
  inline Support::Symbol
  BySizeMin<View>::type(void) {
    return Support::Symbol("Gecode::Int::Branch::BySizeMin");
  }

  // Select variable with smallest size/degree
  template<class View>
  forceinline
  BySizeDegreeMin<View>::BySizeDegreeMin(void) {}
  template<class View>
  forceinline
  BySizeDegreeMin<View>::BySizeDegreeMin(Space* home, 
                                         const VarBranchOptions& vbo)
    : ViewSelBase<View>(home,vbo) {}
  template<class View>
  forceinline ViewSelStatus
  BySizeDegreeMin<View>::init(const Space*, View x) {
    sizedegree = 
      static_cast<double>(x.size())/static_cast<double>(x.degree());
    return VSS_BETTER;
  }
  template<class View>
  forceinline ViewSelStatus
  BySizeDegreeMin<View>::select(const Space*, View x) {
    double sd = 
      static_cast<double>(x.size())/static_cast<double>(x.degree());
    if (sd < sizedegree) {
      sizedegree = sd; return VSS_BETTER;
    } else if (sd < sizedegree) {
      return VSS_WORSE;
    } else {
      return VSS_TIE;
    }
  }
  template<class View>
  inline Support::Symbol
  BySizeDegreeMin<View>::type(void) {
    return Support::Symbol("Gecode::Int::Branch::BySizeDegreeMin");
  }

  // Select variable with smallest min-regret
  template<class View>
  forceinline
  ByRegretMinMin<View>::ByRegretMinMin(void) {}
  template<class View>
  forceinline
  ByRegretMinMin<View>::ByRegretMinMin(Space* home, 
                                       const VarBranchOptions& vbo)
    : ViewSelBase<View>(home,vbo) {}
  template<class View>
  forceinline ViewSelStatus
  ByRegretMinMin<View>::init(const Space*, View x) {
    regret = x.regret_min();
    return (regret == 1) ? VSS_BEST : VSS_BETTER;
  }
  template<class View>
  forceinline ViewSelStatus
  ByRegretMinMin<View>::select(const Space*, View x) {
    if (x.regret_min() < regret) {
      regret = x.regret_min();
      return (regret == 1) ? VSS_BEST : VSS_BETTER;
    } else if (x.regret_min() > regret) {
      return VSS_WORSE;
    } else {
      return VSS_TIE;
    }
  }
  template<class View>
  inline Support::Symbol
  ByRegretMinMin<View>::type(void) {
    return Support::Symbol("Gecode::Int::Branch::ByRegretMinMin");
  }

  // Select variable with smallest max-regret
  template<class View>
  forceinline
  ByRegretMaxMin<View>::ByRegretMaxMin(void) {}
  template<class View>
  forceinline
  ByRegretMaxMin<View>::ByRegretMaxMin(Space* home, 
                                       const VarBranchOptions& vbo)
    : ViewSelBase<View>(home,vbo) {}
  template<class View>
  forceinline ViewSelStatus
  ByRegretMaxMin<View>::init(const Space*, View x) {
    regret = x.regret_max();
    return (regret == 1) ? VSS_BEST : VSS_BETTER;
  }
  template<class View>
  forceinline ViewSelStatus
  ByRegretMaxMin<View>::select(const Space*, View x) {
    if (x.regret_max() < regret) {
      regret = x.regret_max();
      return (regret == 1) ? VSS_BEST : VSS_BETTER;
    } else if (x.regret_max() > regret) {
      return VSS_WORSE;
    } else {
      return VSS_TIE;
    }
  }
  template<class View>
  inline Support::Symbol
  ByRegretMaxMin<View>::type(void) {
    return Support::Symbol("Gecode::Int::Branch::ByRegretMaxMin");
  }

}}}

// STATISTICS: int-branch
