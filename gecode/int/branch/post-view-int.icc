/* -*- mode: C++; c-basic-offset: 2; indent-tabs-mode: nil -*- */
/*
 *  Main authors:
 *     Christian Schulte <schulte@gecode.org>
 *
 *  Copyright:
 *     Christian Schulte, 2008
 *
 *  Last modified:
 *     $Date$ by $Author$
 *     $Revision$
 *
 *  This file is part of Gecode, the generic constraint
 *  development environment:
 *     http://www.gecode.org
 *
 *  Permission is hereby granted, free of charge, to any person obtaining
 *  a copy of this software and associated documentation files (the
 *  "Software"), to deal in the Software without restriction, including
 *  without limitation the rights to use, copy, modify, merge, publish,
 *  distribute, sublicense, and/or sell copies of the Software, and to
 *  permit persons to whom the Software is furnished to do so, subject to
 *  the following conditions:
 *
 *  The above copyright notice and this permission notice shall be
 *  included in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

namespace Gecode { namespace Int { namespace Branch {

  inline void
  post(Space* home, const IntVarArgs& x,
       IntVarBranch vars, IntValBranch vals) {
    if (home->failed()) return;
    ViewArray<IntView> xv(home,x);
    switch (vars) {
    case INT_VAR_NONE:
      post<ViewSelByNone<IntView> >(home,xv,vals); 
      break;
    case INT_VAR_MIN_MIN:
      post<ByMinMin<IntView> >(home,xv,vals); 
      break;
    case INT_VAR_MIN_MAX:
      post<ByMinMax<IntView> >(home,xv,vals); 
      break;
    case INT_VAR_MAX_MIN:
      post<ByMaxMin<IntView> >(home,xv,vals); 
      break;
    case INT_VAR_MAX_MAX:
      post<ByMaxMax<IntView> >(home,xv,vals); 
      break;
    case INT_VAR_SIZE_MIN:
      post<BySizeMin<IntView> >(home,xv,vals); 
      break;
    case INT_VAR_SIZE_MAX:
      post<BySizeMax<IntView> >(home,xv,vals); 
      break;
    case INT_VAR_DEGREE_MIN:
      post<ViewSelByDegreeMin<IntView> >(home,xv,vals); 
      break;
    case INT_VAR_DEGREE_MAX:
      post<ViewSelByDegreeMax<IntView> >(home,xv,vals); 
      break;
    case INT_VAR_SIZE_DEGREE_MIN:
      post<BySizeDegreeMin<IntView> >(home,xv,vals); 
      break;
    case INT_VAR_SIZE_DEGREE_MAX:
      post<BySizeDegreeMax<IntView> >(home,xv,vals); 
      break;
    case INT_VAR_REGRET_MIN_MIN:
      post<ByRegretMinMin<IntView> >(home,xv,vals); 
      break;
    case INT_VAR_REGRET_MIN_MAX:
      post<ByRegretMinMax<IntView> >(home,xv,vals); 
      break;
    case INT_VAR_REGRET_MAX_MIN:
      post<ByRegretMaxMin<IntView> >(home,xv,vals); 
      break;
    case INT_VAR_REGRET_MAX_MAX:
      post<ByRegretMaxMax<IntView> >(home,xv,vals); 
      break;
    default:
      throw UnknownBranching("Int::branch");
    }
  }
      
}}}

// STATISTICS: int-post
