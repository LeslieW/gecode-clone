/* -*- mode: C++; c-basic-offset: 2; indent-tabs-mode: nil -*- */
/*
 *  Main authors:
 *     Christian Schulte <schulte@gecode.org>
 *
 *  Copyright:
 *     Christian Schulte, 2002
 *
 *  Last modified:
 *     $Date$ by $Author$
 *     $Revision$
 *
 *  This file is part of Gecode, the generic constraint
 *  development environment:
 *     http://www.gecode.org
 *
 *  Permission is hereby granted, free of charge, to any person obtaining
 *  a copy of this software and associated documentation files (the
 *  "Software"), to deal in the Software without restriction, including
 *  without limitation the rights to use, copy, modify, merge, publish,
 *  distribute, sublicense, and/or sell copies of the Software, and to
 *  permit persons to whom the Software is furnished to do so, subject to
 *  the following conditions:
 *
 *  The above copyright notice and this permission notice shall be
 *  included in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

namespace Gecode { namespace Int { namespace Branch {

  template<class View>
  forceinline int
  ValMin<View>::val(const Space*, View x) const {
    return x.min();
  }
  template<class View>
  forceinline ModEvent
  ValMin<View>::tell(Space* home, unsigned int a, View x, int n) {
    return (a == 0) ? x.eq(home,n) : x.gr(home,n);
  }
  template<class View>
  inline Support::Symbol
  ValMin<View>::type(void) {
    return Support::Symbol("Gecode::Int::Branch::ValMin");
  }

  template<class View>
  forceinline int
  ValMed<View>::val(const Space*, View x) const {
    return x.med();
  }
  template<class View>
  forceinline ModEvent
  ValMed<View>::tell(Space* home, unsigned int a, View x, int n) {
    return (a == 0) ? x.eq(home,n) : x.nq(home,n);
  }
  template<class View>
  inline Support::Symbol
  ValMed<View>::type(void) {
    return Support::Symbol("Gecode::Int::Branch::ValMed");
  }

  template<class View>
  forceinline int
  ValMax<View>::val(const Space*, View x) const {
    return x.max();
  }
  template<class View>
  forceinline ModEvent
  ValMax<View>::tell(Space* home, unsigned int a, View x, int n) {
    return (a == 0) ? x.eq(home,n) : x.le(home,n);
  }
  template<class View>
  inline Support::Symbol
  ValMax<View>::type(void) {
    return Support::Symbol("Gecode::Int::Branch::ValMax");
  }

  template<class View>
  forceinline int
  ValSplitMin<View>::val(const Space*, View x) const {
    return (x.width() == 2) ? x.min() : ((x.min()+x.max()) / 2);
  }
  template<class View>
  forceinline ModEvent
  ValSplitMin<View>::tell(Space* home, unsigned int a, View x, int n) {
    return (a == 0) ? x.lq(home,n) : x.gr(home,n);
  }
  template<class View>
  inline Support::Symbol
  ValSplitMin<View>::type(void) {
    return Support::Symbol("Gecode::Int::Branch::ValSplitMin");
  }

  template<class View>
  forceinline int
  ValSplitMax<View>::val(const Space*, View x) const {
    return (x.width() == 2) ? x.min() : ((x.min()+x.max()) / 2);
  }
  template<class View>
  forceinline ModEvent
  ValSplitMax<View>::tell(Space* home, unsigned int a, View x, int n) {
    return (a == 0) ? x.gr(home,n) : x.lq(home,n);
  }
  template<class View>
  inline Support::Symbol
  ValSplitMax<View>::type(void) {
    return Support::Symbol("Gecode::Int::Branch::ValSplitMax");
  }

  template<template <class,class> class ViewValBranching, class SelView>
  void
  create(Space* home, ViewArray<IntView>& x, IntValBranch vals) {
    switch (vals) {
    case INT_VAL_MIN:
      (void) new (home) 
        ViewValBranching<SelView,ValMin<IntView> >(home,x);
      break;
    case INT_VAL_MED:
      (void) new (home) 
        ViewValBranching<SelView,ValMed<IntView> >(home,x);
      break;
    case INT_VAL_MAX:
      (void) new (home) 
        ViewValBranching<SelView,ValMax<IntView> >(home,x);
      break;
    case INT_VAL_SPLIT_MIN:
      (void) new (home)
        ViewValBranching<SelView,ValSplitMin<IntView> >(home,x);
      break;
    case INT_VAL_SPLIT_MAX:
      (void) new (home)
        ViewValBranching<SelView,ValSplitMax<IntView> >(home,x);
      break;
    default:
      throw UnknownBranching("Int::branch");
    }
  }

  inline Support::Symbol
  NoValue::type(void) {
    return Support::Symbol("Gecode::Int::Branch::NoValue");
  }

  inline
  NoValue::operator int(void) {
    return 0;
  }

  template<class View>
  forceinline NoValue
  ValZeroOne<View>::val(const Space*, View) const {
    NoValue n; return n;
  }
  template<class View>
  forceinline ModEvent
  ValZeroOne<View>::tell(Space* home, unsigned int a, View x, NoValue) {
    return (a == 0) ? x.zero(home) : x.one(home);
  }
  template<class View>
  inline Support::Symbol
  ValZeroOne<View>::type(void) {
    return Support::Symbol("Gecode::Int::Branch::ValZeroOne");
  }


  template<class View>
  forceinline NoValue
  ValOneZero<View>::val(const Space*, View) const {
    NoValue n; return n;
  }
  template<class View>
  forceinline ModEvent
  ValOneZero<View>::tell(Space* home, unsigned int a, View x, NoValue) {
    return (a == 0) ? x.one(home) : x.zero(home);
  }
  template<class View>
  inline Support::Symbol
  ValOneZero<View>::type(void) {
    return Support::Symbol("Gecode::Int::Branch::ValOneZero");
  }

}}}


// STATISTICS: int-branch

