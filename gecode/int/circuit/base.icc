/* -*- mode: C++; c-basic-offset: 2; indent-tabs-mode: nil -*- */
/*
 *  Main authors:
 *     Christian Schulte <schulte@gecode.org>
 *
 *  Copyright:
 *     Christian Schulte, 2007
 *
 *  Last modified:
 *     $Date$ by $Author$
 *     $Revision$
 *
 *  This file is part of Gecode, the generic constraint
 *  development environment:
 *     http://www.gecode.org
 *
 *  See the file "LICENSE" for information on usage and
 *  redistribution of this file, and for a
 *     DISCLAIMER OF ALL WARRANTIES.
 *
 */

namespace Gecode { namespace Int { namespace Circuit {

  template <class View>
  forceinline
  Base<View>::Base(Space* home, ViewArray<View>& x)
    : NaryPropagator<View,PC_INT_DOM>(home,x), y(home,x) {}

  template <class View>
  forceinline
  Base<View>::Base(Space* home, bool share, Base<View>& p)
    : NaryPropagator<View,PC_INT_DOM>(home,share,p) {
    y.update(home,share,p.y);
  }

  /// Information required for non-recursive checking for a single scc
  template <class View>
  class SsccInfo {
  public:
    int min, low, pre;
    ViewValues<View> v;
  };

  template <class View>
  bool 
  Base<View>::connected(void) const {
    int n   = x.size();
    /// Information needed for checking scc's
    GECODE_AUTOARRAY(SsccInfo<View>,si,n);
    for (int i=n; i--; )
      si[i].pre=-1;
    // Stack to remember which nodes have not been processed completely
    GECODE_AUTOSTACK(int,-1,next,n);

    // Check whether there is a single strongly connected component.
    // This is a downstripped version of Tarjan's algorithm as
    // the computation of sccs proper is not needed.

    // Start always at node 0
    int i = 0;
    int cnt = 0;
  start:
    si[i].min = si[i].pre = si[i].low = cnt++;
    si[i].v.init(x[i]);
    do {
      if (si[si[i].v.val()].pre < 0) {
        next.push(i);
        i=si[i].v.val();
        goto start;
      }
    cont:
      if (si[si[i].v.val()].low < si[i].min)
        si[i].min = si[si[i].v.val()].low;
      ++si[i].v;
    } while (si[i].v());
    if (si[i].min < si[i].low) {
      si[i].low = si[i].min;
    } else if (i != 0) {
      // If it is not the first node visited, there is more than one SCC
      return false;
    }
    if (!next.empty()) {
      i=next.pop(); goto cont;
    }
    return cnt == n;
  }

  template <class View>
  ExecStatus
  Base<View>::path(Space* home) {
    // Prunes that partial assigned paths are not completed to cycles

    int n=x.size();

    // The path starting at assigned x[i] ends at x[end[j]] which is
    // not assigned.
    GECODE_AUTOARRAY(int,end,n);
    for (int i=n; i--; )
      end[i]=-1;

    // A stack that records all indices i such that end[i] != -1
    GECODE_AUTOSTACK(int,-1,tell,n);

    for (int i=y.size(); i--; ) {
      assert(!y[i].assigned());
      // Non-assigned views serve as starting points for assigned paths
      ViewValues<View> v(y[i]);
      // Try all connected values
      do {
        int j0=v.val();
        // Starting point for not yet followed assigned path found
        if (x[j0].assigned() && (end[j0] < 0)) {
          // Follow assigned path until non-assigned view:
          // all assigned view on the paths can be skipped, as
          // if x[i] is assigned to j, then x[j] will only have
          // x[i] as predecessor due to propagating distinct.
          int j = j0;
          do {
            j=x[j].val();
          } while (x[j].assigned());
          // Now there cannot be a cycle from x[j] to x[v.val()]!
          // However, the tell cannot be done here as j might be
          // equal to i and might hence kill the iterator v!
          end[j0]=j; tell.push(j0);
        }
        ++v;
      } while (v());
    }

    // Now do the tells based on the end information
    ExecStatus es = ES_FIX;
    while (!tell.empty()) {
      int i = tell.pop();
      assert(end[i] >= 0);
      ModEvent me = x[end[i]].nq(home,i);
      if (me_failed(me))
        return ES_FAILED;
      if (me_modified(me))
        es = ES_NOFIX;
    }
    return es;
  }

  template <class View>
  forceinline size_t
  Base<View>::dispose(Space* home) {
    (void) NaryPropagator<View,PC_INT_DOM>::dispose(home);
    return sizeof(*this);
  }

}}}

// STATISTICS: int-prop

