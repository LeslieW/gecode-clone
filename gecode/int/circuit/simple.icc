/* -*- mode: C++; c-basic-offset: 2; indent-tabs-mode: nil -*- */
/*
 *  Main authors:
 *     Christian Schulte <schulte@gecode.org>
 *
 *  Copyright:
 *     Christian Schulte, 2007
 *
 *  Last modified:
 *     $Date: 2007-02-13 20:47:50 +0100 (Tue, 13 Feb 2007) $ by $Author: schulte $
 *     $Revision: 4148 $
 *
 *  This file is part of Gecode, the generic constraint
 *  development environment:
 *     http://www.gecode.org
 *
 *  See the file "LICENSE" for information on usage and
 *  redistribution of this file, and for a
 *     DISCLAIMER OF ALL WARRANTIES.
 *
 */

namespace Gecode { namespace Int { namespace Circuit {

  /*
   * The actual propagator
   *
   */
  template <class View>
  forceinline
  Simple<View>::Simple(Space* home, ViewArray<View>& x)
    : NaryPropagator<View,PC_INT_DOM>(home,x), y(home,x) {}

  template <class View>
  forceinline
  Simple<View>::Simple(Space* home, bool share, Simple<View>& p)
    : NaryPropagator<View,PC_INT_DOM>(home,share,p) {
    y.update(home,share,p.y);
  }

  template <class View>
  forceinline size_t
  Simple<View>::dispose(Space* home) {
    dc.dispose();
    (void) NaryPropagator<View,PC_INT_DOM>::dispose(home);
    return sizeof(*this);
  }

  template <class View>
  Actor*
  Simple<View>::copy(Space* home, bool share) {
    return new (home) Simple<View>(home,share,*this);
  }

  template <class View>
  PropCost
  Simple<View>::cost(void) const {
    return (View::pme(this) == ME_INT_VAL) ? PC_LINEAR_HI : PC_QUADRATIC_HI;
  }

  template <class View>
  bool 
  Simple<View>::connected(void) const {
    // Just a mock up, SCC comes later
    int n = x.size();
    for (int i=n; i--; )
      for (int j=n; j--; ) {
        // Check whether there is a path from i to j
        GECODE_AUTOARRAY(bool,visited,n);
        for (int k=n; k--; )
          visited[k]=false;
        GECODE_AUTOSTACK(int,-1,s,n);
        s.push(i);
        while (!s.empty()) {
          int v = s.pop();
          ViewValues<View> w(x[v]);
          while (w()) {
            if (w.val() == j)
              goto done;
            if (!visited[w.val()]) {
              visited[w.val()] = true;
              s.push(w.val());
            }
            ++w;
          }
        }
        return false;
      done: ;
      }
    return true;
  }

  template <class View>
  ExecStatus
  Simple<View>::propagate(Space* home) {
    if (View::pme(this) == ME_INT_VAL) {
      ExecStatus es = Distinct::prop_val<View,false>(home,y);
      GECODE_ES_CHECK(es);
      if (es == ES_FIX) {
        if (!connected())
          return ES_FAILED;
        if (y.size() < 2)
          return ES_SUBSUMED(this,home);
        return ES_FIX_PARTIAL(this,View::pme(ME_INT_DOM));
      }
      es = Distinct::prop_bnd<View>(home,x);
      GECODE_ES_CHECK(es);
      es = Distinct::prop_val<View,true>(home,y);
      GECODE_ES_CHECK(es);
      if (!connected())
        return ES_FAILED;
      if (y.size() < 2)
        return ES_SUBSUMED(this,home);
      return ES_FIX_PARTIAL(this,View::pme(ME_INT_DOM));
    }

    if (dc.available()) {
      GECODE_ES_CHECK(dc.sync());
    } else {
      GECODE_ES_CHECK(dc.init(home,y.size(),&y[0]));
    }
    dc.propagate(home);

    if (!connected())
      return ES_FAILED;
    return ES_FIX;
  }

  template <class View>
  ExecStatus
  Simple<View>::post(Space* home, ViewArray<View>& x) {
    int n = x.size();
    if (n == 1) {
      GECODE_ME_CHECK(x[0].eq(home,0));
    } else if (n == 2) {
      GECODE_ME_CHECK(x[0].eq(home,1));
      GECODE_ME_CHECK(x[1].eq(home,0));
    } else {
      for (int i=n; i--; ) {
        GECODE_ME_CHECK(x[i].gq(home,0));
        GECODE_ME_CHECK(x[i].le(home,n));
        GECODE_ME_CHECK(x[i].nq(home,i));
      }
      (void) new (home) Simple<View>(home,x);
    }
    return ES_OK;
  }

}}}

// STATISTICS: int-prop

