/* -*- mode: C++; c-basic-offset: 2; indent-tabs-mode: nil -*- */
/*
 *  Main authors:
 *     Christian Schulte <schulte@gecode.org>
 *
 *  Copyright:
 *     Christian Schulte, 2007
 *
 *  Last modified:
 *     $Date: 2007-02-13 20:47:50 +0100 (Tue, 13 Feb 2007) $ by $Author: schulte $
 *     $Revision: 4148 $
 *
 *  This file is part of Gecode, the generic constraint
 *  development environment:
 *     http://www.gecode.org
 *
 *  See the file "LICENSE" for information on usage and
 *  redistribution of this file, and for a
 *     DISCLAIMER OF ALL WARRANTIES.
 *
 */

#include "gecode/support/sentinel-stack.hh"

namespace Gecode { namespace Int { namespace Circuit {

  /*
   * The actual propagator
   *
   */
  template <class View>
  forceinline
  Simple<View>::Simple(Space* home, ViewArray<View>& x)
    : NaryPropagator<View,PC_INT_DOM>(home,x), y(home,x) {}

  template <class View>
  forceinline
  Simple<View>::Simple(Space* home, bool share, Simple<View>& p)
    : NaryPropagator<View,PC_INT_DOM>(home,share,p) {
    y.update(home,share,p.y);
  }

  template <class View>
  forceinline size_t
  Simple<View>::dispose(Space* home) {
    dc.dispose();
    (void) NaryPropagator<View,PC_INT_DOM>::dispose(home);
    return sizeof(*this);
  }

  template <class View>
  Actor*
  Simple<View>::copy(Space* home, bool share) {
    return new (home) Simple<View>(home,share,*this);
  }

  template <class View>
  PropCost
  Simple<View>::cost(void) const {
    return (View::pme(this) == ME_INT_VAL) ? PC_LINEAR_HI : PC_QUADRATIC_HI;
  }

  class SccInfo {
  public:
    int low, sc, pre;
  };

  template <class View>
  void
  Simple<View>::scc(SccInfo* si, int &cnt0, int &cnt1, 
                    Support::SentinelStack<int>& s, int i) const {
    int min = si[i].pre = si[i].low = cnt0++;
    s.push(i);
    ViewValues<View> v(x[i]);
    while (v()) {
      if (si[v.val()].pre < 0)
        scc(si,cnt0,cnt1,s,v.val());
      if (si[v.val()].low < min)
        min = si[v.val()].low;
      ++v;
    }
    if (min < si[i].low) {
      si[i].low = min;
      return;
    }
    do {
      int j=s.pop();
      si[j].sc=cnt1; si[j].low = INT_MAX;
    } while (s.last() != i);
    cnt1++;
  }

  template <class View>
  bool 
  Simple<View>::connected(void) const {
    int n = x.size();
    int cnt0=0;
    int cnt1=0;
    GECODE_AUTOARRAY(SccInfo,si,n);
    GECODE_AUTOSTACK(int,-1,s,n);
    for (int i=n; i--; )
      si[i].pre=-1;
    for (int i=n; i--; )
      if (si[i].pre < 0)
        scc(si,cnt0,cnt1,s,i);
    if (cnt1 > 1)
      return false;
    return true;
    /*
    // Just a mock up, SCC comes later
    int n = x.size();
    GECODE_AUTOARRAY(bool,visited,n);
    GECODE_AUTOARRAY(int,_stack,n+1);
    for (int i=n; i--; )
      for (int j=n; j--; ) {
        // Check whether there is a path from i to j
        for (int k=n; k--; )
          visited[k]=false;
        Support::SentinelStack<int> s(_stack,-1);
        s.push(i);
        visited[i] = true;
        while (!s.empty()) {
          int v = s.pop();
          ViewValues<View> w(x[v]);
          while (w()) {
            if (w.val() == j)
              goto done;
            if (!visited[w.val()]) {
              visited[w.val()] = true;
              s.push(w.val());
            }
            ++w;
          }
        }
        return false;
      done: ;
      }
    return true;
    */
  }

  template <class View>
  ExecStatus
  Simple<View>::propagate(Space* home) {
    if (View::pme(this) == ME_INT_VAL) {
      ExecStatus es = Distinct::prop_val<View,false>(home,y);
      GECODE_ES_CHECK(es);
      if (es == ES_FIX) {
        if (!connected())
          return ES_FAILED;
        if (y.size() < 2)
          return ES_SUBSUMED(this,home);
        return ES_FIX_PARTIAL(this,View::pme(ME_INT_DOM));
      }
      es = Distinct::prop_bnd<View>(home,x);
      GECODE_ES_CHECK(es);
      es = Distinct::prop_val<View,true>(home,y);
      GECODE_ES_CHECK(es);
      if (!connected())
        return ES_FAILED;
      if (y.size() < 2)
        return ES_SUBSUMED(this,home);
      return ES_FIX_PARTIAL(this,View::pme(ME_INT_DOM));
    }

    if (dc.available()) {
      GECODE_ES_CHECK(dc.sync());
    } else {
      GECODE_ES_CHECK(dc.init(home,y.size(),&y[0]));
    }
    bool assigned = dc.propagate(home);

    if (!connected())
      return ES_FAILED;

    // Elminiate assigned views from y, as they have been assigned
    // and propagated by domain consistent propagation. This is required
    // as we need to know how many assigned views actually exist.
    if (assigned)
      for (int i=y.size(); i--; )
        if (y[i].assigned())
          y.move_lst(i);

    ExecStatus es = ES_FIX;
    {
      // Prunes that partial assigned paths are not completed to cycles
      int n=x.size();
      // How many views are known to be assigned
      int a=n-y.size();
      // The path starting at assigned x[i] ends at x[end[j]] which is
      // not assigned.
      GECODE_AUTOARRAY(int,end,n);
      for (int i=n; i--; )
        end[i]=-1;
      for (int i=n; i--; )
        if (!x[i].assigned()) {
          // Non-assigned views serve as starting points for assigned paths
          ViewValues<View> v(x[i]);
          // Try all connected values
          while (v()) {
            int j=v.val();
            // Starting point for assigned path found
            if (x[j].assigned() && (end[j] < 0)) {
              // Follow assigned path until non-assigned view:
              // all assigned view on the paths can be skipped, as
              // if x[i] is assigned to j, then x[j] will only have
              // x[i] as predecessor due to propagating distinct.
              do {
                j=x[j].val(); a--;
              } while (x[j].assigned());
              // Now there cannot be a cycle from x[j] to x[v.val()]!
              // However, the tell cannot be done here as j might be
              // equal to i and might hence kill the iterator v!
              end[v.val()] = j;
            }
            // Check whether there is a chance to find more assigned paths
            if (a == 0)
              goto done;
            ++v;
          }
        }
    done:
      // Now do the tells based on the end information
      for (int i=n; i--; ) 
        if (end[i] >= 0) {
          ModEvent me = x[end[i]].nq(home,i);
          if (me_failed(me))
            return ES_FAILED;
          if (me_modified(me))
            es = ES_NOFIX;
        }
    }

    return es;
  }

  template <class View>
  ExecStatus
  Simple<View>::post(Space* home, ViewArray<View>& x) {
    int n = x.size();
    if (n == 1) {
      GECODE_ME_CHECK(x[0].eq(home,0));
    } else if (n == 2) {
      GECODE_ME_CHECK(x[0].eq(home,1));
      GECODE_ME_CHECK(x[1].eq(home,0));
    } else {
      for (int i=n; i--; ) {
        GECODE_ME_CHECK(x[i].gq(home,0));
        GECODE_ME_CHECK(x[i].le(home,n));
        GECODE_ME_CHECK(x[i].nq(home,i));
      }
      (void) new (home) Simple<View>(home,x);
    }
    return ES_OK;
  }

}}}

// STATISTICS: int-prop

