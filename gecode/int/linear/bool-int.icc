/* -*- mode: C++; c-basic-offset: 2; indent-tabs-mode: nil -*- */
/*
 *  Main authors:
 *     Christian Schulte <schulte@gecode.org>
 *
 *  Copyright:
 *     Christian Schulte, 2006
 *
 *  Last modified:
 *     $Date$ by $Author$
 *     $Revision$
 *
 *  This file is part of Gecode, the generic constraint
 *  development environment:
 *     http://www.gecode.org
 *
 *  See the file "LICENSE" for information on usage and
 *  redistribution of this file, and for a
 *     DISCLAIMER OF ALL WARRANTIES.
 *
 */

#include <algorithm>

namespace Gecode { namespace Int { namespace Linear {

  /*
   * Baseclass for integer Boolean sum
   *
   */
  template <class VX>
  forceinline
  LinBoolInt<VX>::LinBoolInt(Space* home, ViewArray<VX>& x0,
                             int n_s0, int c0)
    : Propagator(home), x(x0), n_s(n_s0), c(c0) {
    for (int i=n_s; i--; )
      x[i].subscribe(home,this,PC_INT_VAL);
  }

  template <class VX>
  forceinline size_t
  LinBoolInt<VX>::dispose(Space* home) {
    assert(!home->failed());
    for (int i=n_s; i--; )
      x[i].cancel(home,this,PC_INT_VAL);
    (void) Propagator::dispose(home);
    return sizeof(*this);
  }

  template <class VX>
  forceinline
  LinBoolInt<VX>::LinBoolInt(Space* home, bool share, LinBoolInt<VX>& p)
    : Propagator(home,share,p), x(home,p.x.size()), n_s(p.n_s) {
    // Update views not assigned and subscribed to
    for (int i=n_s; i--; )
      x[i].update(home,share,p.x[i]);
    // Eliminate assigned but not subscribed views in original
    // and update remaining ones
    int n_x = p.x.size();
    int p_c = p.c;
    for (int i=n_x; i-- > n_s; )
      if (p.x[i].zero()) {
        n_x--;
        p.x[i]=p.x[n_x]; x[i]=x[n_x];
      } else if (p.x[i].one()) {
        n_x--; p_c--;
        p.x[i]=p.x[n_x]; x[i]=x[n_x];
      } else {
        x[i].update(home,share,p.x[i]);
      }
    p.c = p_c; c = p_c;
    p.x.size(n_x); x.size(n_x);
  }

  template <class VX>
  PropCost
  LinBoolInt<VX>::cost(void) const {
    return cost_lo(x.size(),PC_LINEAR_LO);
  }


  /*
   * Less or equal propagator (integer rhs)
   *
   */

#ifdef BOOL_LINEAR_INT_ADVISOR

  template <class VX>
  PropCost
  GqBoolInt<VX>::cost(void) const {
    return PC_UNARY_HI;
  }

  template <class VX>
  forceinline size_t
  GqBoolInt<VX>::dispose(Space* home) {
    assert(!home->failed());
    co.dispose(home);
    (void) Propagator::dispose(home);
    return sizeof(*this);
  }

  template <class VX>
  forceinline
  GqBoolInt<VX>::GqBoolInt(Space* home, ViewArray<VX>& x0,
                           int n_s0, int c0)
    : Propagator(home), x(x0), c(c0), n_s(n_s0), n_0(0), n_1(0), co(home,n_s) {
    for (int i=n_s; i--; )
      (void) new (home) A(home,this,co,i);
  }

  template <class VX>
  ExecStatus
  GqBoolInt<VX>::post(Space* home, ViewArray<VX>& x, int c) {
    // Eliminate assigned views
    int n_x = x.size();
    for (int i=n_x; i--; )
      if (x[i].zero()) {
        x[i] = x[--n_x];
      } else if (x[i].one()) {
        x[i] = x[--n_x]; c--;
      }
    // RHS too large
    if (n_x < c)
      return ES_FAILED;
    // Whatever the x[i] take for values, the inequality is subsumed
    if (c <= 0)
      return ES_OK;
    // All views must be one to satisfy inequality
    if (c == n_x) {
      for (int i=n_x; i--; )
        GECODE_ME_CHECK(x[i].one_none(home));
      return ES_OK;
    }
    // This is the needed invariant as c+1 subscriptions must be created
    assert(n_x > c);
    x.size(n_x);
    (void) new (home) GqBoolInt<VX>(home,x,c+1,c);
    return ES_OK;
  }

  template <class VX>
  forceinline
  GqBoolInt<VX>::GqBoolInt(Space* home, bool share, GqBoolInt<VX>& p)
    : Propagator(home,share,p), c(p.c), n_s(p.n_s), n_0(p.n_0), n_1(p.n_1),
      co(home,share,p.co) {
    x.update(home,share,p.x);
  }

  template <class VX>
  Actor*
  GqBoolInt<VX>::copy(Space* home, bool share) {
    return new (home) GqBoolInt<VX>(home,share,*this);
  }

  template <class VX>
  ExecStatus
  GqBoolInt<VX>::advise(Space* home, Advisor& _a, const Delta&) {
    A& a = static_cast<A&>(_a);
    if (n_s == 0)
      return ES_SUBSUMED_FIX(a,home);
    int n=x.size();
    while (n-- > n_s) {
      if (x[n].none()) {
        c -= x[a.i].val();
        x[a.i]=x[n];
        x[n].subscribe(home,&a);
        x.size(n);
        assert((n_0 == 0) && (n_1 == 0));
        assert((c > 0) && (c < x.size()));
        return ES_FIX;
      } else if (x[n].one()) {
        c--;
      }
    }
    assert(n == n_s);
    // No more variables for subscriptions
    x.size(n_s);
    if (x[a.i].one())
      n_1++;
    else
      n_0++;
    if (c > x.size()-n_0)
      return ES_FAILED;
    if ((c-n_1 <= 0) || (c == x.size()-n_0))
      return ES_SUBSUMED_NOFIX(a,home);
    return ES_SUBSUMED_FIX(a,home);
  }

  template <class VX>
  ExecStatus
  GqBoolInt<VX>::propagate(Space* home) {
    assert(n == n_s);
    n_s = 0; // As signal to remaining advisors
    int n = x.size();
    if (c == n-n_0) {
      for (int i=n; i--; )
        if (x[i].none())
          GECODE_ME_CHECK(x[i].one_none(home));
      return ES_SUBSUMED(this,home);
    } 
    return ES_SUBSUMED(this,home);
  }

#else

  template <class VX>
  forceinline
  GqBoolInt<VX>::GqBoolInt(Space* home, ViewArray<VX>& x,
                           int n_s, int c)
    : LinBoolInt<VX>(home,x,n_s,c) {}

  template <class VX>
  ExecStatus
  GqBoolInt<VX>::post(Space* home, ViewArray<VX>& x, int c) {
    // Eliminate assigned views
    int n_x = x.size();
    for (int i=n_x; i--; )
      if (x[i].zero()) {
        x[i] = x[--n_x];
      } else if (x[i].one()) {
        x[i] = x[--n_x]; c--;
      }
    // RHS too large
    if (n_x < c)
      return ES_FAILED;
    // Whatever the x[i] take for values, the inequality is subsumed
    if (c <= 0)
      return ES_OK;
    // All views must be one to satisfy inequality
    if (c == n_x) {
      for (int i=n_x; i--; )
        GECODE_ME_CHECK(x[i].one_none(home));
      return ES_OK;
    }
    // This is the needed invariant as c+1 subscriptions must be created
    assert(n_x > c);
    x.size(n_x);
    (void) new (home) GqBoolInt<VX>(home,x,c+1,c);
    return ES_OK;
  }

  template <class VX>
  forceinline
  GqBoolInt<VX>::GqBoolInt(Space* home, bool share, GqBoolInt<VX>& p)
    : LinBoolInt<VX>(home,share,p) {}

  template <class VX>
  Actor*
  GqBoolInt<VX>::copy(Space* home, bool share) {
    return new (home) GqBoolInt<VX>(home,share,*this);
  }


  template <class VX>
  ExecStatus
  GqBoolInt<VX>::propagate(Space* home) {
    // Eliminate assigned views from subscribed views
    int n_x = x.size();
    for (int i=n_s; i--; )
      if (x[i].zero()) {
        x[i]=x[--n_s]; x[n_s]=x[--n_x];
      } else if (x[i].one()) {
        x[i]=x[--n_s]; x[n_s]=x[--n_x]; c--;
      }
    x.size(n_x);
    if (n_x < c)
      return ES_FAILED;
    if (c <= 0)
      return ES_SUBSUMED(this,home);
    // Find unassigned variables to subscribe to
    while ((n_s < n_x) && (n_s <= c)) 
      if (x[n_s].zero()) {
        x[n_s]=x[--n_x];
      } else if (x[n_s].one()) {
        x[n_s]=x[--n_x]; c--;
      } else {
        x[n_s++].subscribe(home,this,PC_INT_VAL,false);
      }
    x.size(n_x);
    if (n_x < c)
      return ES_FAILED;
    if (c <= 0)
      return ES_SUBSUMED(this,home);
    if (c == n_x) {
      // These are known to be not assigned
      for (int i=n_s; i--; )
        GECODE_ME_CHECK(x[i].one_none(home));
      // These are not known to be assigned
      for (int i=n_s+1; i<n_x; i++)
        GECODE_ME_CHECK(x[i].one(home));
      // Fix number of subscriptions such that cancelling subscriptions work
      n_s = 0;
      return ES_SUBSUMED(this,sizeof(*this));
    }
    return ES_FIX;
  }

#endif

#ifdef BOOL_LINEAR_INT_ADVISOR

  /*
   * Equal propagator (integer rhs)
   *
   */
  template <class VX>
  PropCost
  EqBoolInt<VX>::cost(void) const {
    return PC_UNARY_HI;
  }

  template <class VX>
  forceinline size_t
  EqBoolInt<VX>::dispose(Space* home) {
    assert(!home->failed());
    co.dispose(home);
    (void) Propagator::dispose(home);
    return sizeof(*this);
  }

  template <class VX>
  forceinline
  EqBoolInt<VX>::EqBoolInt(Space* home, ViewArray<VX>& x0,
                           int n_s0, int c0)
    : Propagator(home), x(x0), c(c0), n_s(n_s0), n_0(0), n_1(0), co(home,n_s) {
    for (int i=n_s; i--; )
      (void) new (home) A(home,this,co,i);
  }

  template <class VX>
  ExecStatus
  EqBoolInt<VX>::post(Space* home, ViewArray<VX>& x, int c) {
    // Eliminate assigned views
    int n_x = x.size();
    for (int i=n_x; i--; )
      if (x[i].zero()) {
        x[i] = x[--n_x];
      } else if (x[i].one()) {
        x[i] = x[--n_x]; c--;
      }
    // RHS too small or too large
    if ((c < 0) || (c > n_x))
      return ES_FAILED;
    // All views must be zero to satisfy equality
    if (c == 0) {
      for (int i=n_x; i--; )
        GECODE_ME_CHECK(x[i].zero_none(home));
      return ES_OK;
    }
    // All views must be one to satisfy equality
    if (c == n_x) {
      for (int i=n_x; i--; )
        GECODE_ME_CHECK(x[i].one_none(home));
      return ES_OK;
    }
    x.size(n_x);
    // Compute how many subscriptions must be created
    int n_s = std::max(c,n_x-c)+1;
    assert(n_s <= n_x);
    (void) new (home) EqBoolInt<VX>(home,x,n_s,c);
    return ES_OK;
  }

  template <class VX>
  forceinline
  EqBoolInt<VX>::EqBoolInt(Space* home, bool share, EqBoolInt<VX>& p)
    : Propagator(home,share,p), c(p.c), n_s(p.n_s), n_0(p.n_0), n_1(p.n_1),
      co(home,share,p.co) {
    x.update(home,share,p.x);
  }

  template <class VX>
  Actor*
  EqBoolInt<VX>::copy(Space* home, bool share) {
    return new (home) EqBoolInt<VX>(home,share,*this);
  }

  template <class VX>
  ExecStatus
  EqBoolInt<VX>::advise(Space* home, Advisor& _a, const Delta&) {
    A& a = static_cast<A&>(_a);
    if (n_s == 0)
      return ES_SUBSUMED_FIX(a,home);
    int n=x.size();
    while (n-- > n_s) {
      if (x[n].none()) {
        c -= x[a.i].val();
        x[a.i]=x[n];
        x[n].subscribe(home,&a);
        x.size(n);
        assert((n_0 == 0) && (n_1 == 0));
        assert((c > 0) && (c < x.size()));
        return ES_FIX;
      } else if (x[n].one()) {
        c--;
      }
    }
    assert(n == n_s);
    // No more variables for subscriptions
    x.size(n_s);
    if (x[a.i].one())
      n_1++;
    else
      n_0++;
    if ((c-n_1 < 0) || (c > x.size()-n_0))
      return ES_FAILED;
    if ((c-n_1 == 0) || (c == x.size()-n_0))
      return ES_SUBSUMED_NOFIX(a,home);
    return ES_SUBSUMED_FIX(a,home);
  }

  template <class VX>
  ExecStatus
  EqBoolInt<VX>::propagate(Space* home) {
    assert(n == n_s);
    n_s = 0; // As signal to remaining advisors
    int n = x.size();
    assert((c-n_1 >= 0) && (c <= n-n_0));
    if (c-n_1 == 0) {
      for (int i=n; i--; )
        if (x[i].none())
          GECODE_ME_CHECK(x[i].zero_none(home));
    } else {
      assert(c == n-n_0);
      for (int i=n; i--; )
        if (x[i].none())
          GECODE_ME_CHECK(x[i].one_none(home));
    }
    return ES_SUBSUMED(this,home);
  }

#else

  /*
   * Equal propagator (integer rhs)
   *
   */
  template <class VX>
  forceinline
  EqBoolInt<VX>::EqBoolInt(Space* home, ViewArray<VX>& x,
                           int n_s, int c)
    : LinBoolInt<VX>(home,x,n_s,c) {}

  template <class VX>
  ExecStatus
  EqBoolInt<VX>::post(Space* home, ViewArray<VX>& x, int c) {
    // Eliminate assigned views
    int n_x = x.size();
    for (int i=n_x; i--; )
      if (x[i].zero()) {
        x[i] = x[--n_x];
      } else if (x[i].one()) {
        x[i] = x[--n_x]; c--;
      }
    // RHS too small or too large
    if ((c < 0) || (c > n_x))
      return ES_FAILED;
    // All views must be zero to satisfy equality
    if (c == 0) {
      for (int i=n_x; i--; )
        GECODE_ME_CHECK(x[i].zero_none(home));
      return ES_OK;
    }
    // All views must be one to satisfy equality
    if (c == n_x) {
      for (int i=n_x; i--; )
        GECODE_ME_CHECK(x[i].one_none(home));
      return ES_OK;
    }
    x.size(n_x);
    // Compute how many subscriptions must be created
    int n_s = std::max(c,n_x-c)+1;
    assert(n_s <= n_x);
    (void) new (home) EqBoolInt<VX>(home,x,n_s,c);
    return ES_OK;
  }

  template <class VX>
  forceinline
  EqBoolInt<VX>::EqBoolInt(Space* home, bool share, EqBoolInt<VX>& p)
    : LinBoolInt<VX>(home,share,p) {}

  template <class VX>
  Actor*
  EqBoolInt<VX>::copy(Space* home, bool share) {
    return new (home) EqBoolInt<VX>(home,share,*this);
  }

  template <class VX>
  ExecStatus
  EqBoolInt<VX>::propagate(Space* home) {
    // Eliminate assigned views from subscribed views
    int n_x = x.size();
    for (int i=n_s; i--; )
      if (x[i].zero()) {
        x[i]=x[--n_s]; x[n_s]=x[--n_x];
      } else if (x[i].one()) {
        x[i]=x[--n_s]; x[n_s]=x[--n_x]; c--;
      }
    x.size(n_x);
    if ((c < 0) || (c > n_x))
      return ES_FAILED;
    // Find unassigned variables to subscribe to
    while ((n_s < n_x) && ((n_s <= c) || (n_s <= n_x-c))) 
      if (x[n_s].zero()) {
        x[n_s]=x[--n_x];
      } else if (x[n_s].one()) {
        x[n_s]=x[--n_x]; c--;
      } else {
        x[n_s++].subscribe(home,this,PC_INT_VAL,false);
      }
    x.size(n_x);
    if ((c < 0) || (c > n_x))
      return ES_FAILED;
    if (c == 0) {
      // These are known to be not assigned
      for (int i=n_s; i--; )
        GECODE_ME_CHECK(x[i].zero_none(home));
      // These are not known to be assigned
      for (int i=n_s+1; i<n_x; i++)
        GECODE_ME_CHECK(x[i].zero(home));
      // Fix number of subscriptions such that cancelling subscriptions work
      n_s = 0;
      return ES_SUBSUMED(this,sizeof(*this));
    }
    if (c == n_x) {
      // These are known to be not assigned
      for (int i=n_s; i--; )
        GECODE_ME_CHECK(x[i].one_none(home));
      // These are not known to be assigned
      for (int i=n_s+1; i<n_x; i++)
        GECODE_ME_CHECK(x[i].one(home));
      // Fix number of subscriptions such that cancelling subscriptions work
      n_s = 0;
      return ES_SUBSUMED(this,sizeof(*this));
    }
    return ES_FIX;
  }

#endif

  /*
   * Integer disequal to Boolean sum
   *
   */

  template<class VX>
  forceinline
  NqBoolInt<VX>::NqBoolInt(Space* home, ViewArray<VX>& b, int c0)
    : BinaryPropagator<VX,PC_INT_VAL>(home,
                                      b[b.size()-2],
                                      b[b.size()-1]), x(b), c(c0) {
    assert(x.size() >= 2);
    x.size(x.size()-2);
  }

  template<class VX>
  forceinline
  NqBoolInt<VX>::NqBoolInt(Space* home, bool share, NqBoolInt<VX>& p)
    : BinaryPropagator<VX,PC_INT_VAL>(home,share,p), x(home,p.x.size()) {
    // Eliminate all zeros and ones in original and update
    int n = p.x.size();
    int p_c = p.c;
    for (int i=n; i--; )
      if (p.x[i].zero()) {
        n--; p.x[i]=p.x[n]; x[i]=x[n];
      } else if (p.x[i].one()) {
        n--; p_c--; p.x[i]=p.x[n]; x[i]=x[n];
      } else {
        x[i].update(home,share,p.x[i]);
      }
    c = p_c; p.c = p_c;
    x.size(n); p.x.size(n);
  }

  template<class VX>
  forceinline ExecStatus
  NqBoolInt<VX>::post(Space* home, ViewArray<VX>& x, int c) {
    int n = x.size();
    for (int i=n; i--; )
      if (x[i].one()) {
        x[i]=x[--n]; c--;
      } else if (x[i].zero()) {
        x[i]=x[--n];
      }
    x.size(n);
    if ((n < c) || (c < 0))
      return ES_OK;
    if (n == 0)
      return (c == 0) ? ES_FAILED : ES_OK;
    if (n == 1) {
      if (c == 1) {
        GECODE_ME_CHECK(x[0].zero_none(home));
      } else {
        GECODE_ME_CHECK(x[0].one_none(home));
      }
      return ES_OK;
    }
    (void) new (home) NqBoolInt(home,x,c);
    return ES_OK;
  }

  template<class VX>
  Actor*
  NqBoolInt<VX>::copy(Space* home, bool share) {
    return new (home) NqBoolInt<VX>(home,share,*this);
  }

  template<class VX>
  PropCost
  NqBoolInt<VX>::cost(void) const {
    return PC_LINEAR_LO;
  }

  template<class VX>
  forceinline bool
  NqBoolInt<VX>::resubscribe(Space* home, VX& y) {
    if (y.one())
      c--;
    int n = x.size();
    for (int i=n; i--; )
      if (x[i].one()) {
        c--; x[i]=x[--n];
      } else if (x[i].zero()) {
        x[i] = x[--n];
      } else {
        // New unassigned view found
        assert(!x[i].zero() && !x[i].one());
        // Move to y and subscribe
        y=x[i]; x[i]=x[--n]; 
        x.size(n);
        y.subscribe(home,this,PC_INT_VAL,false);
        return true;
      }
    // All views have been assigned!
    x.size(0);
    return false;
  }

  template<class VX>
  ExecStatus
  NqBoolInt<VX>::propagate(Space* home) {
    bool s0 = true; 
    if (x0.zero() || x0.one())
      s0 = resubscribe(home,x0);
    bool s1 = true;
    if (x1.zero() || x1.one())
      s1 = resubscribe(home,x1);
    int n = x.size() + s0 + s1;
    if ((n < c) || (c < 0))
      return ES_SUBSUMED(this,home);
    if (n == 0)
      return (c == 0) ? ES_FAILED : ES_SUBSUMED(this,sizeof(*this));
    if (n == 1) {
      if (s0) {
        if (c == 1) {
          GECODE_ME_CHECK(x0.zero_none(home));
        } else {
          GECODE_ME_CHECK(x0.one_none(home));
        }
      } else {
        assert(s1);
        if (c == 1) {
          GECODE_ME_CHECK(x1.zero_none(home));
        } else {
          GECODE_ME_CHECK(x1.one_none(home));
        }
      }
      return ES_SUBSUMED(this,sizeof(*this));
    }
    return ES_FIX;
  }


}}}

// STATISTICS: int-prop

