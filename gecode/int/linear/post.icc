/* -*- mode: C++; c-basic-offset: 2; indent-tabs-mode: nil -*- */
/*
 *  Main authors:
 *     Christian Schulte <schulte@gecode.org>
 *
 *  Copyright:
 *     Christian Schulte, 2002
 *
 *  Last modified:
 *     $Date: 2006-10-26 22:15:50 +0200 (Thu, 26 Oct 2006) $ by $Author: schulte $
 *     $Revision: 3806 $
 *
 *  This file is part of Gecode, the generic constraint
 *  development environment:
 *     http://www.gecode.org
 *
 *  See the file "LICENSE" for information on usage and
 *  redistribution of this file, and for a
 *     DISCLAIMER OF ALL WARRANTIES.
 *
 */

#include "gecode/int/rel.hh"
#include "gecode/int/linear.hh"

#include "gecode/support/sort.hh"

namespace Gecode { namespace Int { namespace Linear {

  /// Sort linear terms by view
  template<class View>
  class TermLess {
  public:
    forceinline bool
    operator()(const Term<View>& a, const Term<View>& b) {
      return before(a.x,b.x);
    }
  };

  template<class View>
  inline void
  normalize(Term<View> e[], int n, IntRelType& r, int& c) { 
    /*
     * All inequations in terms of <=
     */
    switch (r) {
    case IRT_EQ: case IRT_NQ: case IRT_LQ:
      break;
    case IRT_LE:
      c--; r = IRT_LQ; break;
    case IRT_GR:
      c++; /* fall through */
    case IRT_GQ:
      r = IRT_LQ;
      for (int i = n; i--; )
        e[i].a = -e[i].a;
      c = -c;
      break;
    default:
      throw UnknownRelation("Int::linear");
    }
  }

  template<class View>
  void
  preprocess(Term<View> e[], int& n, IntRelType& r, int& c, 
             int& n_p, int& n_n) {
    if ((c < Limits::Int::int_min) || (c > Limits::Int::int_max))
      throw NumericalOverflow("Int::linear");
    /*
     * Join coefficients for aliased variables:
     *
     */
    {
      // Group same variables
      TermLess<View> el;
      Support::quicksort<Term<View>,TermLess<View> >(e,n,el);

      // Join adjacent variables
      int i = 0;
      int j = 0;
      while (i < n) {
        int a = e[i].a;
        if ((a < Limits::Int::int_min) || (a > Limits::Int::int_max))
          throw NumericalOverflow("Int::linear");
        View x = e[i].x;
        while ((++i < n) && same(e[i].x,x)) {
          a += e[i].a;
          if ((a < Limits::Int::int_min) || (a > Limits::Int::int_max))
            throw NumericalOverflow("Int::linear");
        }
        if (a != 0) {
          e[j].a = a; e[j].x = x; j++;
        }
      }
      n = j;
    }
    /*
     * Partition into positive/negative coefficents
     */
    {
      int i = 0;
      int j = n-1;
      while (true) {
        while ((e[j].a < 0) && (--j >= 0)) ;
        while ((e[i].a > 0) && (++i <  n)) ;
        if (j <= i) break;
        std::swap(e[i],e[j]);
      }
      n_p = i;
      n_n = n-n_p;
    }
  }

}}}

// STATISTICS: int-post

