/* -*- mode: C++; c-basic-offset: 2; indent-tabs-mode: nil -*- */
/*
 *  Main authors:
 *     Christian Schulte <schulte@gecode.org>
 *
 *  Copyright:
 *     Christian Schulte, 2004
 *
 *  Last modified:
 *     $Date$ by $Author$
 *     $Revision$
 *
 *  This file is part of Gecode, the generic constraint
 *  development environment:
 *     http://www.gecode.org
 *
 *  See the file "LICENSE" for information on usage and
 *  redistribution of this file, and for a
 *     DISCLAIMER OF ALL WARRANTIES.
 *
 */

#include "gecode/support/shared-array.hh"
#include "gecode/support/dynamic-array.hh"

namespace Gecode { namespace Iter { namespace Ranges {

  /**
   * \brief %Range iterator cache
   *
   * Allows to iterate the ranges as defined by the input iterator
   * several times provided the Cache is %reset by the reset member
   * function.
   *
   * Requires \code #include "gecode/iter.hh" \endcode
   * \ingroup FuncIterRanges
   */
  template <class I>
  class Cache  {
  protected:
    /// %Ranges stored in cache
    class Range {
    public:
      int min; int max;
    };
    /// Array for ranges
    Support::SharedArray<Range> r;
    /// Current range
    int c;
  public:
    /// \name Constructors and initialization
    //@{
    /// Default constructor
    Cache(void);
    /// Initialize with ranges from \a i
    Cache(I& i);
    /// Initialize with ranges from \a i
    void init(I& i);
    //@}

    /// \name Iteration control
    //@{
    /// Test whether iterator is still at a range or done
    bool operator()(void) const;
    /// Move iterator to next range (if possible)
    void operator++(void);
    /// Reset iterator to start from beginning
    void reset(void);
    //@}

    /// \name %Range access
    //@{
    /// Return smallest value of range
    int min(void) const;
    /// Return largest value of range
    int max(void) const;
    /// Return width of range (distance between minimum and maximum)
    unsigned int width(void) const;
    //@}
  };


  template <class I>
  forceinline
  Cache<I>::Cache(void) {}

  template <class I>
  inline void
  Cache<I>::init(I& i) {
    Support::DynamicArray<Range> d;
    int n=0;
    while (i()) {
      d[n].min = i.min(); d[n].max = i.max();
      ++n; ++i;
    }
    r.init(n);
    for (int j=n; j--; )
      r[j]=d[j];
    c = 0;
  }

  template <class I>
  inline
  Cache<I>::Cache(I& i) {
    init(i);
  }

  template <class I>
  forceinline void
  Cache<I>::operator++(void) {
    c++;
  }
  template <class I>
  forceinline bool
  Cache<I>::operator()(void) const {
    return c < r.size();
  }

  template <class I>
  forceinline void
  Cache<I>::reset(void) {
    c = 0;
  }

  template <class I>
  forceinline int
  Cache<I>::min(void) const {
    return r[c].min;
  }
  template <class I>
  forceinline int
  Cache<I>::max(void) const {
    return r[c].max;
  }
  template <class I>
  forceinline unsigned int
  Cache<I>::width(void) const {
    return r[c].max-r[c].min+1;
  }

}}}

// STATISTICS: iter-any

