/* -*- mode: C++; c-basic-offset: 2; indent-tabs-mode: nil -*- */
/*
 *  Main authors:
 *     Christian Schulte <schulte@gecode.org>
 *
 *  Copyright:
 *     Christian Schulte, 2007
 *
 *  Last modified:
 *     $Date$ by $Author$
 *     $Revision$
 *
 *  This file is part of Gecode, the generic constraint
 *  development environment:
 *     http://www.gecode.org
 *
 *  See the file "LICENSE" for information on usage and
 *  redistribution of this file, and for a
 *     DISCLAIMER OF ALL WARRANTIES.
 *
 */

namespace Gecode { namespace Iter { namespace Values {

  /**
   * \brief Value iterator for single value
   *
   * Requires \code #include "gecode/iter.hh" \endcode
   * \ingroup FuncIterValues
   */

  class Singleton {
  protected:
    /// The single value
    int v;
  public:
    /// \name Constructors and initialization
    //@{
    /// Default constructor
    Singleton(void);
    /// Initialize with value \a v
    Singleton(int v);
    /// Initialize with value \a v
    void init(int v);
    //@}

    /// \name Iteration control
    //@{
    /// Test whether iterator is still at a value or done
    bool operator()(void) const;
    /// Move iterator to next value (if possible)
    void operator++(void);
    //@}

    /// \name %Value access
    //@{
    /// Return current value
    int val(void) const;
    //@}
  };


  forceinline
  Singleton::Singleton(void) {}

  forceinline
  Singleton::Singleton(int v0)
    : v(v0) {}

  forceinline void
  Singleton::init(int v0) {
    v=v0;
  }

  forceinline void
  Singleton::operator++(void) {
    v=Limits::Int::int_max+1;
  }
  forceinline bool
  Singleton::operator()(void) const {
    return v<Limits::Int::int_max+1;
  }

  forceinline int
  Singleton::val(void) const {
    return v;
  }


}}}

// STATISTICS: iter-any

