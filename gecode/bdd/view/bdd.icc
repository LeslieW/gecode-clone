/*
 *  Main authors:
 *     Patrick Pekczynski <pekczynski@ps.uni-sb.de>
 *
 *  Copyright:
 *     Patrick Pekczynski, 2006
 *
 *  Last modified:
 *     $Date: 2007-05-11 15:34:01 +0000 (Fr, 11 Mai 2007) $ by $Author: pekczynski $
 *     $Revision: 4588 $
 *
 *  This file is part of Gecode, the generic constraint
 *  development environment:
 *     http://www.gecode.org
 *
 *  See the file "LICENSE" for information on usage and
 *  redistribution of this file, and for a
 *     DISCLAIMER OF ALL WARRANTIES.
 *
 */


namespace Gecode { namespace Bdd {

  /*
   * Constructors and access
   *
   */

  forceinline
  BddView::BddView(void) {}

  forceinline
  BddView::BddView(const BddVar& y)
    : VariableViewBase<BddVarImp>(y.variable()) { }

  /*
   * Set information
   *
   */


  forceinline unsigned int
  BddView::glbSize(void) const { return var->glbSize(); }

  forceinline unsigned int
  BddView::lubSize(void) const { return var->lubSize(); }

  forceinline unsigned int
  BddView::unknownSize(void) const { return var->unknownSize(); }
  
  forceinline unsigned int
  BddView::cardMin(void) const { return var->cardMin(); }

  forceinline unsigned int
  BddView::cardMax(void) const { return var->cardMax(); }

  forceinline int
  BddView::lubMin(void) const { return var->lubMin(); }

  forceinline int
  BddView::lubMax(void) const { return var->lubMax(); }

  forceinline int
  BddView::lubMinN(int n) const { return var->lubMinN(n); }

  forceinline int
  BddView::lubMaxN(int n) const { return var->lubMaxN(n); }

  forceinline int
  BddView::glbMin(void) const { return var->glbMin(); }

  forceinline int
  BddView::glbMax(void) const { return var->glbMax(); }



  /*
   * Bdd information
   *
   */


  forceinline unsigned int
  BddView::offset(void)  const { return var->offset(); }

  forceinline unsigned int
  BddView::table_width(void)  const { return var->table_width(); }

  forceinline GecodeBdd
  BddView::getbdd(int i)  const { return var->getbdd(i); }

  forceinline GecodeBdd
  BddView::getnegbdd(int i)  const { return var->getnegbdd(i); }

  forceinline int
  BddView::getlevel(int i)  { return var->getlevel(i); }

  forceinline int
  BddView::getvar(int i)  { return var->getvar(i); }

  forceinline void
  BddView::dom_and(GecodeBdd& d) { return var->dom_and(d); }

  forceinline void
  BddView::dom_or(GecodeBdd& d) { return var->dom_or(d); }

  forceinline BMI*
  BddView::manager(void) const { return var->manager(); }

  forceinline int
  BddView::mgr_min(void)  const { return var->mgr_min(); }

  forceinline int
  BddView::valididx(int v)  const { return var->valididx(v); }

  forceinline int
  BddView::mgr_max(void)  const { return var->mgr_max(); }
  
  forceinline GecodeBdd 
  BddView::bdd_domain(void) const {  return var->bdd_domain(); };


  /*
   * Domain tests
   *
   */

  forceinline bool
  BddView::assigned(void)  const { return var->assigned(); }

  forceinline bool
  BddView::contains(int i) const { return (var->knownIn(i)); }
  
  forceinline bool
  BddView::notContains(int i) const { return (var->knownOut(i)); }

  /*
   * Tells
   *
   */

  forceinline ModEvent 
  BddView::cardinality(Space* home, int l, int u) {
    return var->cardinality(home, l, u);
  }

  forceinline ModEvent
  BddView::cardMin(Space* home, unsigned int m) {
    return var->cardMin(home, m);
  }

  forceinline ModEvent
  BddView::cardMax(Space* home, unsigned int m) {
    return var->cardMax(home, m);
  }

  forceinline ModEvent
  BddView::include(Space* home, int from, int to) { 
    return var->include(home, from, to);
  }

  forceinline ModEvent
  BddView::include(Space* home, int n) { return var->include(home, n); }

  template <class I> ModEvent
  BddView::includeI(Space* home, I& iter) { return var->includeI(home, iter); }

  forceinline ModEvent
  BddView::exclude(Space* home, int from, int to) { 
    return var->exclude(home, from, to);
  }

  forceinline ModEvent
  BddView::exclude(Space* home, int n) { return var->exclude(home, n); }

  template <class I> ModEvent
  BddView::excludeI(Space* home, I& iter) { return var->excludeI(home, iter); }

  forceinline ModEvent
  BddView::intersect(Space* home,int from, int to) {
    return var->intersect(home,from,to);
  }

  forceinline ModEvent
  BddView::intersect(Space* home,int n) { return var->intersect(home,n); }

  template <class I> ModEvent
  BddView::intersectI(Space* home, I& iter) { 
    return var->intersectI(home, iter);
  }

  forceinline ModEvent
  BddView::nq(Space* home, int v) { return var->nq(home, v); }

  forceinline ModEvent
  BddView::nq(Space* home, int a, int b) { return var->nq(home, a, b); }

  template <class I>
  forceinline ModEvent
  BddView::nqI(Space* home, I& i) { return var->nqI(home, i); }

  forceinline ModEvent
  BddView::eq(Space* home, int v) { return var->eq(home, v); }

  forceinline ModEvent
  BddView::eq(Space* home, int a, int b) { return var->eq(home, a, b); }
  
  template <class I>
  forceinline ModEvent
  BddView::eqI(Space* home, I& i) { return var->eqI(home, i); }

  forceinline ModEvent 
  BddView::tell_formula(Space* home, GecodeBdd& d) {
    return var->tell_formula(home, d);
  }

  /*
   * Cloning
   *
   */

  forceinline void
  BddView::update(Space* home, bool share, BddView& y) {
    var = y.var->copy(home,share);
  }

  /*
   * Serialization
   *
   */
  forceinline Reflection::Arg*
  BddView::spec(Space* home, Reflection::VarMap& m) {
    return var->spec(home, m);
  }
  forceinline Reflection::Type*
  BddView::type(void) {
    return new Reflection::Type("bdd.BddView");
  }

  forceinline void 
  BddView::viewdot(void) const {
    var->viewdot();
  }

  template <>
  class DomValues<BddView> : public DomValues<BddVarImp*> {
  public:
    /// \name Constructors and initialization
    //@{
    /// Default constructor
    DomValues(void);
    /// Initialize with ranges for variable implementation \a x
    DomValues(const BddView& x);
    /// Initialize with ranges for variable implementation \a x
    void init(const BddView& x);
    //@}    
  };

  forceinline
  DomValues<BddView>::DomValues(void) {}

  forceinline
  DomValues<BddView>::DomValues(const BddView& x) 
    : DomValues<BddVarImp*>(x.variable()) {}

  forceinline void
  DomValues<BddView>::init(const BddView& x) {
    DomValues<BddVarImp*>::init(x.variable());
  }

  template <>
  class GlbValues<BddView> : public GlbValues<BddVarImp*> {
  public:
    /// \name Constructors and initialization
    //@{
    /// Default constructor
    GlbValues(void);
    /// Initialize with ranges for variable implementation \a x
    GlbValues(const BddView& x);
    /// Initialize with ranges for variable implementation \a x
    void init(const BddView& x);
    //@}    
  };

  forceinline
  GlbValues<BddView>::GlbValues(void) {}

  forceinline
  GlbValues<BddView>::GlbValues(const BddView& x) 
    : GlbValues<BddVarImp*>(x.variable()) {}

  forceinline void
  GlbValues<BddView>::init(const BddView& x) {
    GlbValues<BddVarImp*>::init(x.variable());
  }
}
  namespace Set {
  template <>
  class GlbRanges<Bdd::BddView> : public Set::GlbRanges<Bdd::BddVarImp*> {
  public:
    /// \name Constructors and initialization
    //@{
    /// Default constructor
    GlbRanges(void);
    /// Initialize with ranges for variable implementation \a x
    GlbRanges(const Bdd::BddView& x);
    /// Initialize with ranges for variable implementation \a x
    void init(const Bdd::BddView& x);
    //@}    
  };

  forceinline
  GlbRanges<Bdd::BddView>::GlbRanges(void) {}

  forceinline
  GlbRanges<Bdd::BddView>::GlbRanges(const Bdd::BddView& x) 
    : GlbRanges<Bdd::BddVarImp*>(x.variable()) {}

  forceinline void
  GlbRanges<Bdd::BddView>::init(const Bdd::BddView& x) {
    GlbRanges<Bdd::BddVarImp*>::init(x.variable());
  }

  template <>
  class LubRanges<Bdd::BddView> : public Set::LubRanges<Bdd::BddVarImp*> {
  public:
    /// \name Constructors and initialization
    //@{
    /// Default constructor
    LubRanges(void);
    /// Initialize with ranges for variable implementation \a x
    LubRanges(const Bdd::BddView& x);
    /// Initialize with ranges for variable implementation \a x
    void init(const Bdd::BddView& x);
    //@}    
  };

  forceinline
  LubRanges<Bdd::BddView>::LubRanges(void) {}

  forceinline
  LubRanges<Bdd::BddView>::LubRanges(const Bdd::BddView& x) 
    : Set::LubRanges<Bdd::BddVarImp*>(x.variable()) {}

  forceinline void
  LubRanges<Bdd::BddView>::init(const Bdd::BddView& x) {
    Set::LubRanges<Bdd::BddVarImp*>::init(x.variable());
  }
  }
  namespace Bdd {
  /**
   * \brief %Value iterator for least upper bound of singleton set view
   * \ingroup TaskActorSetView
   */
  template <>
  class LubValues<BddView> : public LubValues<BddVarImp*> {
  public:
    /// \name Constructors and initialization
    //@{
    /// Default constructor
    LubValues(void);
    /// Initialize with ranges for view \a x
    LubValues(const BddView& x);
    /// Initialize with ranges for view \a x
    void init(const BddView& x);
    //@}
  };

  forceinline
  LubValues<BddView>::LubValues(void) {}

  forceinline
  LubValues<BddView>::LubValues(const BddView& x) 
  : LubValues<BddVarImp*>(x.variable()) {}

  forceinline void
  LubValues<BddView>::init(const BddView& x) {
    LubValues<BddVarImp*>::init(x.variable());
  }


  template <>
  class UnknownValues<BddView> : public UnknownValues<BddVarImp*> {
  public:
    /// \name Constructors and initialization
    //@{
    /// Default constructor
    UnknownValues(void);
    /// Initialize with ranges for variable implementation \a x
    UnknownValues(const BddView& x);
    /// Initialize with ranges for variable implementation \a x
    void init(const BddView& x);
    //@}    
  };

  forceinline
  UnknownValues<BddView>::UnknownValues(void) {}

  forceinline
  UnknownValues<BddView>::UnknownValues(const BddView& x) 
    : UnknownValues<BddVarImp*>(x.variable()) {}

  forceinline void
  UnknownValues<BddView>::init(const BddView& x) {
    UnknownValues<BddVarImp*>::init(x.variable());
  }
  }
  namespace Set {
  template <>
  class UnknownRanges<Bdd::BddView> : public Set::UnknownRanges<Bdd::BddVarImp*> {
  public:
    /// \name Constructors and initialization
    //@{
    /// Default constructor
    UnknownRanges(void);
    /// Initialize with ranges for variable implementation \a x
    UnknownRanges(const Bdd::BddView& x);
    /// Initialize with ranges for variable implementation \a x
    void init(const Bdd::BddView& x);
    //@}    
  };

  forceinline
  UnknownRanges<Bdd::BddView>::UnknownRanges(void) {}

  forceinline
  UnknownRanges<Bdd::BddView>::UnknownRanges(const Bdd::BddView& x) 
    : Set::UnknownRanges<Bdd::BddVarImp*>(x.variable()) {}

  forceinline void
  UnknownRanges<Bdd::BddView>::init(const Bdd::BddView& x) {
    Set::UnknownRanges<Bdd::BddVarImp*>::init(x.variable());
  }
  }
}


// STATISTICS: bdd-var

