/*
 *  Main authors:
 *     Patrick Pekczynski <pekczynski@ps.uni-sb.de>
 *
 *  Copyright:
 *     Patrick Pekczynski, 2006
 *
 *  Last modified:
 *     $Date: 2006-09-04 19:25:19 +0000 (Mon, 04 Sep 2006) $ by $Author: pekczynski $
 *     $Revision: 3585 $
 *
 *  This file is part of Gecode, the var->generic constraint
 *  development environment:
 *     http://www.gecode.org
 *
 *  See the file "LICENSE" for information on usage and
 *  redistribution of this file, and for a
 *     DISCLAIMER OF ALL WARRANTIES.
 *
 */


namespace Gecode { namespace Bdd {

  /*
   * Constructors and access
   *
   */

  forceinline
  BndBddView::BndBddView(void) {}

  forceinline
  BndBddView::BndBddView(const BddView& x) 
    : DerivedViewBase<BddView>(x) {}

  forceinline void
  BndBddView::init(const BddView& x) { view = x; }

  /* 
   * Set information
   *
   */
  
  forceinline unsigned int
  BndBddView::glbSize(void) const { return view.glbSize(); }

  forceinline unsigned int
  BndBddView::lubSize(void) const { return view.lubSize(); }

  forceinline unsigned int
  BndBddView::unknownSize(void) const { return view.unknownSize(); }

  forceinline unsigned int
  BndBddView::cardMin(void) const { return view.cardMin(); }

  forceinline unsigned int
  BndBddView::cardMax(void) const { return view.cardMax(); }

  forceinline int
  BndBddView::lubMin(void) const { return view.lubMin(); }

  forceinline int
  BndBddView::lubMax(void) const { return view.lubMax(); }

  forceinline int
  BndBddView::lubMinN(int n) const { return view.lubMinN(n); }

  forceinline int
  BndBddView::lubMaxN(int n) const { return view.lubMaxN(n); }

  forceinline int
  BndBddView::glbMin(void) const { return view.glbMin(); }

  forceinline int 
  BndBddView::glbMax(void) const { return view.glbMax(); }

  /*
   * Bdd information
   *
   */
  
  forceinline unsigned int 
  BndBddView::offset(void) const { return view.offset(); }

  forceinline unsigned int 
  BndBddView::table_width(void) const { return view.table_width(); }

  forceinline int 
  BndBddView::size(void) const { return view.size(); }

  forceinline GecodeBdd
  BndBddView::getbdd(int i) const { return view.getbdd(i); }

  forceinline GecodeBdd
  BndBddView::getnegbdd(int i) const { return view.getnegbdd(i); }

  forceinline int 
  BndBddView::getlevel(int i) { return view.getlevel(i); }

  forceinline int 
  BndBddView::getvar(int i) { return view.getvar(i); }

  forceinline void
  BndBddView::dom_and(GecodeBdd& d) { view.dom_and(d); }

  forceinline void
  BndBddView::dom_or(GecodeBdd& d) { view.dom_or(d); }

  forceinline BMI*
  BndBddView::manager(void) const { return view.manager(); }

  forceinline int
  BndBddView::mgr_min(void) const { return view.mgr_min(); };

  forceinline int
  BndBddView::valididx(int v)  const { return view.valididx(v); }



  forceinline int
  BndBddView::mgr_max(void) const { return view.mgr_max(); };

  forceinline GecodeBdd 
  BndBddView::bdd_domain(void) const { return view.bdd_domain(); }

  /*
   * Domain tests
   *
   */

  forceinline bool
  BndBddView::assigned(void) const { return view.assigned(); }

  forceinline bool
  BndBddView::contains(int i) const { return view.contains(i); }

  forceinline bool
  BndBddView::notContains(int i) const { return view.notContains(i); }

  /*
   * Tells
   *
   */

  forceinline ModEvent 
  BndBddView::cardinality(Space* home, unsigned int l, unsigned int u) {
    return view.cardinality(home, l, u);
  }

  forceinline ModEvent
  BndBddView::cardMin(Space* home, unsigned int m) { 
    return view.cardMin(home, m); 
  }

  forceinline ModEvent
  BndBddView::cardMax(Space* home, unsigned int m) { 
    return view.cardMax(home, m); 
  }

  forceinline ModEvent 
  BndBddView::include(Space* home, int i, int j) { 
    return view.include(home, i, j); 
  }

  forceinline ModEvent 
  BndBddView::include(Space* home, int i) { return include(home, i, i); }

  forceinline ModEvent 
  BndBddView::exclude(Space* home, int i, int j) { 
    return view.exclude(home, i, j); 
  }

  forceinline ModEvent 
  BndBddView::exclude(Space* home, int i) { return exclude(home, i, i); }

  forceinline ModEvent
  BndBddView::nq(Space* home, int v) { return view.nq(home, v, v); }

  forceinline ModEvent
  BndBddView::nq(Space* home, int a, int b) {
    if (b < view.mgr_min() || a > view.mgr_max()) {
      return ME_BDD_NONE;
    }
    Iter::Ranges::Singleton m(a, b);
    GecodeBdd ass = !(view.variable()->gen_assignment(m));
    return tell_formula(home, ass);
  }

  forceinline ModEvent
  BndBddView::eq(Space* home, int v) { return eq(home, v, v); }

  forceinline ModEvent
  BndBddView::eq(Space* home, int a, int b) {
    if (b < view.mgr_min() || a > view.mgr_max()) {
      return ME_BDD_FAILED;
    }
    Iter::Ranges::Singleton m(a, b);
    GecodeBdd ass = view.variable()->gen_assignment(m);
    return tell_formula(home, ass);
  }

  forceinline ModEvent 
  BndBddView::tell_formula(Space* home, GecodeBdd& d) {
    BMI* mgr = manager();
    d &= bdd_domain();
    
    GecodeBdd beta  = BDDTOP;
    conv_hull(mgr, d, beta);
    return view.tell_formula(home, beta);
  }

  forceinline ModEvent
  BndBddView::intersect(Space* home, int i, int j) {
    return view.intersect(home, i, j);
  }

  forceinline ModEvent
  BndBddView::intersect(Space* home, int i) { return intersect(home, i, i); }

  template <class I>
  forceinline ModEvent
  BndBddView::excludeI(Space* home, I& i) { return view.excludeI(home, i); }

  template <class I>
  forceinline ModEvent
  BndBddView::includeI(Space* home, I& i) { return view.includeI(home, i); }

  template <class I>
  forceinline ModEvent
  BndBddView::intersectI(Space* home, I& i) { return view.intersectI(home, i); }

  template <class I>
  forceinline ModEvent
  BndBddView::eqI(Space* home, I& i) {
    int mi = view.mgr_min();
    int ma = view.mgr_max();
    if (i()) {
      if (i.min() < mi || i.min() > ma) {
	return ME_BDD_FAILED;
      }
    }
    GecodeBdd ass = view.variable()->gen_assignment(i);
    return tell_formula(home, ass);
  }

  template <class I>
  forceinline ModEvent
  BndBddView::nqI(Space* home, I& i) {
    GecodeBdd ass = !(view.variable()->gen_assignment(i));
    return tell_formula(home, ass);
  }

  /*
   * Dependencies
   *
   */

  forceinline void
  BndBddView::subscribe(Space* home, Propagator* p, PropCond pc,
			  bool process) {
    view.subscribe(home, p, pc, process);
  }

  forceinline void
  BndBddView::cancel(Space* home, Propagator* p, PropCond pc) {
    view.cancel(home, p, pc);
  }
  
  /*
   * Propagator Modification Events
   *
   */

  forceinline ModEvent
  BndBddView::pme(const Propagator* p) { return BddView::pme(p); }
  
  forceinline ModEvent
  BndBddView::pme(ModEvent me) { return BddView::pme(me); }

  /*
   * Cloning
   *
   */

  forceinline void
  BndBddView::update(Space* home, bool share, BndBddView& y) {
    view.update(home, share, y.view);
  }

  /*
   * Serialization
   *
   */
  forceinline Reflection::Arg*
  BndBddView::spec(Space* home, Reflection::VarMap& m) {
    return view.spec(home, m);
  }
  forceinline Reflection::Type*
  BndBddView::type(void) {
    return new Reflection::Type("bdd.BndBddView");
  }

  forceinline void 
  BndBddView::viewdot(void) const {
    return view.viewdot();
  }

  /// Iterator for the values of a BndBddView
  template <>
  class DomValues<BndBddView> : public DomValues<BddVarImp*> {
  public:
    /// \name Constructors and initialization
    //@{
    /// Default constructor
    DomValues(void);
    /// Initialize with ranges for variable implementation \a x
    DomValues(const BndBddView& x);
    /// Initialize with ranges for variable implementation \a x
    void init(const BndBddView& x);
    //@}    
  };

  forceinline
  DomValues<BndBddView>::DomValues(void) {}

  forceinline
  DomValues<BndBddView>::DomValues(const BndBddView& x) 
    : DomValues<BddVarImp*>(x.base().variable()) {}

  forceinline void
  DomValues<BndBddView>::init(const BndBddView& x) {
    DomValues<BddVarImp*>::init(x.base().variable());
  }

  /// Iterator for the values in the greatest lower bound of a BndBddView
  template <>
  class GlbValues<BndBddView> : public GlbValues<BddVarImp*> {
  public:
    /// \name Constructors and initialization
    //@{
    /// Default constructor
    GlbValues(void);
    /// Initialize with ranges for variable implementation \a x
    GlbValues(const BndBddView& x);
    /// Initialize with ranges for variable implementation \a x
    void init(const BndBddView& x);
    //@}    
  };

  forceinline
  GlbValues<BndBddView>::GlbValues(void) {}

  forceinline
  GlbValues<BndBddView>::GlbValues(const BndBddView& x) 
    : GlbValues<BddVarImp*>(x.base().variable()) {}

  forceinline void
  GlbValues<BndBddView>::init(const BndBddView& x) {
    GlbValues<BddVarImp*>::init(x.base().variable());
  }

}
  namespace Set {
  template <>
  class GlbRanges<Bdd::BndBddView> : public GlbRanges<Bdd::BddVarImp*> {
  public:
    /// \name Constructors and initialization
    //@{
    /// Default constructor
    GlbRanges(void);
    /// Initialize with ranges for variable implementation \a x
    GlbRanges(const Bdd::BndBddView& x);
    /// Initialize with ranges for variable implementation \a x
    void init(const Bdd::BndBddView& x);
    //@}    
  };

  forceinline
  GlbRanges<Bdd::BndBddView>::GlbRanges(void) {}

  forceinline
  GlbRanges<Bdd::BndBddView>::GlbRanges(const Bdd::BndBddView& x) 
    : GlbRanges<Bdd::BddVarImp*>(x.base().variable()) {}

  forceinline void
  GlbRanges<Bdd::BndBddView>::init(const Bdd::BndBddView& x) {
    GlbRanges<Bdd::BddVarImp*>::init(x.base().variable());
  }

  template <>
  class LubRanges<Bdd::BndBddView> : public LubRanges<Bdd::BddVarImp*> {
  public:
    /// \name Constructors and initialization
    //@{
    /// Default constructor
    LubRanges(void);
    /// Initialize with ranges for variable implementation \a x
    LubRanges(const Bdd::BndBddView& x);
    /// Initialize with ranges for variable implementation \a x
    void init(const Bdd::BndBddView& x);
    //@}    
  };

  forceinline
  LubRanges<Bdd::BndBddView>::LubRanges(void) {}

  forceinline
  LubRanges<Bdd::BndBddView>::LubRanges(const Bdd::BndBddView& x) 
    : LubRanges<Bdd::BddVarImp*>(x.base().variable()) {}

  forceinline void
  LubRanges<Bdd::BndBddView>::init(const Bdd::BndBddView& x) {
    LubRanges<Bdd::BddVarImp*>::init(x.base().variable());
  }

  }
  namespace Bdd {

  /// Iterator for the unknown values of a BndBddView
  template <>
  class UnknownValues<BndBddView> : public UnknownValues<BddVarImp*> {
  public:
    /// \name Constructors and initialization
    //@{
    /// Default constructor
    UnknownValues(void);
    /// Initialize with ranges for variable implementation \a x
    UnknownValues(const BndBddView& x);
    /// Initialize with ranges for variable implementation \a x
    void init(const BndBddView& x);
    //@}    
  };

  forceinline
  UnknownValues<BndBddView>::UnknownValues(void) {}

  forceinline
  UnknownValues<BndBddView>::UnknownValues(const BndBddView& x) 
    : UnknownValues<BddVarImp*>(x.base().variable()) {}

  forceinline void
  UnknownValues<BndBddView>::init(const BndBddView& x) {
    UnknownValues<BddVarImp*>::init(x.base().variable());
  }
  }
  namespace Set {
  template <>
  class UnknownRanges<Bdd::BndBddView> : public UnknownRanges<Bdd::BddVarImp*> {
  public:
    /// \name Constructors and initialization
    //@{
    /// Default constructor
    UnknownRanges(void);
    /// Initialize with ranges for variable implementation \a x
    UnknownRanges(const Bdd::BndBddView& x);
    /// Initialize with ranges for variable implementation \a x
    void init(const Bdd::BndBddView& x);
    //@}    
  };

  forceinline
  UnknownRanges<Bdd::BndBddView>::UnknownRanges(void) {}

  forceinline
  UnknownRanges<Bdd::BndBddView>::UnknownRanges(const Bdd::BndBddView& x) 
    : UnknownRanges<Bdd::BddVarImp*>(x.base().variable()) {}

  forceinline void
  UnknownRanges<Bdd::BndBddView>::init(const Bdd::BndBddView& x) {
    UnknownRanges<Bdd::BddVarImp*>::init(x.base().variable());
  }

  }
  /*
   * Testing
   *
   */
  forceinline bool
  same(const Bdd::BndBddView& x, const Bdd::BndBddView& y) {
    return same(x.base(),y.base());
  }

  forceinline bool
  before(const Bdd::BndBddView& x, const Bdd::BndBddView& y) {
    return before(x.base(),y.base());
  }

}


// STATISTICS: bdd-var

