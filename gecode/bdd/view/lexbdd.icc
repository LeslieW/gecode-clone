/*
 *  Main authors:
 *     Patrick Pekczynski <pekczynski@ps.uni-sb.de>
 *
 *  Copyright:
 *     Patrick Pekczynski, 2006
 *
 *  Last modified:
 *     $Date$ by $Author$
 *     $Revision$
 *
 *  This file is part of Gecode, the generic constraint
 *  development environment:
 *     http://www.gecode.org
 *
 *  See the file "LICENSE" for information on usage and
 *  redistribution of this file, and for a
 *     DISCLAIMER OF ALL WARRANTIES.
 *
 */


namespace Gecode { namespace Bdd {

  /*
   * Constructors and access
   *
   */

  forceinline
  LexBddView::LexBddView(void) {}

  forceinline
  LexBddView::~LexBddView(void) {
    manager()->dispose(bounds);
    manager()->dispose(remain);
  }

  forceinline
  LexBddView::LexBddView(const BddView& x) 
    : DerivedViewBase<BddView>(x) {
    GecodeBdd d = view.bdd_domain();
    BMI* mgr = manager();
    bounds.init();
    remain.init();
    bounds = BDDTOP;
    remain = BDDTOP;
    if (!mgr->ctrue(d)) {
//       bounds  = conv_hull(mgr, d);
//       GecodeBdd bvars = conv_project(mgr, bounds);
//       remain = mgr->eliminate(d, bvars);

      GecodeBdd bvars = BDDTOP;
      conv_hull_project(mgr, d, bounds, bvars);
      remain = mgr->eliminate(d, bvars);

      unsigned int off = offset();
      unsigned int range = table_width();
      GecodeBdd lex  = lex_bounds(mgr, remain, bvars, off, range);
      remain = lex;
    }
  }

  forceinline void
  LexBddView::init(const BddView& x) {
    view = x; 
    GecodeBdd d = view.bdd_domain();
    BMI* mgr = manager();
    bounds.init();
    remain.init();
    bounds = BDDTOP;
    remain = BDDTOP;
    if (!mgr->ctrue(d)) {
//       bounds  = conv_hull(mgr, d);
//       GecodeBdd bvars = conv_project(mgr, bounds);
//       remain = mgr->eliminate(d, bvars);

      GecodeBdd bvars = BDDTOP;
      conv_hull_project(mgr, d, bounds, bvars);
      remain = mgr->eliminate(d, bvars);

      unsigned int off = offset();
      unsigned int range = table_width();
      GecodeBdd lex = lex_bounds(mgr, remain, bvars, off, range);
      remain = lex;
    }
  }

  /* 
   * Set information
   *
   */
  
  forceinline unsigned int
  LexBddView::glbSize(void) const { 
    if (manager()->ctrue(bounds)) { return 0; }
    BddIterator iter(manager(), bounds);
    int size = 0;
    while (iter()) {
      if (iter.status() == FIX_GLB) { size++; }
      ++iter;
    }
    return size;
  }

  forceinline unsigned int
  LexBddView::lubSize(void) const { 
    if (manager()->ctrue(bounds) && 
	manager()->ctrue(remain)) { return table_width(); }
    BddIterator iter(manager(), bounds);
    int out = 0;
    while (iter()) {
      if (iter.status() == FIX_NOT_LUB) { out++; }
      ++iter;
    }
    return table_width() - out;
  }

  forceinline unsigned int
  LexBddView::unknownSize(void) const { 
    BMI* mgr = manager();
    int size = table_width();
    if (manager()->ctrue(bounds)) { return size; }
    BddIterator iter(mgr, bounds);
    while (iter()) {
      NodeStatus status = iter.status();
      if (status == FIX_GLB || status == FIX_NOT_LUB) { size--; }
      ++iter;
    }
    return size;
  }

  forceinline unsigned int
  LexBddView::cardMin(void) const { return view.cardMin(); }

  forceinline unsigned int
  LexBddView::cardMax(void) const { return view.cardMax(); }

  forceinline int
  LexBddView::lubMin(void) const { return view.lubMin(); }

  forceinline int
  LexBddView::lubMax(void) const { return view.lubMax(); }

  forceinline int
  LexBddView::lubMinN(int n) const { return view.lubMinN(n); }

  forceinline int
  LexBddView::lubMaxN(int n) const { return view.lubMaxN(n); }

  forceinline int
  LexBddView::glbMin(void) const { 
    BMI* mgr = manager();
    if (mgr->ctrue(bounds)) { return BddVarImp::MIN_OF_EMPTY; }
    BddIterator iter(mgr, bounds);
    while (iter()) {
      if (iter.status() == FIX_GLB) {
	int idx = iter.label() - offset();
	return mgr_min() + idx;
      }
      ++iter;
    }
    return BddVarImp::MIN_OF_EMPTY;
  }

  forceinline int 
  LexBddView::glbMax(void) const {
    BMI* mgr = manager();
    if (mgr->ctrue(bounds)) { return BddVarImp::MAX_OF_EMPTY; } 
    BddIterator iter(mgr, bounds);
    int lastglb = -1;
    while (iter()) {
      if (iter.status() == FIX_GLB) {
	int idx = iter.label() - offset();
	lastglb = mgr_min() + idx;
      } 
      ++iter;
    }
    return (lastglb == -1) ? BddVarImp::MAX_OF_EMPTY : lastglb;
  };

  /*
   * Bdd information
   *
   */
  
  forceinline unsigned int 
  LexBddView::offset(void) const { return view.offset(); }

  forceinline unsigned int 
  LexBddView::table_width(void) const { return view.table_width(); }

  forceinline int 
  LexBddView::size(void) const { return view.size(); }

  forceinline GecodeBdd
  LexBddView::getbdd(int i) const { return view.getbdd(i); }

  forceinline GecodeBdd
  LexBddView::getnegbdd(int i) const { return view.getnegbdd(i); }

  forceinline int 
  LexBddView::getlevel(int i) { return view.getlevel(i); }

  forceinline int 
  LexBddView::getvar(int i) { return view.getvar(i); }

  forceinline void
  LexBddView::dom_and(GecodeBdd& d) { view.dom_and(d); }

  forceinline void
  LexBddView::dom_or(GecodeBdd& d) { view.dom_or(d); }

  forceinline int
  LexBddView::mgr_min(void) const { return view.mgr_min(); };

  forceinline int
  LexBddView::mgr_max(void) const { return view.mgr_max(); };

  forceinline int
  LexBddView::valididx(int v)  const { return view.valididx(v); }

  forceinline BMI*
  LexBddView::manager(void) const { return view.manager(); }

  forceinline GecodeBdd 
  LexBddView::bdd_domain(void) const { return view.bdd_domain(); }

  forceinline GecodeBdd 
  LexBddView::bdd_remain(void) const { return remain; }

  forceinline GecodeBdd 
  LexBddView::bdd_bounds(void) const { return bounds; }

  forceinline bool
  LexBddView::assigned(void) const { return view.assigned(); }

  /*
   * Tells
   *
   */

  forceinline ModEvent 
  LexBddView::cardinality(Space* home, unsigned int l, unsigned int u) {
    return view.cardinality(home, l, u);
  }

  forceinline ModEvent
  LexBddView::cardMin(Space* home, unsigned int m) {
    return view.cardMin(home, m);
  }

  forceinline ModEvent
  LexBddView::cardMax(Space* home, unsigned int m) {
    return view.cardMax(home, m);
  }

  forceinline ModEvent 
  LexBddView::include(Space* home, int i, int j) { 
    return view.include(home, i, j);   
  }

  forceinline ModEvent 
  LexBddView::include(Space* home, int i) { return include(home, i, i); }

  forceinline ModEvent 
  LexBddView::exclude(Space* home, int i, int j) { 
    return view.exclude(home, i, j); 
  }

  forceinline ModEvent 
  LexBddView::exclude(Space* home, int i) { return exclude(home, i, i); }

  forceinline ModEvent
  LexBddView::nq(Space* home, int v) { return view.nq(home, v, v); }

  forceinline ModEvent
  LexBddView::nq(Space* home, int a, int b) {
    if (b < view.mgr_min() || a > view.mgr_max()) { return ME_BDD_NONE; }
    Iter::Ranges::Singleton m(a, b);
    GecodeBdd ass = !(view.variable()->gen_assignment(m));
    return tell_formula(home, ass);
  }

  forceinline ModEvent
  LexBddView::eq(Space* home, int v) { return eq(home, v, v); }

  forceinline ModEvent
  LexBddView::eq(Space* home, int a, int b) {
    if (b < view.mgr_min() || a > view.mgr_max()) { return ME_BDD_FAILED; }
    Iter::Ranges::Singleton m(a, b);
    GecodeBdd ass = view.variable()->gen_assignment(m);
    return tell_formula(home, ass);
  }
  
  forceinline ModEvent 
  LexBddView::tell_formula(Space* home, GecodeBdd& d) {
    BMI* mgr = manager();
    d &= bdd_domain(); 

//     GecodeBdd beta  = conv_hull(mgr, d);
//     GecodeBdd bvars = conv_project(mgr, beta);

    GecodeBdd beta = BDDTOP;
    GecodeBdd bvars = BDDTOP;
    conv_hull_project(mgr, d, beta, bvars);    

    GecodeBdd b = bvars;
    d = mgr->eliminate(d, b);
    unsigned int off   = offset();
    unsigned int range = table_width();
    b = bvars;
    GecodeBdd lex = lex_bounds(mgr, d, b, off, range);
    GecodeBdd dom = beta & lex;
    return view.tell_formula(home, dom);
  }

  forceinline ModEvent 
  LexBddView::tell_formula(Space* home, GecodeBdd& beta, GecodeBdd& delta) {
    GecodeBdd oldbnd = bounds;
    GecodeBdd oldrem = remain;
    bounds &= beta;
    BMI* mgr = manager();
    GecodeBdd bvars = BDDTOP;
    conv_project(mgr, bounds, bvars);
    mgr->existquant(remain, delta, bvars);   
    GecodeBdd dom = bounds & remain;
    return view.tell_formula(home, dom);
  }

  forceinline ModEvent
  LexBddView::intersect(Space* home, int i, int j) {
    return view.intersect(home, i, j);
  }

  forceinline ModEvent
  LexBddView::intersect(Space* home, int i) { return intersect(home, i, i); }

  template <class I>
  forceinline ModEvent
  LexBddView::excludeI(Space* home, I& i) { return view.excludeI(home, i); }

  template <class I>
  forceinline ModEvent
  LexBddView::includeI(Space* home, I& i) { return view.includeI(home, i); }

  template <class I>
  forceinline ModEvent
  LexBddView::intersectI(Space* home, I& i) { return view.intersectI(home, i); }

  template <class I>
  forceinline ModEvent
  LexBddView::eqI(Space* home, I& i) {
    int mi = view.mgr_min();
    int ma = view.mgr_max();
    if (i()) {
      if (i.min() < mi || i.min() > ma) { return ME_BDD_FAILED; }
    }
    GecodeBdd ass = view.variable()->gen_assignment(i);
    return tell_formula(home, ass);
  }

  template <class I>
  forceinline ModEvent
  LexBddView::nqI(Space* home, I& i) {
    GecodeBdd ass = !(view.variable()->gen_assignment(i));
    return tell_formula(home, ass);
  }

  /*
   * Dependencies
   *
   */

  forceinline void
  LexBddView::subscribe(Space* home, Propagator* p, PropCond pc,
			  bool process) {
    view.subscribe(home, p, pc, process);
  }

  forceinline void
  LexBddView::cancel(Space* home, Propagator* p, PropCond pc) {
    view.cancel(home, p, pc);
  }
  
  /*
   * Propagator Modification Events
   *
   */

  forceinline ModEvent
  LexBddView::pme(const Propagator* p) { return BddView::pme(p); }
  
  forceinline ModEvent
  LexBddView::pme(ModEvent me) { return BddView::pme(me); }

  /*
   * Cloning
   *
   */

  forceinline void
  LexBddView::update(Space* home, bool share, LexBddView& y) {
    view.update(home, share, y.view);
    bounds.init();
    remain.init();
    bounds = y.bdd_bounds();
    remain = y.bdd_remain();
  }

  /*
   * Serialization
   *
   */
  forceinline Reflection::Arg*
  LexBddView::spec(Space* home, Reflection::VarMap& m) {
    return view.spec(home, m);
  }
  forceinline Reflection::Type*
  LexBddView::type(void) {
    return new Reflection::Type("bdd.LexBddView");
  }

  forceinline void 
  LexBddView::viewdot(void) const {
    return view.viewdot();
  }

  /// Iterator for the values of a LexBddView
  template <>
  class DomValues<LexBddView> : public DomValues<BddVarImp*> {
  public:
    /// \name Constructors and initialization
    //@{
    /// Default constructor
    DomValues(void);
    /// Initialize with ranges for variable implementation \a x
    DomValues(const LexBddView& x);
    /// Initialize with ranges for variable implementation \a x
    void init(const LexBddView& x);
    //@}    
  };

  forceinline
  DomValues<LexBddView>::DomValues(void) {}

  forceinline
  DomValues<LexBddView>::DomValues(const LexBddView& x) 
    : DomValues<BddVarImp*>(x.base().variable()) {}

  forceinline void
  DomValues<LexBddView>::init(const LexBddView& x) {
    DomValues<BddVarImp*>::init(x.base().variable());
  }

  /// Iterator for the values in the greatest lower bound of a LexBddView
  template <>
  class GlbValues<LexBddView> : public GlbValues<BddVarImp*> {
  public:
    /// \name Constructors and initialization
    //@{
    /// Default constructor
    GlbValues(void);
    /// Initialize with ranges for variable implementation \a x
    GlbValues(const LexBddView& x);
    /// Initialize with ranges for variable implementation \a x
    void init(const LexBddView& x);
    //@}    
  };

  forceinline
  GlbValues<LexBddView>::GlbValues(void) {}

  forceinline
  GlbValues<LexBddView>::GlbValues(const LexBddView& x) 
    : GlbValues<BddVarImp*>(x.base().variable()) {}

  forceinline void
  GlbValues<LexBddView>::init(const LexBddView& x) {
    GlbValues<BddVarImp*>::init(x.base().variable());
  }
}
  namespace Set {
  template <>
  class GlbRanges<Bdd::LexBddView> : public GlbRanges<Bdd::BddVarImp*> {
  public:
    /// \name Constructors and initialization
    //@{
    /// Default constructor
    GlbRanges(void);
    /// Initialize with ranges for variable implementation \a x
    GlbRanges(const Bdd::LexBddView& x);
    /// Initialize with ranges for variable implementation \a x
    void init(const Bdd::LexBddView& x);
    //@}    
  };

  forceinline
  GlbRanges<Bdd::LexBddView>::GlbRanges(void) {}

  forceinline
  GlbRanges<Bdd::LexBddView>::GlbRanges(const Bdd::LexBddView& x) 
    : GlbRanges<Bdd::BddVarImp*>(x.base().variable()) {}

  forceinline void
  GlbRanges<Bdd::LexBddView>::init(const Bdd::LexBddView& x) {
    GlbRanges<Bdd::BddVarImp*>::init(x.base().variable());
  }

  template <>
  class LubRanges<Bdd::LexBddView> : public LubRanges<Bdd::BddVarImp*> {
  public:
    /// \name Constructors and initialization
    //@{
    /// Default constructor
    LubRanges(void);
    /// Initialize with ranges for variable implementation \a x
    LubRanges(const Bdd::LexBddView& x);
    /// Initialize with ranges for variable implementation \a x
    void init(const Bdd::LexBddView& x);
    //@}    
  };

  forceinline
  LubRanges<Bdd::LexBddView>::LubRanges(void) {}

  forceinline
  LubRanges<Bdd::LexBddView>::LubRanges(const Bdd::LexBddView& x) 
    : LubRanges<Bdd::BddVarImp*>(x.base().variable()) {}

  forceinline void
  LubRanges<Bdd::LexBddView>::init(const Bdd::LexBddView& x) {
    LubRanges<Bdd::BddVarImp*>::init(x.base().variable());
  }
  }
  namespace Bdd {

  /// Iterator for the unknown values of a LexBddView
  template <>
  class UnknownValues<LexBddView> : public UnknownValues<BddVarImp*> {
  public:
    /// \name Constructors and initialization
    //@{
    /// Default constructor
    UnknownValues(void);
    /// Initialize with ranges for variable implementation \a x
    UnknownValues(const LexBddView& x);
    /// Initialize with ranges for variable implementation \a x
    void init(const LexBddView& x);
    //@}    
  };

  forceinline
  UnknownValues<LexBddView>::UnknownValues(void) {}

  forceinline
  UnknownValues<LexBddView>::UnknownValues(const LexBddView& x) 
    : UnknownValues<BddVarImp*>(x.base().variable()) {}

  forceinline void
  UnknownValues<LexBddView>::init(const LexBddView& x) {
    UnknownValues<BddVarImp*>::init(x.base().variable());
  }
  }
  namespace Set {
  template <>
  class UnknownRanges<Bdd::LexBddView> : 
      public UnknownRanges<Bdd::BddVarImp*> {
  public:
    /// \name Constructors and initialization
    //@{
    /// Default constructor
    UnknownRanges(void);
    /// Initialize with ranges for variable implementation \a x
    UnknownRanges(const Bdd::LexBddView& x);
    /// Initialize with ranges for variable implementation \a x
    void init(const Bdd::LexBddView& x);
    //@}    
  };

  forceinline
  UnknownRanges<Bdd::LexBddView>::UnknownRanges(void) {}

  forceinline
  UnknownRanges<Bdd::LexBddView>::UnknownRanges(const Bdd::LexBddView& x) 
    : UnknownRanges<Bdd::BddVarImp*>(x.base().variable()) {}

  forceinline void
  UnknownRanges<Bdd::LexBddView>::init(const Bdd::LexBddView& x) {
    UnknownRanges<Bdd::BddVarImp*>::init(x.base().variable());
  }

}
  /*
   * Testing
   *
   */
  forceinline bool
  same(const Bdd::LexBddView& x, const Bdd::LexBddView& y) {
    return same(x.base(),y.base());
  }

  forceinline bool
  before(const Bdd::LexBddView& x, const Bdd::LexBddView& y) {
    return before(x.base(),y.base());
  }

}


// STATISTICS: bdd-var

