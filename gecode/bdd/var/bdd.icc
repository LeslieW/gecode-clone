/*
 *  Main authors:
 *     Patrick Pekczynski <pekczynski@ps.uni-sb.de>
 *
 *  Copyright:
 *     Patrick Pekczynski, 2006
 *
 *  Last modified:
 *     $Date: 2007-05-11 15:34:01 +0000 (Fr, 11 Mai 2007) $ by $Author: pekczynski $
 *     $Revision: 4588 $
 *
 *  This file is part of Gecode, the generic constraint
 *  development environment:
 *     http://www.gecode.org
 *
 *  See the file "LICENSE" for information on usage and
 *  redistribution of this file, and for a
 *     DISCLAIMER OF ALL WARRANTIES.
 *
 */


namespace Gecode {


  forceinline
  BddVar::BddVar(void) : var(NULL) {}

  forceinline void
  BddVar::init(Space* home, BMI* m) { 
    var = new (home) Bdd::BddVarImp(home, m); 
  }
  
  forceinline void
  BddVar::init(Space* home, BMI* m, int min, int max) {
    var = new (home) Bdd::BddVarImp(home,m, min, max);
    assert(m == var->manager());
  }


  forceinline void
  BddVar::init(Space* home, BMI* m, int glbMin, int glbMax, 
	       int lubMin, int lubMax,
	       unsigned int cardMin, unsigned int cardMax) {
    var = new (home) Bdd::BddVarImp(home, m, glbMin, glbMax, 
				    lubMin, lubMax, cardMin, cardMax);
    assert(m == var->manager());
  }


  forceinline void
  BddVar::init(Space* home, BMI* m, int glbMin, int glbMax, const IntSet& lubD,
	       unsigned int cardMin, unsigned int cardMax) {
    var = new (home) Bdd::BddVarImp(home, m, glbMin, glbMax, lubD, cardMin, cardMax);
    assert(m == var->manager());
  }

  forceinline void
  BddVar::init(Space* home, BMI* m, const IntSet& glbD, int lubMin, int lubMax,
	       unsigned int cardMin, unsigned int cardMax) {
    var = new (home) Bdd::BddVarImp(home, m, glbD, lubMin, lubMax, cardMin, cardMax);
    assert(m == var->manager());
  }

  forceinline void
  BddVar::init(Space* home, BMI* m, const IntSet& glbD,const IntSet& lubD,
	       unsigned int cardMin, unsigned int cardMax) {
    var = new (home) Bdd::BddVarImp(home, m, glbD, lubD, cardMin, cardMax);
    assert(m == var->manager());
  }

  forceinline void
  BddVar::dispose(Space* home) {
    var->dispose(home);
    var = NULL;
  }

  forceinline BMI*
  BddVar::manager(void) const { return var->manager(); }    

  forceinline Bdd::BddVarImp*
  BddVar::variable(void) const { return var; }

  forceinline bool
  BddVar::contains(int i) const { return var->knownIn(i); }

  forceinline bool
  BddVar::notContains(int i) const { return var->knownOut(i); }

  forceinline bool
  BddVar::assigned(void) const { return var->assigned(); }

  forceinline int
  BddVar::valididx(int v) const { return var->valididx(v); }

  forceinline unsigned int
  BddVar::offset(void) const { return var->offset(); }

  forceinline unsigned int
  BddVar::table_width(void) const { return var->table_width(); }

  forceinline GecodeBdd
  BddVar::getbdd(int i) const { return var->getbdd(i); }

  forceinline GecodeBdd
  BddVar::getnegbdd(int i) const { return var->getnegbdd(i); }

  forceinline int
  BddVar::getlevel(int i)  { return var->getlevel(i); }

  forceinline int
  BddVar::getvar(int i)  { return var->getvar(i); }

  forceinline int
  BddVar::mgr_min(void) const { return var->mgr_min(); }

  forceinline int
  BddVar::mgr_max(void) const { return var->mgr_max(); }

  forceinline void
  BddVar::update(Space* home, bool share, BddVar& x) { 
    var = x.var->copy(home,share); 
  }

  forceinline unsigned int
  BddVar::cardMin(void) const { return var->cardMin(); };

  forceinline unsigned int 
  BddVar::cardMax(void) const { return var->cardMax(); };

  forceinline int 
  BddVar::lubMin(void) const { return var->lubMin(); };

  forceinline int 
  BddVar::lubMax(void) const{ return var->lubMax(); };

  forceinline int 
  BddVar::glbMin(void) const { return var->glbMin(); };

  forceinline int 
  BddVar::glbMax(void) const { return var->glbMax(); };

  forceinline unsigned int 
  BddVar::glbSize(void) const { return var->glbSize(); };

  forceinline unsigned int 
  BddVar::lubSize(void) const { return var->lubSize(); };

  forceinline unsigned int 
  BddVar::unknownSize(void) const { return var->unknownSize(); };

  forceinline GecodeBdd 
  BddVar::bdd_domain(void) const { return var->bdd_domain();}

  forceinline void
  BddVar::dom_and(GecodeBdd& b) { var->dom_and(b); };

  forceinline
  BddVarGlbRanges::BddVarGlbRanges(void) {}

  forceinline
  BddVarGlbRanges::BddVarGlbRanges(const BddVar& x) : iter(x.variable()) {}
  
  forceinline bool
  BddVarGlbRanges::operator()(void) const { return iter(); }
  
  forceinline void
  BddVarGlbRanges::operator++(void) { ++iter; }

  forceinline int
  BddVarGlbRanges::min(void) const { return iter.min(); }

  forceinline int
  BddVarGlbRanges::max(void) const { return iter.max(); }

  forceinline
  BddVarGlbValues::BddVarGlbValues(void) {}

  forceinline
  BddVarGlbValues::BddVarGlbValues(const BddVar& x) : iter(x.variable()) {}
  
  forceinline bool
  BddVarGlbValues::operator()(void) const { return iter(); }
  
  forceinline void
  BddVarGlbValues::operator++(void) { ++iter; }

  forceinline int
  BddVarGlbValues::val(void) const { return iter.val(); }

  forceinline
  BddVarLubRanges::BddVarLubRanges(void) {}

  forceinline
  BddVarLubRanges::BddVarLubRanges(const BddVar& x) : iter(x.variable()) {}
  
  forceinline bool
  BddVarLubRanges::operator()(void) const { return iter(); }
  
  forceinline void
  BddVarLubRanges::operator++(void) { ++iter; }

  forceinline int
  BddVarLubRanges::min(void) const { return iter.min(); }

  forceinline int
  BddVarLubRanges::max(void) const { return iter.max(); }

  forceinline
  BddVarLubValues::BddVarLubValues(void) {}

  forceinline
  BddVarLubValues::BddVarLubValues(const BddVar& x) : iter(x.variable()) {}
  
  forceinline bool
  BddVarLubValues::operator()(void) const { return iter(); }
  
  forceinline void
  BddVarLubValues::operator++(void) { ++iter; }

  forceinline int
  BddVarLubValues::val(void) const {return iter.val();}

  forceinline
  BddVarDomValues::BddVarDomValues(void) {}

  forceinline
  BddVarDomValues::BddVarDomValues(const BddVar& x) : iter(x.variable()) {}
  
  forceinline bool
  BddVarDomValues::operator()(void) const { return iter(); }
  
  forceinline void
  BddVarDomValues::operator++(void) { ++iter; }

  forceinline IntSet
  BddVarDomValues::val(void)  { return iter.val(); }

  forceinline
  BddVarUnknownRanges::BddVarUnknownRanges(void) {}

  forceinline
  BddVarUnknownRanges::BddVarUnknownRanges(const BddVar& x) 
    : iter(x.variable()) {}
  
  forceinline bool
  BddVarUnknownRanges::operator()(void) const { return iter(); }
  
  forceinline void
  BddVarUnknownRanges::operator++(void) { ++iter; }

  forceinline int
  BddVarUnknownRanges::min(void) const { return iter.min(); }

  forceinline int
  BddVarUnknownRanges::max(void) const { return iter.max(); }

}

// STATISTICS: bdd-var
