/* -*- mode: C++; c-basic-offset: 2; indent-tabs-mode: nil -*- */
/*
 *  Main authors:
 *     Mikael Lagerkvist <lagerkvist@gecode.org>
 *     Christian Schulte <schulte@gecode.org>
 *
 *  Copyright:
 *     Mikael Lagerkvist, 2006
 *     Christian Schulte, 2007
 *
 *  Last modified:
 *     $Date$ by $Author$
 *     $Revision$
 *
 *  This file is part of Gecode, the generic constraint
 *  development environment:
 *     http://www.gecode.org
 *
 *  See the file "LICENSE" for information on usage and
 *  redistribution of this file, and for a
 *     DISCLAIMER OF ALL WARRANTIES.
 *
 */

namespace Gecode {

  /** 
   * \brief Advisor storing a single view
   *
   */
  template <class View>
  class ViewAdvisor : public Advisor {
  public:
    /// The single view
    View x; 
    /// Constructor for creation
    template <class Advisor>
    ViewAdvisor(Space* home, Propagator* p, Council<Advisor>& c, View x0);
    /// Constructor for cloning \a a
    ViewAdvisor(Space* home, bool share, Propagator* p, 
                ViewAdvisor<View>& a);
    /** 
     * \brief Schedule advisor's propagator for execution
     *
     * The propagator is scheduled for execution with modification
     * event \a me.
     *
     * If the propagator is currently propagating, then
     * scheduling it will not make the propagator run again.
     *
     */
    void schedule(Space* home, ModEvent me) const;
    /// Delete advisor
    template <class Advisor>
    void dispose(Space* home, Propagator* p, Council<Advisor>& c);
  };


  template <class View>
  template <class Adv>
  forceinline
  ViewAdvisor<View>::ViewAdvisor(Space* home, Propagator* p, 
                                 Council<Adv>& c, View x0)
    : Advisor(home,p,c), x(x0) {
    x.subscribe(home, this);
  }
  template <class View>
  forceinline
  ViewAdvisor<View>::ViewAdvisor(Space* home, bool share, Propagator* p,
                                 ViewAdvisor<View>& a) 
    : Advisor(home,share,p,a) {
    x.update(home,share,a.x);
  }
  template <class View>
  forceinline void
  ViewAdvisor<View>::schedule(Space* home, ModEvent me) const {
    View::schedule(home, propagator(), me);
  }
  template <class View>
  template <class Adv>
  forceinline void
  ViewAdvisor<View>::dispose(Space* home, Propagator* p, Council<Adv>& c) {
    x.cancel(home,this);
    Advisor::dispose(home,p,c);
  }

}

// STATISTICS: kernel-prop
