/* -*- mode: C++; c-basic-offset: 2; indent-tabs-mode: nil -*- */
/*
 *  Main authors:
 *     Christian Schulte <schulte@gecode.org>
 *
 *  Copyright:
 *     Christian Schulte, 2004
 *
 *  Last modified:
 *     $Date$ by $Author$
 *     $Revision$
 *
 *  This file is part of Gecode, the generic constraint
 *  development environment:
 *     http://www.gecode.org
 *
 *  See the file "LICENSE" for information on usage and
 *  redistribution of this file, and for a
 *     DISCLAIMER OF ALL WARRANTIES.
 *
 */

/**
 * \brief Check whether modification event \a me is failed, and forward failure.
 *
 * To be used inside the propagate member function of a propagator
 * or the commit member function of a branching.
 * \ingroup TaskActor
 */
#define GECODE_ME_CHECK(me)                     \
  if (::Gecode::me_failed(me))                  \
    return ::Gecode::ES_FAILED;

/**
 * \brief Check whether \a me is failed or modified, and forward failure.
 *
 * To be used inside the propagate member function of a propagator
 * or the commit member function of a branching.
 * \ingroup TaskActor
 */
#define GECODE_ME_CHECK_MODIFIED(modified, me) {           \
    ModEvent __me__ ## __LINE__ = (me);                    \
    if (::Gecode::me_failed(__me__ ## __LINE__))           \
      return ::Gecode::ES_FAILED;                          \
    modified |= ::Gecode::me_modified(__me__ ## __LINE__); \
  }

/**
 * \brief Check whether modification event \a me is failed, and fail space \a home.
 *
 * To be used inside post functions.
 * \ingroup TaskActor
 */
#define GECODE_ME_FAIL(home,me)                 \
  if (::Gecode::me_failed(me)) {                \
    (home)->fail();                             \
    return;                                     \
  }



/**
 * \brief Check whether execution status \a es is failed or subsumed, and 
 * forward failure or subsumtion.
 *
 * \ingroup TaskActor
 */
#define GECODE_ES_CHECK(es) {                           \
    ::Gecode::ExecStatus __es__ ## __LINE__ = (es);     \
    if (__es__ ## __LINE__ < ::Gecode::ES_OK)           \
      return __es__ ## __LINE__;                        \
  }

/**
 * \brief Check whether execution status \a es is failed, and fail 
 * space \a home.
 *
 * \ingroup TaskActor
 */
#define GECODE_ES_FAIL(home,es) {                               \
    ::Gecode::ExecStatus __es__ ## __LINE__ = (es);             \
    assert(__es__ ## __LINE__ != ::Gecode::__ES_DISPOSED);      \
    assert(__es__ ## __LINE__ != ::Gecode::ES_SUBSUMED);        \
    if (__es__ ## __LINE__ < ::Gecode::ES_OK) {                 \
      (home)->fail(); return;                                   \
    }                                                           \
  }

/**
 * \brief Rewrite propagator by executing post function
 *
 * \ingroup TaskActor
 */
#define GECODE_REWRITE_PROP(prop,post) {                                \
  Propagator* __p__ ## __LINE__ = (prop);                               \
  size_t     __s__ ## __LINE__  = __p__ ## __LINE__->dispose((home));   \
  ExecStatus __es__ ## __LINE__ = (post);                               \
  if (__es__ ## __LINE__ != ::Gecode::ES_OK)                            \
    return ::Gecode::ES_FAILED;                                         \
  return ES_SUBSUMED(__p__ ## __LINE__,__s__ ## __LINE__);              \
}

/**
 * \brief Rewrite current propagator by executing post function
 *
 * \ingroup TaskActor
 */
#define GECODE_REWRITE(post) GECODE_REWRITE_PROP(this,post)


/**
 * \brief Rewrite current, already disposed propagator by executing post function
 *
 * \ingroup TaskActor
 */
#define GECODE_REWRITE_PROP_DISPOSED(prop,post) {                       \
  Propagator* __p__ ## __LINE__ = (prop);                               \
  ExecStatus __es__ ## __LINE__ = (post);                               \
  if (__es__ ## __LINE__ != ::Gecode::ES_OK)                            \
    return ::Gecode::ES_FAILED;                                         \
  return __p__ ## __LINE__->ES_DISPOSED(sizeof(*__p__ ## __LINE__));    \
}

/**
 * \brief Rewrite current, already disposed propagator by executing post function
 *
 * \ingroup TaskActor
 */
#define GECODE_REWRITE_DISPOSED(post) GECODE_REWRITE_PROP_DISPOSED(this,home)


/**
 * \def GECODE_NEVER
 * \brief Assert that this command is never executed
 *
 * This is preferred over assert(false) as it is used for optimization,
 * if supported by a compiler (for example, Microsoft Visual C++).
 *
 */

#if defined(_MSC_VER) && defined(NDEBUG)

#define GECODE_NEVER __assume(false);

#else

#define GECODE_NEVER assert(false);

#endif

/**
 * \def GECODE_ASSUME
 * \brief Assert certain property
 *
 * This might be used for optimization as well (for example, 
 * Microsoft Visual C++), otherwise it behaves like any
 * assert.
 *
 */

#if defined(_MSC_VER) && defined(NDEBUG)

#define GECODE_ASSUME(p) __assume((p));

#else

#define GECODE_ASSUME(p) assert((p));

#endif

// STATISTICS: kernel-other
