/* -*- mode: C++; c-basic-offset: 2; indent-tabs-mode: nil -*- */
/*
 *  Main authors:
 *     Guido Tack <tack@gecode.org>
 *
 *  Copyright:
 *     Guido Tack, 2007
 *
 *  Last modified:
 *     $Date$ by $Author$
 *     $Revision$
 *
 *  This file is part of Gecode, the generic constraint
 *  development environment:
 *     http://www.gecode.org
 *
 *  Permission is hereby granted, free of charge, to any person obtaining
 *  a copy of this software and associated documentation files (the
 *  "Software"), to deal in the Software without restriction, including
 *  without limitation the rights to use, copy, modify, merge, publish,
 *  distribute, sublicense, and/or sell copies of the Software, and to
 *  permit persons to whom the Software is furnished to do so, subject to
 *  the following conditions:
 *
 *  The above copyright notice and this permission notice shall be
 *  included in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#include <iostream>
#include <cstring>
#include <vector>
#include "gecode/support/map.hh"

namespace Gecode { namespace Reflection {
  
  /// Exception for errors during reflection
  class ReflectionException : public Exception {
  public:
    /// Constructor
    ReflectionException(const char* what) : Exception("Reflection", what) {}
  };
  
  class ArrayArg;
  class IntArrayArg;
  class StringArg;
  
  /**
    * \brief Arguments for actor and variable specifications
    *
    * \ingroup TaskIntReflect
    */
  class Arg {
  public:
    /// Test if this represents an integer
    bool         isInt(void);
    /// Return the integer that this argument represents
    int          toInt(void);
    /// Test if this represents a variable
    bool         isVar(void);
    /// Return the variable number that this argument represents
    int          toVar(void);
    /// Test if this represents an array
    bool         isArray(void);
    /// Return the array that this argument represents
    ArrayArg*    toArray(void);
    /// Test if this represents an array
    bool         isIntArray(void);
    /// Return the array that this argument represents
    IntArrayArg* toIntArray(void);
    /// Test if this represents a string
    bool         isString(void);
    /// Return the string that this argument represents
    Support::String toString(void);
    /// Test if this represents a pair
    bool         isPair(void);
    /// Return the first component of the pair that this argument represents
    Arg*         first(void);
    /// Return the second component of the pair that this argument represents
    Arg*         second(void);
    /// Destructor
    GECODE_KERNEL_EXPORT virtual ~Arg(void);
  };
  
  /**
    * \brief Integer arguments
    * \ingroup TaskIntReflect
    */
  class IntArg : public Arg {
  public:
    /// Constructor
    IntArg(int i0);
    /// The integer represented by this argument
    int i;
  };

  /**
    * \brief %Variable arguments
    * \ingroup TaskIntReflect
    */
  class VarArg : public Arg {
  public:
    /// Constructor
    VarArg(int i0);
    /// The variable number represented by this argument
    int i;
  };

  /**
    * \brief Array arguments
    * \ingroup TaskIntReflect
    */
  class ArrayArg : public Arg {
  private:
    /// Size of the array
    int  n;
    /// The actual array
    Arg** a;
  public:
    /// Constructor
    ArrayArg(int n0);
    /// Destructor
    GECODE_KERNEL_EXPORT virtual ~ArrayArg(void);
    
    const Arg* operator[](int i) const;
    Arg*& operator[](int i);
    int size(void) const;
  };

  /**
    * \brief Integer array arguments
    * \ingroup TaskIntReflect
    */
  class IntArrayArg : public Arg {
  private:
    /// Size of the array
    int  n;
    /// The actual array
    int* a;    
  public:
    /// Constructor
    IntArrayArg(int n0);
    /// Construct from given array \a a
    template <class A> IntArrayArg(const A& a);
    /// Destructor
    GECODE_KERNEL_EXPORT virtual ~IntArrayArg(void);
    
    const int& operator[](int i) const;
    int& operator[](int i);
    int size(void) const;
  };

  /**
    * \brief Iterate over an IntArrayArg, interpreting consecutive
    * pairs of integers as ranges
    *
    * \ingroup TaskIntReflect
    */
  class IntArrayArgRanges {
  private:
    /// The array
    Reflection::IntArrayArg* a;
    /// The current position
    int n;
  public:
    /// Constructor
    IntArrayArgRanges(Reflection::IntArrayArg* a0) : a(a0), n(0) {}
    /// Test whether iterator is still at a valid range
    bool operator()(void) { return n < a->size(); }
    /// Move iterator to next range
    void operator++(void) { n += 2; }
    /// Minimum of current range
    int min(void) const { return (*a)[n]; }
    /// Maximum of current range
    int max(void) const { return (*a)[n+1]; }
    /// Width of current range
    unsigned int width(void) const { 
      return static_cast<unsigned int>(max() - min()) + 1; 
    }
  };

  /**
    * \brief String arguments
    * \ingroup TaskIntReflect
    */
  class StringArg : public Arg {
  public:
    /// Constructor
    StringArg(const Support::String& s0);
    /// The string represented by this argument
    Support::String s;
  };
  
  /**
    * \brief Pair arguments
    * \ingroup TaskIntReflect
    */
  class PairArg : public Arg {
  public:
    /// Constructor
    PairArg(Arg* a0, Arg* b0);
    /// Destructor
    GECODE_KERNEL_EXPORT virtual ~PairArg(void);
    /// The first component
    Arg* a;
    /// The second component
    Arg* b;
  };
  
  /**
    * \brief %Variable specification
    * \ingroup TaskIntReflect
    */
  class VarSpec {
  private:
    /// The variable type identifier for this variable
    int  _vti;

    class Domain {
    public:
      /// The name of this variable
      Support::String _n;
      /// A representation of the domain of this variable
      Arg* _dom;
      /// Reference count
      int r;
      /// Constructor
      Domain(Arg* domain);
      /// Destructor
      ~Domain(void);
    };
    /// A representation of the domain of this variable
    Domain* _dom;
  public:
    /// Construct specification for a variable
    VarSpec(int vti, Arg* domain);
    /// Copy constructor
    VarSpec(const VarSpec& s);
    /// Assignment operator
    const VarSpec& operator=(const VarSpec& s);
    /// Destructor
    ~VarSpec(void);
    /// Set the name for this variable
    void name(const Support::String& n0);
    /// Get the name of this variable
    Support::String name(void) const;
    /// Return if variable has a name
    bool hasName(void) const;
    /// Get the domain of this variable
    Arg* dom(void) const;
    // Get the variable type identifier for this variable
    int vti(void) const;
  };
  
  /**
    * \brief %Actor specification
    * \ingroup TaskIntReflect
    */
  class ActorSpec {
  private:
    class Arguments {
    public:
      /// The name of this actor
      Support::String _name;
      /// The size of the argument array
      int   size;
      /// The number of arguments of this actor
      int   n;
      /// The arguments of this actor
      Arg** a;
      /// Reference counter
      int r;
      /// Construct empty arguments
      Arguments(const Support::String&);
      /// Destructor
      ~Arguments(void);
    };
    Arguments* _args;
  public:
    /// Construct actor specification with \a name
    ActorSpec(const Support::String& name);
    /// Copy constructor
    ActorSpec(const ActorSpec& s);
    /// Assignment operator
    const ActorSpec& operator=(const ActorSpec& s);
    /// Destructor
    ~ActorSpec(void);
    
    /// Return argument \a i
    Arg* operator[](int i) const;
    /// Return number of arguments
    int noOfArgs(void) const;
    /// Add \a arg to the specification (as last argument)
    void add(Arg* arg);
    /// Return name
    Support::String name(void) const;
    /// Return if name is not empty
    bool hasName(void) const;

    /// Add \a a to specification \a spec
    ActorSpec& operator<<(Arg* a);
    /// Add \a i to specification \a spec
    ActorSpec& operator<<(int i);
    /// Add \a i to specification \a spec
    ActorSpec& operator<<(unsigned int i);
    /// Add \a d to specification \a spec, where \a d is cast into an integer
    ActorSpec& operator<<(double d);
  };
    
  class VarMap;

  /**
    * \brief Iterating actor specifications
    *
    * Use this iterator to access specifications of all actors (propagators 
    * and branchings) of a space. The iterator also provides access to the
    * corresponding variables map.
    *
    * \ingroup TaskIntReflect
    */
  class SpecIter {
  private:
    /// The variable map used by this iterator
    VarMap*    m;
    /// The space for which to iterate the actors
    Space*     s;
    /// The current actor
    ActorLink *cur;
    /// The current ActorSpec
    ActorSpec* curSpec;
  public:
    /// Constructor
    SpecIter(Space*, VarMap&);
    /// Test whether iterator still has actor specifications or is done
    bool operator()(void) const;
    /// Move iterator to next actor
    void operator++(void);
    /// Return actor specification for current iterator position
    ActorSpec& actor(void) const;
  };

  /// Registry of constraint posting and variable creation functions
  class Registry {
  public:
    /// The type of constraint posting functions
    typedef void (*poster) (Space*, const VarMap&, const ActorSpec&);
    /// The type of variable creation functions
    typedef VarBase* (*varCreator) (Space*, VarSpec&);

    /// Create a new variable in \a home from \a spec and return it
    GECODE_KERNEL_EXPORT
    VarBase* createVar(Space* home, VarSpec& spec);

    /// Post constraint in \a home for \a spec using variables \a vars
    GECODE_KERNEL_EXPORT
    void post(Space* home, const VarMap& vm, const ActorSpec& spec);

    /// Register variable creation function for variable type identifier \a vti
    GECODE_KERNEL_EXPORT
    void add(int vti, varCreator vc);
    /// Register constraint posting function for constraint name \a id
    GECODE_KERNEL_EXPORT
    void add(const Support::String& id, poster p);
    /// Print list of all registered posters to \a out
    GECODE_KERNEL_EXPORT void print(std::ostream& out);
  private:
    /// The registry of constraint posting functions
    Support::StringMap<poster> posters;
    /// The registry of variable creation functions
    Support::IntMap<varCreator> varCreators;
  };
  
  /// The registry object
  GECODE_KERNEL_EXPORT extern Registry registry;

  /** \brief Class used for registering propagators
    *
    * The registered Propagator class \a P has to provide two functions:
    *  - static Support::String name(void)
    *  - static void post(Space*, const VarMap&, const ActorSpec&)
    */
  template <class P>
  class Registrar {
  public:
    /// Default constructor
    Registrar(void);
  };

#define GECODE_REGISTER1(P) \
  ::Gecode::Reflection::Registrar< P > GECODE_FRESH(r);
#define GECODE_REGISTER2(P1,P2) \
  ::Gecode::Reflection::Registrar< P1,P2 > GECODE_FRESH(r);
#define GECODE_REGISTER3(P1,P2,P3) \
  ::Gecode::Reflection::Registrar< P1,P2,P3 > GECODE_FRESH(r);
#define GECODE_REGISTER4(P1,P2,P3,P4) \
  ::Gecode::Reflection::Registrar< P1,P2,P3,P4 > GECODE_FRESH(r);
#define GECODE_REGISTER5(P1,P2,P3,P4,P5) \
  ::Gecode::Reflection::Registrar< P1,P2,P3,P4,P5 > GECODE_FRESH(r);
#define GECODE_REGISTER6(P1,P2,P3,P4,P5,P6) \
  ::Gecode::Reflection::Registrar< P1,P2,P3,P4,P5,P6 > GECODE_FRESH(r);

  /**************************************
   * Implementations
   **************************************/
  
  
  /*
   * Arguments
   *
   */
  
  forceinline bool
  Arg::isInt(void) {
    return (dynamic_cast<IntArg*>(this) != NULL);
  }
  forceinline int
  Arg::toInt(void) {
    IntArg* ia = dynamic_cast<IntArg*>(this);
    if (ia == NULL)
      throw ReflectionException("not an IntArg");
    return ia->i;
  }

  forceinline bool
  Arg::isVar(void) {
    return (dynamic_cast<VarArg*>(this) != NULL);
  }
  forceinline int
  Arg::toVar(void) {
    VarArg* va = dynamic_cast<VarArg*>(this);
    if (va == NULL)
      throw ReflectionException("not a VarArg");
    return va->i;
  }

  forceinline bool
  Arg::isArray(void) {
    return (dynamic_cast<ArrayArg*>(this) != NULL);
  }
  forceinline ArrayArg*
  Arg::toArray(void) {
    ArrayArg* aa = dynamic_cast<ArrayArg*>(this);
    if (aa == NULL)
      throw ReflectionException("not an ArrayArg");
    return aa;
  }
  forceinline bool
  Arg::isIntArray(void) {
    return (dynamic_cast<IntArrayArg*>(this) != NULL);
  }
  forceinline IntArrayArg*
  Arg::toIntArray(void) {
    IntArrayArg* aa = dynamic_cast<IntArrayArg*>(this);
    if (aa == NULL)
      throw ReflectionException("not an IntArrayArg");
    return aa;
  }

  forceinline bool
  Arg::isString(void) {
    return (dynamic_cast<StringArg*>(this) != NULL);
  }
  forceinline Support::String
  Arg::toString(void) {
    StringArg* sa = dynamic_cast<StringArg*>(this);
    if (sa == NULL)
      throw ReflectionException("not a StringArg");
    return sa->s;
  }

  forceinline bool
  Arg::isPair(void) {
    return (dynamic_cast<PairArg*>(this) != NULL);
  }
  forceinline Arg*
  Arg::first(void) {
    PairArg* pa = dynamic_cast<PairArg*>(this);
    if (pa == NULL)
      throw ReflectionException("not a PairArg");
    return pa->a;
  }
  forceinline Arg*
  Arg::second(void) {
    PairArg* pa = dynamic_cast<PairArg*>(this);
    if (pa == NULL)
      throw ReflectionException("not a PairArg");
    return pa->b;
  }


  forceinline
  IntArg::IntArg(int i0) : i(i0) {}

  forceinline const Arg*
  ArrayArg::operator[](int i) const {
    if (i >= n)
      throw ReflectionException("Array index out of range");
    return a[i];
  }
  forceinline Arg*&
  ArrayArg::operator[](int i) {
    if (i >= n)
      throw ReflectionException("Array index out of range");
    return a[i];
  }
  forceinline int
  ArrayArg::size(void) const {
    return n;
  }
  forceinline
  ArrayArg::ArrayArg(int n0) : n(n0) {
    a = static_cast<Arg**>(Memory::malloc(sizeof(Arg*)*n));
  }

  forceinline const int&
  IntArrayArg::operator[](int i) const {
    if (i >= n)
      throw ReflectionException("Array index out of range");
    return a[i];
  }
  forceinline int&
  IntArrayArg::operator[](int i) {
    if (i >= n)
      throw ReflectionException("Array index out of range");
    return a[i];
  }
  forceinline int
  IntArrayArg::size(void) const {
    return n;
  }
  forceinline
  IntArrayArg::IntArrayArg(int n0) : n(n0) {
    a = static_cast<int*>(Memory::malloc(sizeof(int)*n));
  }
  template<class A>
  forceinline
  IntArrayArg::IntArrayArg(const A& a0) : n(a0.size()) {
    a = static_cast<int*>(Memory::malloc(sizeof(int)*n));
    for (int i=n; i--;)
      a[i] = a0[i];
  }

  forceinline
  StringArg::StringArg(const Support::String& s0) : s(s0) {}

  forceinline
  PairArg::PairArg(Arg* a0, Arg* b0) : a(a0), b(b0) {}

  forceinline
  VarArg::VarArg(int i0) : i(i0) {}
  
  /*
   * Variable specifications
   *
   */

  forceinline
  VarSpec::Domain::Domain(Arg* domain) : _dom(domain), r(1) {}

  forceinline
  VarSpec::Domain::~Domain(void) {
    delete _dom;    
  }

  forceinline
  VarSpec::VarSpec(int vti, Arg* dom) 
  : _vti(vti), _dom(new Domain(dom)) {}

  forceinline
  VarSpec::VarSpec(const VarSpec& s) : _vti(s._vti), _dom(s._dom) {
    _dom->r++;
  }
  
  forceinline const VarSpec&
  VarSpec::operator=(const VarSpec& s) {
    if (this != &s) {
      if (--_dom->r == 0)
        delete _dom;
      _vti = s._vti;
      _dom = s._dom;
      _dom->r++;
    }
    return *this;
  }
  
  forceinline
  VarSpec::~VarSpec(void) {
    if (--_dom->r == 0)
      delete _dom;
  }

  forceinline void
  VarSpec::name(const Support::String& n) {
    _dom->_n = n;
  }
  
  forceinline Support::String
  VarSpec::name(void) const {
    return _dom->_n;
  }

  forceinline bool
  VarSpec::hasName(void) const {
    return !_dom->_n.empty();
  }

  forceinline int
  VarSpec::vti(void) const {
    return _vti;
  }

  forceinline Arg*
  VarSpec::dom(void) const {
    return _dom->_dom;
  }


  /*
   * Actor specifications
   *
   */

  forceinline
  ActorSpec::Arguments::Arguments(const Support::String& name)
   :  _name(name), size(4), n(0), r(1) {
     a = static_cast<Arg**>(Memory::malloc(sizeof(Arg*)*size));
  }

  forceinline
  ActorSpec::Arguments::~Arguments(void) {
    for (int i=n; i--;)
      delete a[i];
    Memory::free(a);
  }

  forceinline
  ActorSpec::ActorSpec(const Support::String& name) {
    _args = new Arguments(name);
  }

  forceinline
  ActorSpec::ActorSpec(const ActorSpec& s) : _args(s._args) {
    _args->r++;
  }
  
  forceinline
  const ActorSpec&
  ActorSpec::operator=(const ActorSpec& s) {
    if (this != &s) {
      if (--_args->r == 0)
        delete _args;
      _args = s._args;
      _args->r++;
    }
    return *this;
  }

  forceinline Arg*
  ActorSpec::operator[](int i) const {
    if (i >= _args->n)
      throw ReflectionException("Array index out of range");
    return _args->a[i];
  }

  forceinline int
  ActorSpec::noOfArgs(void) const {
    return _args->n;
  }

  forceinline Support::String
  ActorSpec::name(void) const {
    return _args->_name;
  }

  forceinline bool
  ActorSpec::hasName(void) const {
    return !_args->_name.empty();
  }

  forceinline
  ActorSpec::~ActorSpec(void) {
    if (--_args->r == 0)
      delete _args;
  }

  forceinline void
  ActorSpec::add(Arg* arg) {
    if (_args->n == _args->size) {
      // resize
      _args->size = _args->size * 3 / 2;
      Arg** newargs =
        static_cast<Arg**>(Memory::malloc(sizeof(Arg*)*_args->size));
      for (int i=_args->n; i--;)
        newargs[i] = _args->a[i];
      Memory::free(_args->a);
      _args->a = newargs;
    }
    _args->a[_args->n] = arg;
    _args->n++;
  }

  forceinline ActorSpec&
  ActorSpec::operator<<(Arg* arg) {
    add(arg);
    return (*this);
  }
  
  forceinline ActorSpec&
  ActorSpec::operator<<(int i) {
    return (*this) << new IntArg(i);
  }

  forceinline ActorSpec&
  ActorSpec::operator<<(unsigned int i) {
    return (*this) << new IntArg(static_cast<int>(i));
  }

  forceinline ActorSpec&
  ActorSpec::operator<<(double i) {
    return (*this) << new IntArg(static_cast<int>(i));
  }
  
  /*
   * Specification iterator
   *
   */
   
  forceinline bool
  SpecIter::operator()(void) const {
    return cur != &s->a_actors;
  }

  forceinline
  SpecIter::SpecIter(Space* s0, VarMap& m0) : m(&m0), s(s0),
    curSpec(NULL) {
    cur = s->a_actors.next();
    if ((*this)())
      curSpec = &static_cast<Actor*>(cur)->spec(s,*m);
  }

  forceinline void
  SpecIter::operator++(void) {
    delete curSpec;
    cur = cur->next();
    if ((*this)())
      curSpec = &static_cast<Actor*>(cur)->spec(s,*m);
  }

  forceinline ActorSpec&
  SpecIter::actor(void) const {
    return *curSpec;
  }

  /** \brief String representation for View types, used for name mangling
    */
  template <class View>
  class TypeOf {
  public:
    /// Return string representation
    static Support::String t(void) { return View::type(); }
  };
  
  /** \brief String representation for bool, used for name mangling
    */
  template <>
  class TypeOf<bool> {
  public:
    /// Return string representation
    static Support::String t(void) { return Support::String("bool"); }
  };

  /** \brief String representation for ints, used for name mangling
    */
  template <>
  class TypeOf<int> {
  public:
    /// Return string representation
    static Support::String t(void) { return Support::String("int"); }
  };

  /** \brief String representation for doubles, used for name mangling
    */
  template <>
  class TypeOf<double> {
  public:
    /// Return string representation
    static Support::String t(void) { return Support::String("double"); }
  };

}
  class IntSet;
namespace Reflection {

  /** \brief String representation for IntSets, used for name mangling
    */
  template <>
  class TypeOf<const IntSet> {
  public:
    /// Return string representation
    static Support::String t(void) { return Support::String("IntSet"); }    
  };

  /// Mangle name with type information
  template <class View0>
  forceinline Support::String
  mangle(const Support::String& name) {
    return name + "<" + TypeOf<View0>::t() + ">";    
  }
  /// Mangle name with type information
  template <class View0, class View1>
  forceinline Support::String
  mangle(const Support::String& name) {
    return name + "<" + TypeOf<View0>::t() + "," + TypeOf<View1>::t() + ">";
  }
  /// Mangle name with type information
  template <class View0, bool b>
  forceinline Support::String
  mangle(const Support::String& name) {
    return name + "<" + TypeOf<View0>::t()
         + "," + (b ? "true" : "false") + ">";
  }
  /// Mangle name with type information
  template <class View0, class View1, class View2>
  forceinline Support::String
  mangle(const Support::String& name) {
    return name + "<" + TypeOf<View0>::t()
         + "," + TypeOf<View1>::t() + ","
         + TypeOf<View2>::t() + ">";
  }
  /// Mangle name with type information
  template <class View0, class View1, bool b>
  forceinline Support::String
  mangle(const Support::String& name) {
    return name + "<" + TypeOf<View0>::t()
         + "," + TypeOf<View1>::t()
         + "," + (b ? "true" : "false") + ">";
  }
  /// Mangle name with type information
  template <class View0, class View1, class View2, class View3>
  forceinline Support::String
  mangle(const Support::String& name) {
    return name + "<" + TypeOf<View0>::t()
         + "," + TypeOf<View1>::t()
         + "," + TypeOf<View2>::t()
         + "," + TypeOf<View3>::t() + ">";
  }
  /// Mangle name with type information
  template <class View0, class View1, class View2, bool b>
  forceinline Support::String
  mangle(const Support::String& name) {
    return name + "<" + TypeOf<View0>::t()
         + "," + TypeOf<View1>::t()
         + "," + TypeOf<View2>::t()
         + "," + (b ? "true" : "false") + ">";
  }
  
  template <class P>
  forceinline
  Registrar<P>::Registrar(void) {
    registry.add(P::name(), &P::post);
  }

}}

// STATISTICS: kernel-core
