/* -*- mode: C++; c-basic-offset: 2; indent-tabs-mode: nil -*- */
/*
 *  Main authors:
 *     Guido Tack <tack@gecode.org>
 *
 *  Copyright:
 *     Guido Tack, 2007
 *
 *  Last modified:
 *     $Date$ by $Author$
 *     $Revision$
 *
 *  This file is part of Gecode, the generic constraint
 *  development environment:
 *     http://www.gecode.org
 *
 *  Permission is hereby granted, free of charge, to any person obtaining
 *  a copy of this software and associated documentation files (the
 *  "Software"), to deal in the Software without restriction, including
 *  without limitation the rights to use, copy, modify, merge, publish,
 *  distribute, sublicense, and/or sell copies of the Software, and to
 *  permit persons to whom the Software is furnished to do so, subject to
 *  the following conditions:
 *
 *  The above copyright notice and this permission notice shall be
 *  included in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#include <sstream>

namespace Gecode { namespace Reflection {
  
  class VarMapIter;

  /**
    * \brief Mapping %Gecode variables to variable specifications
    * \ingroup TaskIntReflect
    */
  class VarMap {
    friend class VarMapIter;
  private:
    class VarMapImp;
    /// The actual map
    VarMapImp* m;
  public:
    /// Default constructor
    GECODE_KERNEL_EXPORT VarMap(void);
    /// Destructor
    GECODE_KERNEL_EXPORT ~VarMap(void);
    
    /// Return index for variable \a x
    GECODE_KERNEL_EXPORT int index(VarBase* x) const;
    /// Return index for variable with name \a n
    GECODE_KERNEL_EXPORT int index(const Support::String& n) const;

    /// Return if variable with name \a n is known
    GECODE_KERNEL_EXPORT bool nameIsKnown(const Support::String& n) const;

    /// Return if variable \a x has a name
    GECODE_KERNEL_EXPORT bool hasName(VarBase* x) const;
    /// Return if variable at index \a i has a name
    GECODE_KERNEL_EXPORT bool hasName(int i) const;

    /// Return name for variable \a x
    GECODE_KERNEL_EXPORT Support::String name(VarBase* x) const;
    /// Return name for variable at index \a i
    GECODE_KERNEL_EXPORT Support::String name(int i) const;

    /// Return variable with name \a n
    GECODE_KERNEL_EXPORT VarBase* var(const Support::String& n) const;
    /// Return variable at index \a i
    GECODE_KERNEL_EXPORT VarBase* var(int i) const;

    /// Return specification for variable \a x
    GECODE_KERNEL_EXPORT VarSpec& spec(VarBase* x) const;
    /// Return specification for variable at index \a i
    GECODE_KERNEL_EXPORT VarSpec& spec(int i) const;
    /// Return specification for variable with name \a n
    GECODE_KERNEL_EXPORT VarSpec& spec(const Support::String& n) const;

    /// Register name \a n for variable \a x
    GECODE_KERNEL_EXPORT void name(VarBase* x, const Support::String& n);

    /// Insert specification \a vs for variable \a x, return index
    GECODE_KERNEL_EXPORT int put(VarBase* x, VarSpec* vs);

    /// \name Interface for modeling
    //@{
    /// Insert specification for variable \a v with name \a n
    template <class Var> void
    put(Space* home, const Var& v, const Support::String& n);
    /// Insert specifications for variables in \a x with name \a n
    template <class Var> void
    putArray(Space* home, const VarArgArray<Var>& v,
             const Support::String& n);
    /// Insert specifications for variables in \a x with name \a n
    template <class Var> void
    putArray(Space* home, const VarArray<Var>& v, const Support::String& n);
    //@}
  };
  
  /**
    * \brief Iterating a variable map
    *
    * The variable map is filled dynamically while iterating over the
    * actors of a space. The iterator will signal that it is done when all
    * currently known variables have been iterated, but it will later become
    * available again once new variables are encountered.
    *
    * \ingroup TaskIntReflect
    */
  class VarMapIter {
  private:
    /// The variable map to iterate
    VarMap& m;
    /// The current index
    unsigned int i;
  public:
    /// Construct iterator for variable map \a m
    GECODE_KERNEL_EXPORT VarMapIter(VarMap& m);
    /// Test whether iterator still has variables or is done
    GECODE_KERNEL_EXPORT bool operator()(void) const;
    /// Return variable specification for current iterator position
    GECODE_KERNEL_EXPORT VarSpec& var(void) const;
    /// Move iterator to next variable
    GECODE_KERNEL_EXPORT void operator++(void);
  };

  /*
   * Variable maps
   *
   */

  template <class Var> void
  VarMap::put(Space* home, const Var& x, const Support::String& n) {
    typename VarViewTraits<Var>::View v(x);
    name(v.variable(), n);
  }

  template <class Var> void
  VarMap::putArray(Space* home, const VarArgArray<Var>& x,
                   const Support::String& n) {
    for (int i=0; i<x.size(); i++) {
      std::stringstream s;
      s << i;
      put(home, x[i], n+Support::String(s.str().c_str()));
    }
  }
  template <class Var> void
  VarMap::putArray(Space* home, const VarArray<Var>& x,
                   const Support::String& n) {
    for (int i=0; i<x.size(); i++) {
      std::stringstream s;
      s << i;
      put(home, x[i], n+Support::String(s.str().c_str()));
    }
  }

}}

// STATISTICS: kernel-core
