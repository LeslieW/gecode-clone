/* -*- mode: C++; c-basic-offset: 2; indent-tabs-mode: nil -*- */
/*
 *  Main authors:
 *     Christian Schulte <schulte@gecode.org>
 *
 *  Copyright:
 *     Christian Schulte, 2008
 *
 *  Last modified:
 *     $Date$ by $Author$
 *     $Revision$
 *
 *  This file is part of Gecode, the generic constraint
 *  development environment:
 *     http://www.gecode.org
 *
 *  Permission is hereby granted, free of charge, to any person obtaining
 *  a copy of this software and associated documentation files (the
 *  "Software"), to deal in the Software without restriction, including
 *  without limitation the rights to use, copy, modify, merge, publish,
 *  distribute, sublicense, and/or sell copies of the Software, and to
 *  permit persons to whom the Software is furnished to do so, subject to
 *  the following conditions:
 *
 *  The above copyright notice and this permission notice shall be
 *  included in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

namespace Gecode {

  /**
   * \defgroup FuncMemScratch Scratch area memory management
   *
   * A scratch area provides a handle to temporary memory owned by
   * a space. The memory will be managed in a stack fashion, that is,
   * the memory allocated through a scratch area will be released
   * only after the scratch area is deleted and all other scratch areas
   * created later also have been deleted.
   *
   * In case a memory request cannot be fulfilled from a space's scratch
   * area, heap memory is allocated and returned to the operating system
   * as soon as the scratch area is deleted.
   *
   * \ingroup FuncMem
   */
  //@{
  /// Handle to scratch area
  class ScratchArea {
  private:
    /// Location to space
    Space* home;
    /// Free memory to reset
    size_t free_reset;
    /// Number of memory blocks allocated by malloc
    unsigned int n_malloc;
    /// Either have an array of pointer to blocks or just two entries
    union {
      /// Structure for arbitrarily many blocks
      struct {
        /// Limit for memory blocks
        unsigned int l_malloc;
        /// Pointer to array of memory blocks allocated by malloc
        void** b_malloc;
      } any;
      /// Structure for atmost two blocks
      struct {
        /// Pointer to first block
        void* fst;
        /// Pointer to second block
        void* snd;
      } two;
    } at;
  public:
    /// Initialize scratch area from space
    ScratchArea(Space* home);
    /// Allocate memory from scratch area
    void* alloc(size_t s);
    /// Free memory previously allocated (noop)
    void free(void* p, size_t s);
    /** 
     * \brief Allocate block of \a n objects of type \a T from scratch area
     *
     * Note that this function implements C++ semantics: the default
     * constructor of \a T is run for all \a n objects.
     */
    template <class T>
    T* talloc(unsigned int n=1);
    /** 
     * \brief Delete \a n objects allocated from the scratch area starting at \a b
     *
     * Note that this function implements C++ semantics: the destructor
     * of \a T is run for all \a n objects.
     *
     * Note that the memory is not freed, the only effect is running the
     * destructors.
     */
    template <class T>
    void tfree(T* b, unsigned int n=1);
    /**
     * \brief Reallocate block of \a n objects starting at \a b to \a m objects of type \a T from the scratch area
     *
     * Note that this function implements C++ semantics: the copy constructor
     * of \a T is run for all \f$\min(n,m)$\f objects, the default
     * constructor of \a T is run for all remaining 
     * \f$\max(n,m)-\min(n,m)$\f objects, and the destrucor of \a T is
     * run for all \a n objects in \a b.
     *
     * Returns the address of the new block.
     */
    template <class T>
    T* trealloc(T* b, unsigned int n, unsigned int m);
    /// Return memory
    ~ScratchArea(void);
  };
  //@}


  /*
   * Implementation
   *
   */
  forceinline
  ScratchArea::ScratchArea(Space* h) 
    : home(h), free_reset(home->ssa->free), n_malloc(0) {}

  forceinline void*
  ScratchArea::alloc(size_t s) {
    void* p;
    if (home->ssa->alloc(s,p))
      return p;
    p = Memory::malloc(s);
    switch (++n_malloc) {
    case 0: 
      GECODE_NEVER;
    case 1:
      at.two.fst = p; break;
    case 2:
      at.two.snd = p; break;
    case 3:
      {
        void** b = static_cast<void**>(Memory::malloc(sizeof(void*) * 8));
        b[0]=at.two.fst; b[1]=at.two.snd; b[2]=p;
        at.any.l_malloc = 8;
        at.any.b_malloc = b;
      }
      break;
    default:
      if (at.any.l_malloc == n_malloc) {
        unsigned int l = (3 * n_malloc) / 2;
        at.any.b_malloc = 
          static_cast<void**>(Memory::realloc(at.any.b_malloc,
                                              l*sizeof(void*)));
        at.any.l_malloc = l;
      }
      at.any.b_malloc[n_malloc-1] = p;
      break;
    }
    return p;
  }

  forceinline void
  ScratchArea::free(void*, size_t) {}

  forceinline
  ScratchArea::~ScratchArea(void) {
    home->ssa->free = free_reset;
    switch (n_malloc) {
    case 0:
      break;
    case 2:
      Memory::free(at.two.snd);
      // Fall through
    case 1:
      Memory::free(at.two.fst);
      break;
    default:
      for (unsigned int i=n_malloc; i--; )
        Memory::free(at.any.b_malloc[i]);
      Memory::free(at.any.b_malloc);
      break;
    }
  }
  

  /*
   * Typed allocation routines
   *
   */
  template <class T>
  forceinline T*
  ScratchArea::talloc(unsigned int n) {
    T* p = static_cast<T*>(alloc(sizeof(T)*n));
    for (unsigned int i=n; i--; )
      (void) new (p+i) T();
    return p;
  }

  template <class T>
  forceinline void
  ScratchArea::tfree(T* b, unsigned int n) {
    for (unsigned int i=n; i--; )
      b[i].~T();
    free(b,n*sizeof(T));
  }

  template <class T>
  forceinline T*
  ScratchArea::trealloc(T* b, unsigned int n, unsigned int m) {
    if (n < m) {
      T* p = static_cast<T*>(alloc(sizeof(T)*m));
      for (unsigned int i=n; i--; )
        (void) new (p+i) T(b[i]);
      for (unsigned int i=n; i<m; i++)
        (void) new (p+i) T();
      tfree<T>(b,n);
      return p;
    } else {
      tfree<T>(b+m,m-n);
      return b;
    }
  }


}

// STATISTICS: kernel-other
