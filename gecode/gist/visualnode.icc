/*
 *  Main authors:
 *     Guido Tack <tack@gecode.org>
 *
 *  Copyright:
 *     Guido Tack, 2006
 *
 *  Last modified:
 *     $Date$ by $Author$
 *     $Revision$
 *
 *  This file is part of Gecode, the generic constraint
 *  development environment:
 *     http://www.gecode.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

namespace Gecode { namespace Gist {

  forceinline
  BoundingBox::BoundingBox(int l, int r, int d)
   : left(l), right(r), depth(d) {}

  forceinline bool
  VisualNode::isHidden(void) { return hidden; }

  forceinline void
  VisualNode::setHidden(bool h) { hidden = h; }

  forceinline int
  VisualNode::getOffset(void) { return offset; }

  forceinline void
  VisualNode::setOffset(int n) { offset = n; }

  forceinline bool
  VisualNode::isDirty(void) { return dirty; }

  forceinline void
  VisualNode::setDirty(bool d) { dirty = d; }

  forceinline bool
  VisualNode::childrenLayoutIsDone(void) { return childrenLayoutDone; }

  forceinline void
  VisualNode::setChildrenLayoutDone(bool d) { childrenLayoutDone = d; }

  forceinline bool
  VisualNode::isMarked(void) { return marked; }

  forceinline void
  VisualNode::setMarked(bool m) { marked = m; }

  forceinline unsigned char
  VisualNode::getHeat(void) const { return heat; }

  forceinline void
  VisualNode::setHeat(unsigned char h) { heat = h; }

  forceinline bool
  VisualNode::isOnPath(void) { return onPath; }

  forceinline bool
  VisualNode::isLastOnPath(void) { return lastOnPath; }

  forceinline int
  VisualNode::getPathAlternative(void) { return pathAlternative; }

  forceinline Shape*
  VisualNode::getShape(void) { return shape; }
  
  forceinline void
  VisualNode::setShape(Shape* s) { shape = s; }
  
  forceinline void
  VisualNode::setBoundingBox(BoundingBox b) { box = b; }

  forceinline BoundingBox
  VisualNode::getBoundingBox(void) { return box; }
  
  forceinline VisualNode*
  VisualNode::getParent() {
    return static_cast<VisualNode*>(SpaceNode::getParent());
  }

  forceinline VisualNode*
  VisualNode::getChild(int i) {
    return static_cast<VisualNode*>(SpaceNode::getChild(i));
  }
    
}}

// STATISTICS: gist-any
