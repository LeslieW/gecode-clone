/*
 *  Main authors:
 *     Guido Tack <tack@gecode.org>
 *
 *  Copyright:
 *     Guido Tack, 2006
 *
 *  Last modified:
 *     $Date: 2008-04-26 09:09:46 +0200 (Sa, 26 Apr 2008) $ by $Author: tack $
 *     $Revision: 6787 $
 *
 *  This file is part of Gecode, the generic constraint
 *  development environment:
 *     http://www.gecode.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

namespace Gecode { namespace Gist {
  
  forceinline
  BoundingBox::BoundingBox(int l, int r, int d)
   : left(l), right(r), depth(d) {}
  
  forceinline
  Extent::Extent(void) : l(-1), r(-1) {}

  forceinline
  Extent::Extent(int l0, int r0) : l(l0), r(r0) {}

  inline
  Extent::Extent(int width) {
    int halfWidth = width / 2;
    l = 0 - halfWidth;
    r = 0 + halfWidth;
  }
  
  inline void
  Extent::extend(int deltaL, int deltaR) {
    l += deltaL; r += deltaR;
  }
  
  inline void
  Extent::move(int delta) {
    l += delta; r += delta;
  }
  
  inline
  Shape::Shape(Extent e)
   : shape(Memory::bmalloc<Extent>(1)), _depth(1) {
    shape[0] = e;
  }

  inline
  Shape::Shape(int d) {
    shape = Memory::bmalloc<Extent>(d);
    _depth = d;
  }

  forceinline
  Shape::~Shape(void) {
    Memory::free(shape);
  }
  
  forceinline int
  Shape::depth(void) const { return _depth; }
  
  forceinline const Extent&
  Shape::operator[](int i) const {
    return shape[i];
  }

  forceinline Extent&
  Shape::operator[](int i) {
    return shape[i];
  }

  forceinline Shape*&
  ShapeList::operator[](int i) {
    assert(i < numberOfShapes);
    return shapes[i];
  }
  
  forceinline int
  ShapeList::getOffsetOfChild(int i) {
    assert(i < numberOfShapes);
    return offsets[i];
  }

}}

// STATISTICS: gist-any
