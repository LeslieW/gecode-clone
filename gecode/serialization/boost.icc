/* -*- mode: C++; c-basic-offset: 2; indent-tabs-mode: nil -*- */
/*
 *  Main authors:
 *     Guido Tack <tack@gecode.org>
 *
 *  Copyright:
 *     Guido Tack, 2007
 *
 *  Last modified:
 *     $Date$ by $Author$
 *     $Revision$
 *
 *  This file is part of Gecode, the generic constraint
 *  development environment:
 *     http://www.gecode.org
 *
 *  Permission is hereby granted, free of charge, to any person obtaining
 *  a copy of this software and associated documentation files (the
 *  "Software"), to deal in the Software without restriction, including
 *  without limitation the rights to use, copy, modify, merge, publish,
 *  distribute, sublicense, and/or sell copies of the Software, and to
 *  permit persons to whom the Software is furnished to do so, subject to
 *  the following conditions:
 *
 *  The above copyright notice and this permission notice shall be
 *  included in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#include <boost/serialization/vector.hpp>
#include <boost/serialization/export.hpp>
#include <boost/serialization/split_free.hpp>
#include <boost/serialization/string.hpp>
#include <boost/serialization/base_object.hpp>
#include "gecode/support.hh"
#include <sstream>

namespace boost { namespace serialization {

  /////////////////////////////////////////////////////////////////////////
  // Gecode::Reflection::Arg

  template<class Archive>
  inline void save_construct_data(
      Archive & ar, const Gecode::Reflection::Arg* t,
      const unsigned int file_version
  ){
      // save data required to construct instance
      ar << t->t;
  }

  template<class Archive>
  inline void load_construct_data(
      Archive & ar, Gecode::Reflection::Arg* t,
      const unsigned int file_version
  ){
      // retrieve data from archive required to construct new instance
      int m;
      ar >> m;
      // invoke inplace constructor to initialize instance of my_class
      ::new(t)
        Gecode::Reflection::Arg(static_cast<Gecode::Reflection::Arg::argtype>(m));
      // t->initInt(m);
  }

  template<class Archive>
  inline void load(
    Archive& ar, Gecode::Reflection::Arg& arg,
    unsigned int file_version
  ){
    using namespace Gecode::Reflection;
    switch (arg.t) {
      case Arg::INT_ARG:
      {
        int m; ar >> m;
        arg.initInt(m);
      }
      break;
      case Arg::VAR_ARG:
      {
        int m; ar >> m;
        arg.initVar(m);
      }
      break;
      case Arg::ARRAY_ARG:
      {
        int m; ar >> m;
        arg.initArray(m);
        ArrayArg* array = arg.toArray();
        for (int i=0; i<m; i++) {
          Arg* k;
          ar >> k;
          (*array)[i] = k;
        }        
      }
      break;
      case Arg::INT_ARRAY_ARG:
      {
        int m; ar >> m;
        arg.initArray(m);
        IntArrayArg* array = arg.toIntArray();
        for (int i=0; i<m; i++) {
          int k;
          ar >> k;
          (*array)[i] = k;
        }        
      }
      break;
      case Arg::STRING_ARG:
      {
        std::string s;
        ar >> s;
        arg.initString(s.c_str());
      }
      break;
      case Arg::PAIR_ARG:
      {
        Arg* a; ar >> a;
        Arg* b; ar >> b;
        arg.initPair(a,b);
      }
      break;
      case Arg::SHARED_OBJECT_ARG:
      {
        Arg* a; ar >> a;
        arg.initSharedObject(a);
      }
      break;
      case Arg::SHARED_REF_ARG:
      {
        int m; ar >> m;
        arg.initSharedReference(m);
      }
      break;
    }
  }

  template<class Archive>
  void save(
    Archive& ar,
    const Gecode::Reflection::Arg& arg,
    const unsigned int file_version
  ) {
    using namespace Gecode::Reflection;
    switch (arg.t) {
      case Arg::INT_ARG:
      {
        int m = arg.toInt();
        ar << m;
      }
      break;
      case Arg::VAR_ARG:
      {
        int m = arg.toVar();
        ar << m;
      }
      break;
      case Arg::ARRAY_ARG:
      {
        const ArrayArg* array = arg.toArray();
        int s = array->size();
        ar << s;
        for (int i=0; i<s; i++) {
          const Arg* a = (*array)[i];
          ar << a;
        }        
      }
      break;
      case Arg::INT_ARRAY_ARG:
      {
        const IntArrayArg* array = arg.toIntArray();
        int s = array->size();
        ar << s;
        for (int i=0; i<s; i++) {
          int a = (*array)[i];
          ar << a;
        }        
      }
      break;
      case Arg::STRING_ARG:
      {
        std::stringstream oss;
        oss << arg.toString();
        std::string s = oss.str();
        ar << s;
      }
      break;
      case Arg::PAIR_ARG:
      {
        Arg* a = arg.first();
        ar << a;
        a = arg.second();
        ar << a;
      }
      break;
      case Arg::SHARED_OBJECT_ARG:
      {
        Arg* a = arg.toSharedObject();
        ar << a;
      }
      break;
      case Arg::SHARED_REF_ARG:
      {
        int m = arg.toSharedReference();
        ar << m;
      }
      break;
    }
  }

  template<class Archive>
  void serialize(
    Archive& ar,
    Gecode::Reflection::Arg& arg,
    const unsigned int file_version
  ) {
    split_free(ar, arg, file_version);
  }
  
  /////////////////////////////////////////////////////////////////////////
  // Gecode::Reflection::ActorSpec

  template<class Archive>
  inline void save_construct_data(
      Archive & ar,
      const Gecode::Reflection::ActorSpec* t,
      const unsigned int file_version
  ){
    // save data required to construct instance
    std::stringstream oss;
    oss << t->name();
    std::string n = oss.str();
    ar << n;
  }
  template<class Archive>
  inline void load_construct_data(
      Archive & ar, Gecode::Reflection::ActorSpec* t,
      const unsigned int file_version
  ){
    // retrieve data from archive required to construct new instance
    std::string n;
    ar >> n;
    // invoke inplace constructor to initialize instance of my_class
    ::new(t)Gecode::Reflection::ActorSpec(
      Gecode::Support::Symbol(n.c_str(),true));
  }
  template<class Archive>
  void save(
    Archive& ar, const Gecode::Reflection::ActorSpec& spec,
    unsigned int file_version
  ) {
    int noa = spec.noOfArgs();
    ar << noa;
    for (int i=0; i<spec.noOfArgs(); i++) {
      Gecode::Reflection::Arg* const arg = spec[i];
      ar << arg;
    }
  }
  template<class Archive>
  void load(
    Archive& ar, Gecode::Reflection::ActorSpec& spec,
    unsigned int file_version
  ) {
    int noOfArgs;
    ar >> noOfArgs;
    for (int i=noOfArgs; i--;) {
      Gecode::Reflection::Arg* arg;
      ar >> arg;
      spec << arg;
    }
  }
  template<class Archive>
  inline void serialize(
      Archive & ar,
      Gecode::Reflection::ActorSpec& spec,
      const unsigned int file_version
  ){
      split_free(ar, spec, file_version);
  }
  
}}

BOOST_CLASS_EXPORT(Gecode::Reflection::Arg)
BOOST_CLASS_EXPORT(Gecode::Reflection::ActorSpec)

// STATISTICS: serialization-any
