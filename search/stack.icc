/*
 *  Main authors:
 *     Christian Schulte <schulte@gecode.org>
 *
 *  Copyright:
 *     Christian Schulte, 2003
 *
 *  Last modified:
 *     $Date$ by $Author$
 *     $Revision$
 *
 *  This file is part of Gecode, the generic constraint
 *  development environment:
 *     http://www.gecode.org
 *
 *  See the file "LICENSE" for information on usage and
 *  redistribution of this file, and for a
 *     DISCLAIMER OF ALL WARRANTIES.
 *
 */

namespace Gecode { namespace Search {

  /*
   * Base stack class
   *
   */

  template <class Node>
  void
  BaseStack<Node>::reset(void) {
    while (!this->empty())
      this->pop().dispose();
  }



  /*
   * Copying stack class
   *
   */

  forceinline
  CopyStack::CopyStack(void) {}

  forceinline void
  CopyStack::push(Space* s, unsigned int alt) {
    CopyNode sn(s,alt);
    Support::DynamicStack<CopyNode>::push(sn);
  }



  /*
   * Recomputation stack class
   *
   */

  forceinline
  ReCoStack::ReCoStack(unsigned int a_d0) : a_d(a_d0) {}

  forceinline BranchingDesc*
  ReCoStack::push(Space* s, Space* c, unsigned int alt) {
    ReCoNode sn(s,c,alt);
    Support::DynamicStack<ReCoNode>::push(sn);
    return sn.desc();
  }

  forceinline bool
  ReCoStack::next(FullStatistics& stat) {
    // Generate path for next node and return whether node exists.
    while (!empty()) {
      if (top().rightmost()) {
	stat.pop(top().space(),top().desc());
	pop().dispose();
      } else {
	top().next();
	return true;
      }
    }
    return false;
  }

}}

// STATISTICS: search-any
