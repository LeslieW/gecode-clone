/* -*- mode: C++; c-basic-offset: 2; indent-tabs-mode: nil -*- */
/*
 *  Main authors:
 *     Christian Schulte <schulte@gecode.org>
 *
 *  Copyright:
 *     Christian Schulte, 2004
 *
 *  Last modified:
 *     $Date$ by $Author$
 *     $Revision$
 *
 *  This file is part of Gecode, the generic constraint
 *  development environment:
 *     http://www.gecode.org
 *
 *
 *  Permission is hereby granted, free of charge, to any person obtaining
 *  a copy of this software and associated documentation files (the
 *  "Software"), to deal in the Software without restriction, including
 *  without limitation the rights to use, copy, modify, merge, publish,
 *  distribute, sublicense, and/or sell copies of the Software, and to
 *  permit persons to whom the Software is furnished to do so, subject to
 *  the following conditions:
 *
 *  The above copyright notice and this permission notice shall be
 *  included in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#include <iostream>
#include <iomanip>

#include <ctime>
#include <cmath>

namespace {

  /**
   * \brief Stop object based on both time and failures
   *
   */
  class FailTimeStop : public Search::Stop {
  private:
    Search::TimeStop *ts; ///< Used time stop object
    Search::FailStop *fs; ///< Used fail stop object
    /// Initialize stop object
    FailTimeStop(int fails, int time) {
      ts = new Search::TimeStop(time);
      fs = new Search::FailStop(fails);
    }
  public:
    /// Test whether search must be stopped
    virtual bool stop(const Search::Statistics& s) {
      return fs->stop(s) || ts->stop(s);
    }
    /// Create appropriate stop-object
    static Search::Stop* create(unsigned int fail, unsigned int time) {
      if ((fail == 0) && (time == 0)) 
        return NULL;
      if (fail == 0) 
        return new Search::TimeStop(time);
      if (time  == 0) 
        return new Search::FailStop(fail);
      return new FailTimeStop(fail,time);
    }
  };

  /// Timer interface used for examples
  class Timer {
  private:
    clock_t t0; ///< Start time
  public:
    /// Start timer
    void start(void) {
      t0 = clock();
    }
    /// Stop timer
    double stop(void) {
      return (static_cast<double>(clock()-t0) / CLOCKS_PER_SEC) * 1000.0;
    }
  };
  
}


/**
 * \brief Compute arithmetic mean of \a n elements in \a t
 * \relates Timer
 */
double
am(double t[], int n);

/**
 * \brief Compute deviation of \a n elements in \a t
 * \relates Timer
 */
double
dev(double t[], int n);


template <class Script, template<class> class Engine, class Options>
void
Example::run(const Options& o) {
  using namespace std;
  try {
    switch (o.mode()) {
    case EM_SOLUTION:
      {
        cout << o.name() << endl;
        Timer t;
        int i = o.solutions();
        t.start();
        Script* s = new Script(o);
        unsigned int n_p = 0;
        unsigned int n_b = 0;
        unsigned long int p = 0;
        if (s->status(p) != SS_FAILED) {
          n_p = s->propagators();
          n_b = s->branchings();
        }
        if (o.sac() != SAC_NONE) {
          s->sac_collect_vars();
          while (s->sac(p) && o.sac() == SAC_FULL);
          s->sac_remove_vars();
        }
        Search::Stop* stop = FailTimeStop::create(o.fail(), o.time());
        Engine<Script> e(s,o.c_d(),o.a_d(),stop);
        delete s;
        do {
          Example* ex = e.next();
          if (ex == NULL)
            break;
          ex->print(std::cout);
          delete ex;
        } while (--i != 0);
        Search::Statistics stat = e.statistics();
        cout << endl;
        cout << "Initial" << endl
             << "\tpropagators:   " << n_p << endl
             << "\tbranchings:    " << n_b << endl
             << endl
             << "Summary" << endl
             << "\truntime:       " << t.stop() << endl
             << "\tsolutions:     " 
             << abs(static_cast<int>(o.solutions()) - i) << endl
             << "\tpropagations:  " << p+stat.propagate << endl
             << "\tfailures:      " << stat.fail << endl
             << "\tclones:        " << stat.clone << endl
             << "\tcommits:       " << stat.commit << endl
             << "\tpeak memory:   "
             << static_cast<int>((stat.memory+1023) / 1024) << " KB"
             << endl;
      }
      break;
    case EM_STAT:
      {
        cout << o.name() << endl;
        int i = o.solutions();
        Script* s = new Script(o);
        unsigned int n_p = 0;
        unsigned int n_b = 0;
        unsigned long int p = 0;
        if (s->status(p) != SS_FAILED) {
          n_p = s->propagators();
          n_b = s->branchings();
        }
        if (o.sac() != SAC_NONE) {
          s->sac_collect_vars();
          while (s->sac(p) && o.sac() == SAC_FULL);
          s->sac_remove_vars();
        }
        Engine<Script> e(s,o.c_d(),o.a_d());
        delete s;
        do {
          Example* ex = e.next();
          if (ex == NULL)
            break;
          delete ex;
        } while (--i != 0);
        Search::Statistics stat = e.statistics();
        cout << endl
             << "\tpropagators:   " << n_p << endl
             << "\tbranchings:    " << n_b << endl
             << "\tsolutions:     " 
             << abs(static_cast<int>(o.solutions()) - i) << endl
             << "\tpropagations:  " << p+stat.propagate << endl
             << "\tfailures:      " << stat.fail << endl
             << "\tclones:        " << stat.clone << endl
             << "\tcommits:       " << stat.commit << endl
             << "\tpeak memory:   "
             << static_cast<int>((stat.memory+1023) / 1024) << " KB"
             << endl;
      }
      break;
    case EM_TIME:
      {
        cout << o.name() << endl;
        Timer t;
        GECODE_AUTOARRAY(double,ts,o.samples());
        for (unsigned int s = o.samples(); s--; ) {
          t.start();
          for (unsigned int k = o.iterations(); k--; ) {
            unsigned int i = o.solutions();
            Script* s = new Script(o);
            if (o.sac() != SAC_NONE) {
              unsigned long int p;
              s->sac_collect_vars();
              while (s->sac(p) && o.sac() == SAC_FULL);
              s->sac_remove_vars();
            }
            Engine<Script> e(s,o.c_d(),o.a_d());
            delete s;
            do {
              Example* ex = e.next();
              if (ex == NULL)
                break;
              delete ex;
            } while (--i != 0);
          }
          ts[s] = t.stop() / o.iterations();
        }
        double m = am(ts,o.samples());
        double d = dev(ts,o.samples()) * 100.0;
        cout << "\tRuntime: "
             << setw(20) << right
             << showpoint << fixed
             << setprecision(6) << m << "ms"
             << setprecision(2) << " (" << d << "% deviation)"
             << endl;
      }
      break;
#ifdef GECODE_HAVE_GIST
    case EM_GIST:
      {
        Gist::PrintingInspector<Script> pi(o.name());
        Script* s = new Script(o);
        (void) explore(s, &pi);
        delete s;
      }
      break;
#endif
    }
  } catch (Exception e) {
    cout << "Exception: " << e.what() << "." << endl
         << "Stopping..." << endl;
  }
}

// STATISTICS: example-any
