/*
 *  Main authors:
 *     Christian Schulte <schulte@gecode.org>
 *     Guido Tack <tack@gecode.org>
 *
 *  Copyright:
 *     Christian Schulte, 2004
 *     Guido Tack, 2006
 *
 *  Last modified:
 *     $Date$ by $Author$
 *     $Revision$
 *
 *  This file is part of Gecode, the generic constraint
 *  development environment:
 *     http://www.gecode.org
 *
 *  See the file "LICENSE" for information on usage and
 *  redistribution of this file, and for a
 *     DISCLAIMER OF ALL WARRANTIES.
 *
 */

#include <algorithm>

namespace Gecode { namespace Int { namespace Arithmetic {

  template <class View>
  forceinline
  AbsBnd<View>::AbsBnd(Space* home, View x0, View x1)
    : BinaryPropagator<View,PC_INT_BND>(home,x0,x1) {}

  template <class View>
  ExecStatus
  AbsBnd<View>::post(Space* home, View x0, View x1) {
    GECODE_ME_CHECK(x1.gq(home,0));
    if (!same(x0,x1)) {
      (void) new (home) AbsBnd<View>(home,x0,x1);
    }
    return ES_OK;
  }


  template <class View>
  forceinline
  AbsBnd<View>::AbsBnd(Space* home, bool share, AbsBnd<View>& p)
    : BinaryPropagator<View,PC_INT_BND>(home,share,p) {}

  template <class View>
  Actor*
  AbsBnd<View>::copy(Space* home,bool share) {
    return new (home) AbsBnd<View>(home,share,*this);
  }

#define GECODE_CM(TELL)			        \
{ 						\
  ModEvent me = (TELL);				\
  if (me_failed(me))    return ES_FAILED;	\
  if (me_modified(me)) mod = true;		\
}

  template <class View>
  ExecStatus
  AbsBnd<View>::propagate(Space* home) {
    if (x0.min() >= 0) {
      GECODE_ES_CHECK(Rel::EqBnd<View>::post(home,x0,x1));
      return ES_SUBSUMED;
    }
    if (x0.max() <= 0) {
      return (Linear::EqBin<int,View,View>::post(home,x0,x1,0) == ES_FAILED)
	? ES_FAILED : ES_SUBSUMED;
    }
    bool mod = false;
    do {
      mod = false;
      GECODE_CM(x1.lq(home,std::max(x0.max(),-x0.min())));
      GECODE_CM(x0.lq(home,x1.max()));
      GECODE_CM(x0.gq(home,-x1.max()));
    } while (mod);
    if (x0.assigned()) {
      GECODE_ME_CHECK(x1.eq(home,(x0.val() < 0) ? -x0.val() : x0.val()));
      return ES_SUBSUMED;
    }
    return ES_FIX;
  }

#undef GECODE_CM


  template <class View>
  forceinline
  AbsDom<View>::AbsDom(Space* home, View x0, View x1)
    : BinaryPropagator<View,PC_INT_DOM>(home,x0,x1) {}

  template <class View>
  ExecStatus
  AbsDom<View>::post(Space* home, View x0, View x1) {
    GECODE_ME_CHECK(x1.gq(home,0));
    if (!same(x0,x1)) {
      (void) new (home) AbsDom<View>(home,x0,x1);
    }
    return ES_OK;
  }


  template <class View>
  forceinline
  AbsDom<View>::AbsDom(Space* home, bool share, AbsDom<View>& p)
    : BinaryPropagator<View,PC_INT_DOM>(home,share,p) {}

  template <class View>
  Actor*
  AbsDom<View>::copy(Space* home,bool share) {
    return new (home) AbsDom<View>(home,share,*this);
  }

  template <class View>
  ExecStatus
  AbsDom<View>::propagate(Space* home) {
    if (x0.min() >= 0) {
      GECODE_ES_CHECK(Rel::EqDom<View>::post(home,x0,x1));
      return ES_SUBSUMED;
    }

	Iter::Ranges::Singleton positive(0, Limits::Int::int_max);
	Iter::Ranges::Singleton negative(Limits::Int::int_min, 0);

	IntVarRanges xr1(x0);
	IntVarRanges xr2(x0);

	Iter::Ranges::Inter<Iter::Ranges::Singleton,
						IntVarRanges> posInter(positive, xr1);
	Iter::Ranges::Inter<Iter::Ranges::Singleton,
						IntVarRanges> negInter(negative, xr2);
	Iter::Ranges::Minus<Iter::Ranges::Inter<Iter::Ranges::Singleton,
											IntVarRanges> > mneg(negInter);
	Iter::Ranges::Union<Iter::Ranges::Inter<Iter::Ranges::Singleton,
											IntVarRanges>,
						Iter::Ranges::Minus<Iter::Ranges::Inter<
						  Iter::Ranges::Singleton,
						  IntVarRanges> > >
						u(posInter, mneg);

	GECODE_ME_CHECK(x1.inter(home, u));

	IntVarRanges x1r1(x1);
	IntVarRanges x1r2(x1);

	Iter::Ranges::Minus<IntVarRanges> x1m(x1r2);
	Iter::Ranges::Union<IntVarRanges,
						Iter::Ranges::Minus<IntVarRanges> > u2(x1r1,x1m);
	GECODE_ME_CHECK(x0.inter(home, u2));

	if (x1.assigned())
		return ES_SUBSUMED;

    return ES_FIX;
  }

}}}

// STATISTICS: int-prop

