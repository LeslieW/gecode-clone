/*
 *  Main authors:
 *     Christian Schulte <schulte@gecode.org>
 *
 *  Copyright:
 *     Christian Schulte, 2006
 *
 *  Last modified:
 *     $Date: 2005-10-23 16:23:09 +0200 (Sun, 23 Oct 2005) $ by $Author: schulte $
 *     $Revision: 2403 $
 *
 *  This file is part of Gecode, the generic constraint
 *  development environment:
 *     http://www.gecode.org
 *
 *  See the file "LICENSE" for information on usage and
 *  redistribution of this file, and for a
 *     DISCLAIMER OF ALL WARRANTIES.
 *
 */

#include "iter.hh"

namespace Gecode { namespace Int { namespace Channel {

  template <class View>
  forceinline
  Dom<View>::Dom(Space* home, ViewArray<View>& x0, ViewArray<View>& y0)
    : Propagator(home), x(x0), y(y0), 
      ci(reinterpret_cast<CardInfo*>(home->alloc(x.size()*sizeof(CardInfo)))) {
    for (int i=x.size(); i--; ) {
      x[i].subscribe(home,this,PC_INT_DOM); ci[i].x = 0;
      y[i].subscribe(home,this,PC_INT_DOM); ci[i].y = 0;
    }
  }

  template <class View>
  forceinline
  Dom<View>::Dom(Space* home, bool share, Dom<View>& p)
    : Propagator(home,share,p),
      ci(reinterpret_cast<CardInfo*>(home->alloc(x.size()*sizeof(CardInfo)))) {
    x.update(home,share,p.x);
    y.update(home,share,p.y);
    for (int i=x.size(); i--; )
      ci[i] = p.ci[i];
  }

  template <class View>
  Actor*
  Dom<View>::copy(Space* home, bool share) {
    return new (home) Dom<View>(home,share,*this);
  }

  template <class View>
  PropCost
  Dom<View>::cost(void) const {
    return PC_CUBIC_LO;
  }

  template <class View>
  ExecStatus
  Dom<View>::propagate(Space* home) {
    return ES_FAILED;
  }

  template <class View>
  ExecStatus
  Dom<View>::post(Space* home, ViewArray<View>& x, ViewArray<View>& y) {
    if (x.size() == 0)
      return ES_OK;
    (void) new (home) Dom<View>(home,x,y);
    return ES_OK;
  }

  template <class View>
  Dom<View>::~Dom(void) {
    x.cancel(this,PC_INT_DOM);
    y.cancel(this,PC_INT_DOM);
  }


}}}

// STATISTICS: int-prop

